<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>维修外星人差点被骗 凯旋门大厦A座10层D室 4001067088</title>
      <link href="/life/2-cheat/"/>
      <url>/life/2-cheat/</url>
      <content type="html"><![CDATA[<p><img src="https://resource.lilyssh.cn/pic/life/cheat.png" alt><br>外星人笔记本S键掉了，搜戴尔外星人官方售后电话，竟然搜到了这么个骗子网站<strong><a href="http://www.support-tj.com/alwm/" target="_blank" rel="noopener">http://www.support-tj.com/alwm/</a></strong>，看到上面写着电话：400-106-7088，就打电话到4001067088，客服让我到天津市河西区南京路66号凯旋门大厦A座10层D室（A10D）电话：022-23121350 17622628035来修，这边员工这个黑心啊，非说一个键坏了，就必须得换整套键盘，要1300块。我就又换了家问问，结果70块修好了。再打电话过去投诉时，问他们公司名字，死活不肯说，只说确实不是戴尔官方售后，只是综合服务中心，敢做不敢当是吧，行，我有的是办法去各大网站曝光你们的无耻行径。<br><img src="https://resource.lilyssh.cn/pic/life/don&#39;t_cheat.jpg" alt><br><img src="https://resource.lilyssh.cn/pic/life/zhang_xin.jpg" alt><br><img src="https://resource.lilyssh.cn/pic/life/angry.jpg" alt></p>]]></content>
      
      <categories>
          
          <category> 小心受骗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小心受骗 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZooKeeper</title>
      <link href="/zookeeper/1-zookeeper/"/>
      <url>/zookeeper/1-zookeeper/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/zookeeper/2-zookeeper/">https://lilyssh.cn/zookeeper/2-zookeeper/</a></p><a id="more"></a><h1 id="一、ZooKeeper是什么？"><a href="#一、ZooKeeper是什么？" class="headerlink" title="一、ZooKeeper是什么？"></a>一、ZooKeeper是什么？</h1><p>ZooKeeper是个开源的分布式系统的协调组件，用来协作多个任务。</p><h1 id="二、ZooKeeper能用来做什么？"><a href="#二、ZooKeeper能用来做什么？" class="headerlink" title="二、ZooKeeper能用来做什么？"></a>二、ZooKeeper能用来做什么？</h1><p>配置管理、名字服务、分布式锁、集群管理。</p><h1 id="三、为什么要使用ZooKeeper？"><a href="#三、为什么要使用ZooKeeper？" class="headerlink" title="三、为什么要使用ZooKeeper？"></a>三、为什么要使用ZooKeeper？</h1><p>使开发人员更多关注应用本身逻辑，而不是协同工作上，保证项目健壮性。<br>而且具有高容错性和可扩展性。</p><p>集群版<br>Zookeeper 集群中的角色<br>设计目的</p><h1 id="群首选举"><a href="#群首选举" class="headerlink" title="群首选举"></a>群首选举</h1>]]></content>
      
      <categories>
          
          <category> ZooKeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring中用到的设计模式</title>
      <link href="/design-pattern/2-design-pattern-spring/"/>
      <url>/design-pattern/2-design-pattern-spring/</url>
      <content type="html"><![CDATA[<a id="more"></a><p>Spring IOC 工厂、单例、装饰器<br>Spring AOP 代理、观察者<br>Spring MVC 委派、适配器<br>Spring JDBC 模板方法</p><h2 id="1-、工厂模式"><a href="#1-、工厂模式" class="headerlink" title="1)、工厂模式"></a>1)、工厂模式</h2><p>BeanFactory</p><h2 id="2-、装饰器模式"><a href="#2-、装饰器模式" class="headerlink" title="2)、装饰器模式"></a>2)、装饰器模式</h2><p>BeanWrapper</p><h2 id="3-、代理模式"><a href="#3-、代理模式" class="headerlink" title="3)、代理模式"></a>3)、代理模式</h2><p>AopProxy</p><h2 id="4-、单例模式"><a href="#4-、单例模式" class="headerlink" title="4)、单例模式"></a>4)、单例模式</h2><p>ApplicationContext</p><h2 id="5-、委派模式"><a href="#5-、委派模式" class="headerlink" title="5)、委派模式"></a>5)、委派模式</h2><p>DispatcherServlet</p><h2 id="6-、策略模式"><a href="#6-、策略模式" class="headerlink" title="6)、策略模式"></a>6)、策略模式</h2><p>HandlerMapping</p><h2 id="7-、适配器模式"><a href="#7-、适配器模式" class="headerlink" title="7)、适配器模式"></a>7)、适配器模式</h2><p>HandlerAdapter</p><h2 id="8-、摸板方法模式"><a href="#8-、摸板方法模式" class="headerlink" title="8)、摸板方法模式"></a>8)、摸板方法模式</h2><p>JdbcTemplate</p><h2 id="9-、观察者模式"><a href="#9-、观察者模式" class="headerlink" title="9)、观察者模式"></a>9)、观察者模式</h2><p>ContextLoaderListener</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式</title>
      <link href="/design-pattern/1-design-pattern/"/>
      <url>/design-pattern/1-design-pattern/</url>
      <content type="html"><![CDATA[<h1 id="1、软件设计的原则"><a href="#1、软件设计的原则" class="headerlink" title="1、软件设计的原则"></a>1、软件设计的原则</h1><a id="more"></a><p>SOLID<br>|     |                               |             |<br>| :–:| :—————————: | :———: |<br>| SRP    | Simple Responsibility Pinciple | 单一责任原则 |<br>| OCP    | Open-Closed Principle | 开放封闭原则 |<br>| LSP    | Liskov Substitution Principle | 里氏替换原则 |<br>| ISP    | Interface Segregation Principle | 接口隔离原则 |<br>| DIP    | Dependence Inversion Principle | 依赖倒置原则 |<br>|     |                               |             |</p><h2 id="1-、单一职责原则"><a href="#1-、单一职责原则" class="headerlink" title="1)、单一职责原则"></a>1)、单一职责原则</h2><p>一个Class/Interface/Method只负责一项职责。</p><h2 id="2-、开闭原则"><a href="#2-、开闭原则" class="headerlink" title="2)、开闭原则"></a>2)、开闭原则</h2><p>对扩展开放，对修改关闭。核心思想是面向抽象编程。</p><h2 id="3-、里氏替换原则"><a href="#3-、里氏替换原则" class="headerlink" title="3)、里氏替换原则"></a>3)、里氏替换原则</h2><p>子类可以扩展父类的功能，但不能改变父类原有的功能。</p><h3 id="1-子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。"><a href="#1-子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。" class="headerlink" title="(1).子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。"></a>(1).子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</h3><h3 id="2-子类中可以增加自己特有的方法。"><a href="#2-子类中可以增加自己特有的方法。" class="headerlink" title="(2).子类中可以增加自己特有的方法。"></a>(2).子类中可以增加自己特有的方法。</h3><h3 id="3-当子类的方法重载父类的方法时，方法的前置条件（即方法的输入-入参）要比父类方法的输入参数更宽松。"><a href="#3-当子类的方法重载父类的方法时，方法的前置条件（即方法的输入-入参）要比父类方法的输入参数更宽松。" class="headerlink" title="(3).当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类方法的输入参数更宽松。"></a>(3).当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类方法的输入参数更宽松。</h3><h3 id="4-当子类的方法实现父类的方法时（重写-重载或实现抽象方法），方法的后置条件（即方法的输出-返回值）要比父类更严格或相等。"><a href="#4-当子类的方法实现父类的方法时（重写-重载或实现抽象方法），方法的后置条件（即方法的输出-返回值）要比父类更严格或相等。" class="headerlink" title="(4).当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的输出/返回值）要比父类更严格或相等。"></a>(4).当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的输出/返回值）要比父类更严格或相等。</h3><h2 id="4-、接口隔离原则"><a href="#4-、接口隔离原则" class="headerlink" title="4)、接口隔离原则"></a>4)、接口隔离原则</h2><p>类不应该依赖不需要的接口，知道越少越好。<br>是指用多个专门的接口，而不使 用单一的总接口。</p><h2 id="5-、依赖倒置原则"><a href="#5-、依赖倒置原则" class="headerlink" title="5)、依赖倒置原则"></a>5)、依赖倒置原则</h2><h3 id="1-高层模块不应该依赖低层模块，两者都应该依赖其抽象。"><a href="#1-高层模块不应该依赖低层模块，两者都应该依赖其抽象。" class="headerlink" title="(1).高层模块不应该依赖低层模块，两者都应该依赖其抽象。"></a>(1).高层模块不应该依赖低层模块，两者都应该依赖其抽象。</h3><h3 id="2-抽象不应该依赖细节。"><a href="#2-抽象不应该依赖细节。" class="headerlink" title="(2).抽象不应该依赖细节。"></a>(2).抽象不应该依赖细节。</h3><h3 id="3-细节应该依赖抽象。"><a href="#3-细节应该依赖抽象。" class="headerlink" title="(3).细节应该依赖抽象。"></a>(3).细节应该依赖抽象。</h3><p>比如类A内有类B对象，称为类A依赖类B，但是不应该这样做，而是选择类A去依赖抽象。</p><h2 id="6-、迪米特法则"><a href="#6-、迪米特法则" class="headerlink" title="6)、迪米特法则"></a>6)、迪米特法则</h2><p>一个对象应该对其他对象保持最少的了解，又 叫最少知道原则(Least Knowledge Principle,LKP)，尽量降低类与类之间的耦合。</p><h2 id="7-、合成复用原则"><a href="#7-、合成复用原则" class="headerlink" title="7)、合成复用原则"></a>7)、合成复用原则</h2><p>尽量使用对象组合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的。</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式  工厂</title>
      <link href="/design-pattern/3-factory/"/>
      <url>/design-pattern/3-factory/</url>
      <content type="html"><![CDATA[<h1 id="1、简单工厂"><a href="#1、简单工厂" class="headerlink" title="1、简单工厂"></a>1、简单工厂</h1><a id="more"></a><h2 id="1-、定义"><a href="#1-、定义" class="headerlink" title="1)、定义"></a>1)、定义</h2><p>简单工厂模式（Simple Factory Pattern）是指由一个工厂对象 决定创建出哪一种产品类的实例。 属于创建型模式，但它不属于GOF，23种设计模式。</p><h2 id="2-、适用场景"><a href="#2-、适用场景" class="headerlink" title="2)、适用场景"></a>2)、适用场景</h2><p>工厂类负责创建的对象较少。<br>客户端只需要传入工厂类的参数，对于如何创建对象的逻辑不需要关心。</p><h2 id="3-、优点"><a href="#3-、优点" class="headerlink" title="3)、优点"></a>3)、优点</h2><p>只需传入一个正确的参数，就可以获取你所需要的对象无须知道其创建的细节。</p><h2 id="4-、缺点"><a href="#4-、缺点" class="headerlink" title="4)、缺点"></a>4)、缺点</h2><p>工厂类的职责相对过重，增加新的产品时需要修改工厂类的判断逻辑，违背开闭原则。 不易于扩展复杂的产品结构。</p><h2 id="4-、案例"><a href="#4-、案例" class="headerlink" title="4)、案例"></a>4)、案例</h2><p>Calandar.getInstance()<br>LoggerFactory.getLogger()<br>同时也是单例模式。</p><h1 id="2、工厂方法模式"><a href="#2、工厂方法模式" class="headerlink" title="2、工厂方法模式"></a>2、工厂方法模式</h1><h2 id="1-、优点"><a href="#1-、优点" class="headerlink" title="1)、优点"></a>1)、优点</h2><p>（1）工厂方法用来创建客户所需要的产品，同时隐藏了哪种具体产品类将被实例化的细节，用户只需要要关注工厂，不需要关注创建的细节！<br>（2）在增加修改新类时，只需要增加对应的工厂就好，完全符合开闭原则！<br>（3）创建对象的细节完全封装在具体的工厂内部，而且有了抽象的工厂类，所有的具体工厂都继承了自己的父类！完美的体现了多态性！</p><h2 id="2-、缺点"><a href="#2-、缺点" class="headerlink" title="2)、缺点"></a>2)、缺点</h2><p>（1）类的个数过多，增加了代码结构的复杂度。<br>（2）增加了理解难度。</p><h1 id="2、抽象工厂模式"><a href="#2、抽象工厂模式" class="headerlink" title="2、抽象工厂模式"></a>2、抽象工厂模式</h1><h2 id="1-、优点-1"><a href="#1-、优点-1" class="headerlink" title="1)、优点"></a>1)、优点</h2><p>具体产品在应用层代码隔离，无须关心创建细节<br>将一个系列的产品族统一到一起创建。</p><h2 id="2-、缺点-1"><a href="#2-、缺点-1" class="headerlink" title="2)、缺点"></a>2)、缺点</h2><p>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口。<br>增加了理解难度。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单工厂违反了开闭原则，工厂方法与抽象工厂完美的解决了简单工厂的弊端！工厂方法的工厂个数过多，导致系统庞大，抽象工厂增加新的产品族很方便！</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式  单例</title>
      <link href="/design-pattern/4-sigleton/"/>
      <url>/design-pattern/4-sigleton/</url>
      <content type="html"><![CDATA[<p>1、掌握单例模式的应用场景。<br>2、掌握IDEA环境下的多线程调试方式。<br>3、掌握保证线程安全的单例模式策略。<br>4、掌握反射暴力攻击单例解决方案及原理分析。<br>5、序列化破坏单例的原理及解决方案。<br>6、掌握常见的单例模式写法。</p><a id="more"></a><h1 id="1、单例"><a href="#1、单例" class="headerlink" title="1、单例"></a>1、单例</h1><p>单例的四大原则：<br>1.构造私有。<br>2.以静态方法或者枚举返回实例。<br>3.确保实例只有一个，尤其是多线程环境。<br>4.确保反序列换时不会重新构建对象。</p><h2 id="1-、定义"><a href="#1-、定义" class="headerlink" title="1)、定义"></a>1)、定义</h2><p>单例模式（Singleton Pattern）是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。 隐藏其所有的构造方法。<br>属于创建型模式。</p><h2 id="2-、适用场景"><a href="#2-、适用场景" class="headerlink" title="2)、适用场景"></a>2)、适用场景</h2><p>1.资源共享的情况下，避免由于资源操作时导致的性能或损耗等。如上述中的日志文件，应用配置。<br>2.控制资源的情况下，方便资源之间的互相通信。如线程池等。 </p><h2 id="2-、常见写法"><a href="#2-、常见写法" class="headerlink" title="2)、常见写法"></a>2)、常见写法</h2><h3 id="1-、饿汉式单例"><a href="#1-、饿汉式单例" class="headerlink" title="(1)、饿汉式单例"></a>(1)、饿汉式单例</h3><p>饿汉模式在类被初始化时就已经在内存中创建了对象，<font color="red">以空间换时间，故不存在线程安全问题。</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先静态、后动态</span></span><br><span class="line">    <span class="comment">//先属性、后方法</span></span><br><span class="line">    <span class="comment">//先上后下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton hungrySingleton = <span class="keyword">new</span> HungrySingleton(); <span class="comment">//有final，防止别处修改值。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  hungrySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-、懒汉式单例"><a href="#2-、懒汉式单例" class="headerlink" title="(2)、懒汉式单例"></a>(2)、懒汉式单例</h3><p>被外部类调用时才创建实例</p><h4 id="1、懒汉式"><a href="#1、懒汉式" class="headerlink" title="1、懒汉式"></a>1、懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySimpleSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySimpleSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//静态块，公共内存区域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySimpleSingleton lazy = <span class="keyword">null</span>;   <span class="comment">//没final，在全局访问点赋值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazySimpleSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazy = <span class="keyword">new</span> LazySimpleSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExectorThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LazySimpleSingleton singleton = LazySimpleSingleton.getInstance();</span><br><span class="line"><span class="comment">//        ThreadLocalSingleton singleton = ThreadLocalSingleton.getInstance();</span></span><br><span class="line"><span class="comment">//        LazyDoubleCheckSingleton singleton = LazyDoubleCheckSingleton.getInstance();</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + singleton);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySimpleSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        System.out.println(<span class="string">"End"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用<code>synchronized</code>加锁，在线程数量比较多情况下，大批量线程会出现阻塞，从而导致程序运行性能大幅下降。<br>既兼顾线程安全又提升程序性能的方式：</p><h4 id="2、双重检查锁的单例模式："><a href="#2、双重检查锁的单例模式：" class="headerlink" title="2、双重检查锁的单例模式："></a>2、双重检查锁的单例模式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDoubleCheckSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyDoubleCheckSingleton lazy = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyDoubleCheckSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyDoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyDoubleCheckSingleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazy = <span class="keyword">new</span> LazyDoubleCheckSingleton(); <span class="comment">//1.分配内存给这个对象。2.初始化对象。3.设置lazy指向刚分配的内存地址。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行双重检查是因为，如果多个线程同时了通过了第一次检查，并且其中一个线程首先通过了第二次检查并实例化了对象，那么剩余通过了第一次检查的线程就不会再去实例化对象。这样，除了初始化的时候会出现加锁的情况，后续的所有调用都会避免加锁而直接返回，解决了性能消耗的问题。<br>不加volatile的隐患：<br>有些编译器为了性能的原因，可能会将第二步和第三步进行重排序，访问到的是一个初始化未完成的对象。<br>为了解决上述问题，需要在lazy前加入关键字volatile。使用了volatile关键字后，重排序被禁止，所有的写（write）操作都将发生在读（read）操作之前。</p><h4 id="3、内部类的单例模式："><a href="#3、内部类的单例模式：" class="headerlink" title="3、内部类的单例模式："></a>3、内部类的单例模式：</h4><p>懒加载。线程安全。<br>加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyInnerClassSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyInnerClassSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LazyHolder.LAZY != <span class="keyword">null</span>)&#123;  <span class="comment">//为了防止暴力初始化，此处需要判断。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不允许创建多个实例"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static 是为了使单例的空间共享。final保证这个方法不会被重写，重载。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LazyInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//在返回结果以前，一定会先加载内部类</span></span><br><span class="line">        <span class="keyword">return</span> LazyHolder.LAZY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认不加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LazyInnerClassSingleton LAZY = <span class="keyword">new</span> LazyInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>暴力初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyInnerClassSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class&lt;?&gt; clazz = LazyInnerClassSingleton.class;</span><br><span class="line">            Constructor c = clazz.getDeclaredConstructor(<span class="keyword">null</span>); <span class="comment">//通过反射拿到私有的构造方法</span></span><br><span class="line">            c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object o1 = c.newInstance(); <span class="comment">//暴力初始化</span></span><br><span class="line">            Object o2 = c.newInstance(); <span class="comment">//调用了两次构造方法，相当于new了两次</span></span><br><span class="line">            System.out.println(o1 == o2);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-、注册式单例"><a href="#3-、注册式单例" class="headerlink" title="(3)、注册式单例"></a>(3)、注册式单例</h3><h3 id="4-、ThreadLocal单例"><a href="#4-、ThreadLocal单例" class="headerlink" title="(4)、ThreadLocal单例"></a>(4)、ThreadLocal单例</h3><h2 id="3-、优点"><a href="#3-、优点" class="headerlink" title="3)、优点"></a>3)、优点</h2><h2 id="4-、缺点"><a href="#4-、缺点" class="headerlink" title="4)、缺点"></a>4)、缺点</h2><h2 id="4-、案例"><a href="#4-、案例" class="headerlink" title="4)、案例"></a>4)、案例</h2><p>Calandar.getInstance()<br>LoggerFactory.getLogger()<br>是简单工厂同时也是单例模式。<br>单例：<br>ServletContext、ServletConfig、ApplicationContext DBPool</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式  原型</title>
      <link href="/design-pattern/5-Prototype/"/>
      <url>/design-pattern/5-Prototype/</url>
      <content type="html"><![CDATA[<a id="more"></a><h2 id="1-、定义"><a href="#1-、定义" class="headerlink" title="1)、定义"></a>1)、定义</h2><p>原型模式（Prototype Pattern）是指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br>属于创建型模式。</p><h2 id="2-、适用场景"><a href="#2-、适用场景" class="headerlink" title="2)、适用场景"></a>2)、适用场景</h2><p>1、类初始化消耗资源较多。<br>2、new产生的一个对象需要非常繁琐的过程（数据准备、访问权限等）<br>3、构造函数比较复杂。<br>4、循环体中生产大量对象时，可读性下降。  </p><h2 id="2-、常见写法"><a href="#2-、常见写法" class="headerlink" title="2)、常见写法"></a>2)、常见写法</h2><h3 id="1-、饿汉式单例"><a href="#1-、饿汉式单例" class="headerlink" title="(1)、饿汉式单例"></a>(1)、饿汉式单例</h3><p>饿汉模式在类被初始化时就已经在内存中创建了对象，<font color="red">以空间换时间，故不存在线程安全问题。</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//先静态、后动态</span></span><br><span class="line">    <span class="comment">//先属性、后方法</span></span><br><span class="line">    <span class="comment">//先上后下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton hungrySingleton = <span class="keyword">new</span> HungrySingleton(); <span class="comment">//有final，防止别处修改值。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  hungrySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-、懒汉式单例"><a href="#2-、懒汉式单例" class="headerlink" title="(2)、懒汉式单例"></a>(2)、懒汉式单例</h3><p>被外部类调用时才创建实例</p><h4 id="1、懒汉式"><a href="#1、懒汉式" class="headerlink" title="1、懒汉式"></a>1、懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySimpleSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySimpleSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//静态块，公共内存区域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySimpleSingleton lazy = <span class="keyword">null</span>;   <span class="comment">//没final，在全局访问点赋值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazySimpleSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazy = <span class="keyword">new</span> LazySimpleSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExectorThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LazySimpleSingleton singleton = LazySimpleSingleton.getInstance();</span><br><span class="line"><span class="comment">//        ThreadLocalSingleton singleton = ThreadLocalSingleton.getInstance();</span></span><br><span class="line"><span class="comment">//        LazyDoubleCheckSingleton singleton = LazyDoubleCheckSingleton.getInstance();</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + singleton);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySimpleSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ExectorThread());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        System.out.println(<span class="string">"End"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用<code>synchronized</code>加锁，在线程数量比较多情况下，大批量线程会出现阻塞，从而导致程序运行性能大幅下降。<br>既兼顾线程安全又提升程序性能的方式：</p><h4 id="2、双重检查锁的单例模式："><a href="#2、双重检查锁的单例模式：" class="headerlink" title="2、双重检查锁的单例模式："></a>2、双重检查锁的单例模式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDoubleCheckSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyDoubleCheckSingleton lazy = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyDoubleCheckSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyDoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyDoubleCheckSingleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazy = <span class="keyword">new</span> LazyDoubleCheckSingleton(); <span class="comment">//1.分配内存给这个对象。2.初始化对象。3.设置lazy指向刚分配的内存地址。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行双重检查是因为，如果多个线程同时了通过了第一次检查，并且其中一个线程首先通过了第二次检查并实例化了对象，那么剩余通过了第一次检查的线程就不会再去实例化对象。这样，除了初始化的时候会出现加锁的情况，后续的所有调用都会避免加锁而直接返回，解决了性能消耗的问题。<br>不加volatile的隐患：<br>有些编译器为了性能的原因，可能会将第二步和第三步进行重排序，访问到的是一个初始化未完成的对象。<br>为了解决上述问题，需要在lazy前加入关键字volatile。使用了volatile关键字后，重排序被禁止，所有的写（write）操作都将发生在读（read）操作之前。</p><h4 id="3、内部类的单例模式："><a href="#3、内部类的单例模式：" class="headerlink" title="3、内部类的单例模式："></a>3、内部类的单例模式：</h4><p>懒加载。线程安全。<br>加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyInnerClassSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyInnerClassSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LazyHolder.LAZY != <span class="keyword">null</span>)&#123;  <span class="comment">//为了防止暴力初始化，此处需要判断。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不允许创建多个实例"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static 是为了使单例的空间共享。final保证这个方法不会被重写，重载。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LazyInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//在返回结果以前，一定会先加载内部类</span></span><br><span class="line">        <span class="keyword">return</span> LazyHolder.LAZY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认不加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LazyInnerClassSingleton LAZY = <span class="keyword">new</span> LazyInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>暴力初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyInnerClassSingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class&lt;?&gt; clazz = LazyInnerClassSingleton.class;</span><br><span class="line">            Constructor c = clazz.getDeclaredConstructor(<span class="keyword">null</span>); <span class="comment">//通过反射拿到私有的构造方法</span></span><br><span class="line">            c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object o1 = c.newInstance(); <span class="comment">//暴力初始化</span></span><br><span class="line">            Object o2 = c.newInstance(); <span class="comment">//调用了两次构造方法，相当于new了两次</span></span><br><span class="line">            System.out.println(o1 == o2);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-、注册式单例"><a href="#3-、注册式单例" class="headerlink" title="(3)、注册式单例"></a>(3)、注册式单例</h3><h3 id="4-、ThreadLocal单例"><a href="#4-、ThreadLocal单例" class="headerlink" title="(4)、ThreadLocal单例"></a>(4)、ThreadLocal单例</h3><h2 id="3-、优点"><a href="#3-、优点" class="headerlink" title="3)、优点"></a>3)、优点</h2><h2 id="4-、缺点"><a href="#4-、缺点" class="headerlink" title="4)、缺点"></a>4)、缺点</h2><h2 id="4-、案例"><a href="#4-、案例" class="headerlink" title="4)、案例"></a>4)、案例</h2><p>Calandar.getInstance()<br>LoggerFactory.getLogger()<br>是简单工厂同时也是单例模式。<br>单例：<br>ServletContext、ServletConfig、ApplicationContext DBPool</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm介绍与入门</title>
      <link href="/jvm/1-jvm/"/>
      <url>/jvm/1-jvm/</url>
      <content type="html"><![CDATA[<a id="more"></a><h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1>]]></content>
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL索引机制</title>
      <link href="/mysql/2-mysql-B+Tree/"/>
      <url>/mysql/2-mysql-B+Tree/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/mysql/2-mysql-B+Tree/">https://lilyssh.cn/mysql/2-mysql-B+Tree/</a></p><p>正确的创建合适的索引是提升数据库查询性能的基础。<br><a id="more"></a></p><h1 id="一、索引是什么？"><a href="#一、索引是什么？" class="headerlink" title="一、索引是什么？"></a>一、索引是什么？</h1><p>索引是为了加速对表中数据行的检索而创建的一种分散存储的数据结构。</p><h1 id="二、为什么要使用索引？"><a href="#二、为什么要使用索引？" class="headerlink" title="二、为什么要使用索引？"></a>二、为什么要使用索引？</h1><ol><li>索引能极大的减少存储引擎需要扫描的数据量。</li><li>索引可以把随机IO变成顺序IO。</li><li><p>索引可以帮助我们在进行分组、排序等操作时，避免使用临时表。</p><h1 id="三、索引谁实现的"><a href="#三、索引谁实现的" class="headerlink" title="三、索引谁实现的"></a>三、索引谁实现的</h1><p>MySQL结构体系：<br><img src="https://resource.lilyssh.cn/pic/mysql_architecture.png" alt><br>Indexes是第三方公司提供的可插拔的插件式存储引擎。</p><h1 id="三、为什么选择B-Tree？"><a href="#三、为什么选择B-Tree？" class="headerlink" title="三、为什么选择B+Tree？"></a>三、为什么选择B+Tree？</h1><p>Data Structure Visualizations：<br><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p><p>(1)（相对）平衡二叉树<br>它的左右两个子树的高度差的绝对值不超过1。<br><img src="https://resource.lilyssh.cn/pic/balenced_binary_search_tree.png" alt></p></li></ol><p>缺点：<br>1）太深<br>数据处的高/深度决定着他的IO操作次数， IO操作耗时大。</p><p>2）太小<br>每一个磁盘块（节点/页）保存的数据量太小了。</p><p>（2）多路平衡查找树 B-Tree<br><img src="https://resource.lilyssh.cn/pic/B-Tree.png" alt></p><p>（3）加强版多路平衡查找树 B+Tree<br><img src="https://resource.lilyssh.cn/pic/B+Tree.png" alt><br> 支节点只保存索引列关键字，不保存数据，只有叶子节点才保存数据。</p><h2 id="B-Tree与B-Tree的区别："><a href="#B-Tree与B-Tree的区别：" class="headerlink" title="B+Tree与B-Tree的区别："></a>B+Tree与B-Tree的区别：</h2><p>1、B+节点关键字搜索采用闭合区间。（MYSQL推崇使用ID作为索引，由于ID是自增的数字类型，只会增大，所以采用向右拓展的一个方式。）<br>2、B+非叶节点不保存数据相关信息， 只保存关键字和子节点的引用。<br>3、B+关键字对应的数据保存在叶子节点中。<br>4、B+叶子节点是顺序排列的， 并且相邻节点具有顺序引用的关系。</p><h2 id="为什么选择B-Tree？"><a href="#为什么选择B-Tree？" class="headerlink" title="为什么选择B+Tree？"></a>为什么选择B+Tree？</h2><p>B+树是B-树的变种（ PLUS版） 多路绝对平衡查找树， 他拥有B-树的优势。<br>B+树扫库、 表能力更强。<br>B+树的磁盘读写能力更强。<br>B+树的排序能力更强。<br>B+树的查询效率更加稳定。</p><h1 id="四、B-Tree在两大引擎中如何体现"><a href="#四、B-Tree在两大引擎中如何体现" class="headerlink" title="四、B+Tree在两大引擎中如何体现"></a>四、B+Tree在两大引擎中如何体现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;datadir&apos;;</span><br></pre></td></tr></table></figure><p>可到数据存储位置。</p><h2 id="MyIsam："><a href="#MyIsam：" class="headerlink" title="MyIsam："></a>MyIsam：</h2><p>索引和数据分别存储。表定义存在.frm文件中（每个存储引擎都会有）。表中数据存在.MYD文件中。索引存在.MYI文件中。<br><img src="https://resource.lilyssh.cn/pic/MyIsam_index.png" alt><br>多个索引：<br><img src="https://resource.lilyssh.cn/pic/MyIsam_multi-column_index.png" alt><br>每个索引都存有每条数据的地址，一旦有变，维护起来比较耗时。</p><h2 id="InnoDB："><a href="#InnoDB：" class="headerlink" title="InnoDB："></a>InnoDB：</h2><p><img src="https://resource.lilyssh.cn/pic/InnoDB_index.png" alt><br>数据就存在索引的叶子节点中。<br>辅助索引：<br><img src="https://resource.lilyssh.cn/pic/InnoDB_auxiliary_index.png" alt><br>其他索引存主键，再从主键索引中找数据。</p><h1 id="五、补充"><a href="#五、补充" class="headerlink" title="五、补充"></a>五、补充</h1><h2 id="联合索引列选择原则"><a href="#联合索引列选择原则" class="headerlink" title="联合索引列选择原则"></a>联合索引列选择原则</h2><p>1、经常用的列优先 【 最左匹配原则】<br>2、选择性（ 离散度） 高的列优先【 离散度高原则】（列的离散性越高，选择性就越好。）<br>3、宽度小的列优先【 最少空间原则】</p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>如果查询列可通过索引节点中的关键字直接返回， 则该索引称之为覆盖索引。<br>覆盖索引可减少数据库IO， 将随机IO变为顺序IO， 可提高查询性能。</p><p>比如创建索引：create index idx_name_phoneNum on users(name,phoneNum);<br>查询语句：select name,phoneNum from user where name=?<br>可直接从索引树中返回关键字，不会再去查数据内容。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>（1）索引列的数据长度能少则少。<br>（2）索引一定不是越多越好， 越全越好， 一定是建合适的。<br>（3）匹配列前缀可用到索引 like 9999%， like %9999%、 like %9999用不到索引。<br>like 9999%得看情况，如果索引列离散性高，就能用到索引，离散性低，就用不到索引。<br>（4）Where 条件中 not in 和 &lt;&gt;操作无法使用索引。<br>（5）匹配范围值， order by 也可用到索引。<br>（6）多用指定列查询， 只返回自己想到的数据列， 少用select *。<br>（7）联合索引中如果不是按照索引最左列开始查找， 无法使用索引。在执行常量等值查询时，改变索引列的顺序并不会更改explain的执行结果，因为mysql底层优化器会进行优化，但是推荐按照索引顺序列编写sql语句。<br>（8）联合索引中精确匹配最左前列并范围匹配另外一列可以用到索引。(索引列为name,age的话，name=’zhangsan’ and age&gt;20)<br>（9）联合索引中如果查询中有某个列的范围查询， 则其右边的所有列都无法使用索引。(索引列为age,name的话，age&gt;20 and name=’zhangsan’)</p><p>通俗理解口诀：<br>   全值匹配我最爱，最左前缀要遵守；<br>   带头大哥不能死，中间兄弟不能断；<br>   索引列上少计算，范围之后全失效；<br>   LIKE百分写最右，覆盖索引不写星；<br>   不等空值还有or，索引失效要少用。</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL执行计划</title>
      <link href="/mysql/3-mysql-explain-plan/"/>
      <url>/mysql/3-mysql-explain-plan/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/mysql/3-mysql-explain-plan/">https://lilyssh.cn/mysql/3-mysql-explain-plan/</a></p><p>查询执行流程分析<br>执行计划详解<br>存储引擎介绍</p><a id="more"></a><p>#一、理解mysql体系结构<br>MySQL结构体系：<br><img src="https://resource.lilyssh.cn/pic/mysql_architecture.png" alt></p><p>Client Connectors<br>接入方 支持协议很多<br>Management Serveices &amp; Utilities<br>系统管理和控制工具， mysqldump、 mysql复制集群、 分区管理等<br>Connection Pool<br>连接池： 管理缓冲用户连接、 用户名、 密码、 权限校验、 线程处理等需要缓存的需求<br>SQL Interface<br>SQL接口： 接受用户的SQL命令， 并且返回用户需要查询的结果<br>Parser<br>解析器， SQL命令传递到解析器的时候会被解析器验证和解析。 解析器是由Lex和YACC实现的<br>Optimizer<br>查询优化器， SQL语句在查询之前会使用查询优化器对查询进行优化<br>Cache和Buffer（高速缓存区）<br>查询缓存， 如果查询缓存有命中的查询结果， 查询语句就可以直接去查询缓存中取数据<br>pluggable storage Engines<br>插件式存储引擎。 存储引擎是MySql中具体的与文件打交道的子系统<br>file system<br>文件系统， 数据、 日志（redo， undo） 、 索引、 错误日志、 查询记录、 慢查询等</p><p>#二、查询执行路径<br><img src="https://resource.lilyssh.cn/pic/mysql_execute_path.png" alt></p><h2 id="1，mysql-客户端-服务端通信"><a href="#1，mysql-客户端-服务端通信" class="headerlink" title="1，mysql 客户端/服务端通信"></a>1，mysql 客户端/服务端通信</h2><p>mysql客户端与服务端的通信方式是“半双工” ；</p><p>全双工： 双向通信， 发送同时也可以接收。（打电话）<br>半双工： 双向通信， 同时只能接收或者是发送， 无法同时做操作。（对讲机）<br>单工： 只能单一方向传送。（听广播）</p><p>半双工通信 特点和限制：<br>客户端一旦开始发送消息， 另一端要接收完整个消息才能响应。<br>客户端一旦开始接收数据没法停下来发送指令。</p><p>对于一个mysql连接， 或者说一个线程， 时刻都有一个状态来标识这个连接正在做什么<br>查看命令 show full processlist / show processlist<br><a href="https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html</a> (状态全集)<br>Sleep<br>线程正在等待客户端发送数据<br>Query<br>连接线程正在执行查询<br>Locked<br>线程正在等待表锁的释放<br>Sorting result<br>线程正在对结果进行排序<br>Sending data<br>向请求端返回数据<br>可通过kill {id}的方式进行连接的杀掉</p><h2 id="2，查询缓存"><a href="#2，查询缓存" class="headerlink" title="2，查询缓存"></a>2，查询缓存</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>缓存SELECT操作的结果集和SQL语句；<br>新的SELECT语句， 先去查询缓存， 判断是否存在可用的记录集；</p><h3 id="判断标准"><a href="#判断标准" class="headerlink" title="判断标准"></a>判断标准</h3><p>与缓存的SQL语句， 是否完全一样， 区分大小写。<br>(简单认为存储了一个key-value结构， key为sql， value为sql查询结果集)</p><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;query_cache%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/mysql_query_cache.png" alt><br>query_cache_type<br>值：0 -– 不启用查询缓存， 默认值；<br>值：1 -– 启用查询缓存， 只要符合查询缓存的要求， 客户端的查询语句和记录集<br>都可以缓存起来， 供其他客户端使用， 加上 SQL_NO_CACHE将不缓存<br>值：2 -– 启用查询缓存， 只要查询语句中添加了参数： SQL_CACHE， 且符合查询<br>缓存的要求， 客户端的查询语句和记录集， 则可以缓存起来， 供其他客户端使用<br>query_cache_size<br>允许设置query_cache_size的值最小为40K， 默认1M， 推荐设置 为： 64M/128M；<br>query_cache_limit<br>限制查询缓存区最大能缓存的查询记录集， 默认设置为1M<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &apos;Qcache%&apos;;</span><br></pre></td></tr></table></figure></p><p>查看缓存情况<br><img src="https://resource.lilyssh.cn/pic/mysql_Qcache.png" alt></p><p>select sql_no_cache * from user where id = 1; 就不会使用缓存。</p><h3 id="不会缓存的情况："><a href="#不会缓存的情况：" class="headerlink" title="不会缓存的情况："></a>不会缓存的情况：</h3><p>1.当查询语句中有一些不确定的数据时， 则不会被缓存。 如包含函数NOW()，<br>CURRENT_DATE()等类似的函数， 或者用户自定义的函数， 存储函数， 用户变<br>量等都不会被缓存。<br>2.当查询的结果大于query_cache_limit设置的值时， 结果不会被缓存。<br>3.对于InnoDB引擎来说， 当一个语句在事务中修改了某个表， 那么在这个事务<br>提交之前， 所有与这个表相关的查询都无法被缓存。 因此长时间执行事务，<br>会大大降低缓存命中率。<br>4， 查询的表是系统表。<br>5， 查询语句不涉及到表。</p><h3 id="为什么mysql默认关闭了缓存开启？"><a href="#为什么mysql默认关闭了缓存开启？" class="headerlink" title="为什么mysql默认关闭了缓存开启？"></a>为什么mysql默认关闭了缓存开启？</h3><p>1.在查询之前必须先检查是否命中缓存,浪费计算资源。<br>2.如果这个查询可以被缓存， 那么执行完成后， MySQL发现查询缓存中没有这个查询， 则会将结果存入查询缓存， 这会带来额外的系统消耗。<br>3.针对表进行写入或更新数据时， 将对应表的所有缓存都设置失效。<br>4.如果查询缓存很大或者碎片很多时， 这个操作可能带来很大的系统消耗。</p><h3 id="查询缓存-适用场景"><a href="#查询缓存-适用场景" class="headerlink" title="查询缓存 适用场景"></a>查询缓存 适用场景</h3><p>以读为主的业务， 数据生成之后就不常改变的业务，比如门户类、 新闻类、 报表类、 论坛类等。</p><h2 id="3，查询优化处理"><a href="#3，查询优化处理" class="headerlink" title="3，查询优化处理"></a>3，查询优化处理</h2><h3 id="查询优化处理的三个阶段："><a href="#查询优化处理的三个阶段：" class="headerlink" title="查询优化处理的三个阶段："></a>查询优化处理的三个阶段：</h3><p>• 解析sql<br>通过lex词法分析,yacc语法分析将sql语句解析成解析树<br><a href="https://www.ibm.com/developerworks/cn/linux/sdk/lex/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/sdk/lex/</a><br>• 预处理阶段<br>根据mysql的语法的规则进一步检查解析树的合法性， 如： 检查数据的表<br>和列是否存在， 解析名字和别名的设置。 还会进行权限的验证<br>• 查询优化器<br>优化器的主要作用就是找到最优的执行计划</p><h2 id="4，查询执行引擎"><a href="#4，查询执行引擎" class="headerlink" title="4，查询执行引擎"></a>4，查询执行引擎</h2><h2 id="5，返回客户端"><a href="#5，返回客户端" class="headerlink" title="5，返回客户端"></a>5，返回客户端</h2><p>#三、各大存储引擎介绍</p><h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><p>数据存储以CSV文件</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>不能定义没有索引、 列定义必须为NOT NULL、 不能设置自增列<br>–&gt;不适用大表或者数据的在线处理<br>CSV数据的存储用,隔开， 可直接编辑CSV文件进行数据的编排<br>–&gt;数据安全性低<br>注： 编辑之后， 要生效使用flush table XXX 命令</p><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>数据的快速导出导入。<br>表格直接转换成CSV。</p><h2 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h2><p>压缩协议进行数据的存储。数据存储为ARZ文件格式。</p><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><p>只支持insert和select两种操作。<br>只允许自增ID列建立索引。<br>行级锁。<br>不支持事务。<br>数据占用磁盘少。</p><h3 id="应用场景：-1"><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h3><p>日志系统。<br>大量的设备数据采集。</p><h2 id="Memory-heap"><a href="#Memory-heap" class="headerlink" title="Memory/heap"></a>Memory/heap</h2><p>数据都是存储在内存中， IO效率要比其他引擎高很多。服务重启数据丢失。内存数据表默认只有16M。</p><h3 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h3><p>支持hash索引，B tree索引，默认hash（查找复杂度0(1)）。<br>字段长度都是固定长度varchar(32)=char(32)。<br>不支持大数据存储类型字段如 blog，text。<br>表级锁</p><h3 id="应用场景：-2"><a href="#应用场景：-2" class="headerlink" title="应用场景："></a>应用场景：</h3><p>等值查找热度较高数据。<br>查询结果内存中的计算， 大多数都是采用这种存储引擎。<br>作为临时表存储需计算的数据。</p><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p>Mysql5.5版本之前的默认存储引擎<br>较多的系统表也还是使用这个存储引擎<br>系统临时表也会用到Myisam存储引擎</p><h3 id="特点：-3"><a href="#特点：-3" class="headerlink" title="特点："></a>特点：</h3><p>a，select count(*) from table 无需进行数据的扫描<br>b，数据（MYD） 和索引（MYI） 分开存储<br>c，表级锁<br>d，不支持事务</p><h2 id="InnoDB："><a href="#InnoDB：" class="headerlink" title="InnoDB："></a>InnoDB：</h2><p>Mysql5.5及以后版本的默认存储引擎</p><h3 id="特点：-4"><a href="#特点：-4" class="headerlink" title="特点："></a>特点：</h3><p>支持事务<br>支持行级锁<br>聚集索引（主键索引） 方式进行数据存储<br>支持外键关系保证数据完整性</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kafka原理</title>
      <link href="/architecture/13-kafka/"/>
      <url>/architecture/13-kafka/</url>
      <content type="html"><![CDATA[<p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a> 2.0.0。<br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>分布式的消息和订阅系统，高性能、高吞吐量。<br>内置分区（对数据做分片处理）、实现集群、有容错能力和数据复制能力。</p><h1 id="二、产生背景"><a href="#二、产生背景" class="headerlink" title="二、产生背景"></a>二、产生背景</h1><p>领英要对用户的行为进行统计。</p><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><p>行为跟踪：收集用户的操作行为。可以根据爱好做推送。<br>日志收集。</p><h1 id="四、术语"><a href="#四、术语" class="headerlink" title="四、术语"></a>四、术语</h1><ul><li>Topic<br>存储消息的逻辑概念。</li><li>Partition</li></ul><ol><li>每个topic可以划分多个分区。</li><li>相同topic下的不同分区的消息是不同的。如果是集群，分区会均分在集群机子上。<br><img src="https://resource.lilyssh.cn/pic/kafka-partition.png" alt><br>设置分区目的：减少消息容量，从而提升io性能。</li></ol><h1 id="五、架构"><a href="#五、架构" class="headerlink" title="五、架构"></a>五、架构</h1><p><img src="https://resource.lilyssh.cn/pic/kafka-architecture.png" alt><br>一个kafka集群会包含多个broker，它又依赖zookeeper的集群，去实现broker之间的master-slaver机制。<br>多个producer，多个consumer。<br>消费者去broker里pull消息的。而mq是主动推送给消费者。</p><h1 id="六、消息的同步发送和异步发送"><a href="#六、消息的同步发送和异步发送" class="headerlink" title="六、消息的同步发送和异步发送"></a>六、消息的同步发送和异步发送</h1><ul><li>异步发送：<br>kafka1.0以后，默认的client使用的都是异步发送消息。消息通过kafka producer发送后，这个消息放到了后台一个消息队列里，然后通过一个线程不断的从队列里取出消息进行发送。消息发送成功后，会进行一个callback回调。</li><li>同步发送：<br>通过future和get。get方法是个阻塞。同步去获得结果。</li></ul><h1 id="七、消息分发策略"><a href="#七、消息分发策略" class="headerlink" title="七、消息分发策略"></a>七、消息分发策略</h1><p>消息由key和value组成，key是可选项，producer会根据key和partition机制来判断当前这条消息应该放到哪个partition里面。默认算法是哈希取模。如果key为null，则随机分配，根据metadata.max.age.ms来，十分钟更新一次。<br>分区分配策略：</p><ul><li>Range（范围） -&gt; 默认<br>针对于同一个topic中的多个partition而言的。首先会对这个topic中的partition进行排序，然后 partition数量除以consumer数量，加入有0-9个partition，3个consumer，那consumer1会消费前4个分区。如果是多个topic，那每次多消费的都是第一个。</li><li>轮询Round-Robin<br>把所有的partition和consumer数量列出来，然后按照hashcode进行排序，通过轮询算法分配partition和consumer。</li></ul><p>也可以自定义分发规则，implements Partitioner。</p><p>什么时候会触发rebalance ？<br>1、对于同一个consumer group，新增consumer<br>2、consumer离开<br>3、consumer取消订阅<br>4、topic中新增分区</p><p>谁来执行rebalance，以及管理consumer group？<br>coordinator</p><h1 id="八、消息的存储策略"><a href="#八、消息的存储策略" class="headerlink" title="八、消息的存储策略"></a>八、消息的存储策略</h1><ul><li>消息保存的路径<br>默认tmp，也可以自定义。</li><li>消息的写入性能<br>顺序写入<br>零拷贝</li><li>消息的存储机制<br>日志分段，方便清理和压缩。根据时间（默认保留7天）或者 大小，满足其中之一，就会被清理掉。<br><img src="https://resource.lilyssh.cn/pic/kafka-segment.png" alt><br><img src="https://resource.lilyssh.cn/pic/kafka-consume-msg.png" alt></li></ul><h1 id="九、Partition副本机制"><a href="#九、Partition副本机制" class="headerlink" title="九、Partition副本机制"></a>九、Partition副本机制</h1><p>分区是对数据内容的分片，每个分区里的内容不一样，当一个分区不可用时，有一部分消息就没办法消费。所以为了提高分区的可用性，去实现冗余的备份，就是副本。如果有多个副本，一定会有个leader副本和follower副本。命令中通过<code>--replication-factor</code>参数去设置。<br>第i个分区的第j个副本，会落在 第 (i+j)% broker counts 个broker上。<br>查看分区状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /brokers/topics/topic_name/partitions/partition_num/state</span><br></pre></td></tr></table></figure></p><p>其中 isr维护的是当前分区，所有的副本集。follower的内容必须跟leader的在一定阈值范围内保持一致，如果不一致，就会被踢出去，直到follower的内容与leader内容保持在一定阈值范围内，follower才会被加进来。<br>leader副本 负责接收客户端的写入和读取请求。<br>follower副本 负责从leader副本中读取数据。</p><h1 id="十、消息消费原理"><a href="#十、消息消费原理" class="headerlink" title="十、消息消费原理"></a>十、消息消费原理</h1><p>consumer可以指定消费哪个partition。如果不指定，会按照一定的策略进行负载，比如三个consumer、三个partition，就一个consumer消费一个partition。如果consumer数量小于partition数量，则有的consumer会多消费一些partition。如果consumer数量大于partition数量，则有的consumer会消费不到消息，会造成一定的浪费，所以不建议设置太多的consumer。因为在一个partition上是不允许并发的。consumer的数量最好是partition数量的整数倍。如果consumer从多个partition上读到消息，是不保证顺序的。<br><img src="https://resource.lilyssh.cn/pic/kafka-broker.png" alt></p><h1 id="十、集群"><a href="#十、集群" class="headerlink" title="十、集群"></a>十、集群</h1><p>集群的构建是基于zookeeper的。<br>修改config/server.properties中三个地方：</p><ol><li>zookeeper的地址，</li><li>broker.id（在kafka集群中必须是唯一的）。</li><li>listeners，是为了各个节点互相通信，所以需要写各个节点自己的ip。</li></ol><p>启动集群各节点kafka后，会看到zookeeper上多了几个节点。<br>启动zookeeper客户端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zookeeper-3.5.4-beta/bin/zkCli.sh</span><br></pre></td></tr></table></figure></p><p>查看所有kafka集群节点的id：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /brokers/ids</span><br></pre></td></tr></table></figure></p><p>查看kafka主节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /controller</span><br></pre></td></tr></table></figure></p><p>写请求会进入master节点，读请求进入其他节点。<br>选举规则：最小的节点，也就是最早注册的节点是leader。</p><h1 id="十二、使用api"><a href="#十二、使用api" class="headerlink" title="十二、使用api"></a>十二、使用api</h1><ol><li><p>引入kafka依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>消息发送端<br>(1) 设置kafka配置信息(集群地址、序列化)，创建KafkaProducer。<br>可设置参数如：</p></li></ol><ul><li><p>ProducerConfig.ACKS_CONFIG，<br>0：消息发送给broker以后，不需要确认（性能较高，但是数据会丢失）。<br>1：只需要获得kafka集群中leader节点的确认，即可返回。<br>all(-1)：需要集群中的所有节点确认。（最安全，性能最低的）</p></li><li><p>batch.size(默认16kb)<br>producer对于同一个分区来说，会按照batch.size的大小进行统一收集后，批量发送。</p></li><li><p>linger.ms<br>按时间间隔，进行统一收集后，批量发送。<br>如果都设置了，满足其中任意一个条件，消息就会立马发送。<br>为了解决大量的小数据包频繁的发送，这个问题。</p></li><li><p>max.request.size(默认1M)<br>控制请求的大小</p></li></ul><p>(2) 通过send方法发送消息，入参为ProducerRecord(topic,message)。</p><ol start="3"><li>消息接受端<br>(1) 设置kafka配置信息(集群地址、序列化)，创建KafkaConsumer。<br>不同的组，只要订阅了，每个组都可以获取消息。<br>同一个组内的消费者们，只能有一个消费者能获取到消息，其他成员不会获取到。<br>可设置参数如：</li></ol><ul><li>AUTO_OFFSET_RESET_CONFIG：<br>earliest：对于新的group id来说，它会从最早的消息开始消费。对于已经消费过消息的group id来说，它还是会从已经消费过的最大的offset里去取。<br>latest：对于新的group_id来说，直接从已经消费过并且提交的最大的偏移量开始取。<br><img src="https://resource.lilyssh.cn/pic/kafka-group.png" alt><ul><li>ENABLE_AUTO_COMMIT_CONFIG:自动提交</li><li>AUTO_COMMIT_INTERVAL_MS_CONFIG：自动提交的间隔毫秒<br>就是说每xx毫秒，对这个时间段内的所有消息，进行提交确认。<br>消息消费完以后，要进行提交确认。如果设置为false的话，消费一次后，还允许再次消费。设置为true，则消费一次后，不会被再次消费到。</li><li>MAX_POLL_RECORDS_CONFIG：每一次调用poll，获取到的消息数。这样可以根据消费端的处理性能，来预设一个数量，减少poll的次数，提升性能。</li></ul></li></ul><p>(2) 通过subscribe方法订阅消息。</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> 测试 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cypherium Java smart contract programming guide</title>
      <link href="/blockchain/cypherium-java-smart-contract-programming-guide/"/>
      <url>/blockchain/cypherium-java-smart-contract-programming-guide/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911309" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911309</a>  </p><p>代币就是数字货币，比特币、以太币就是一个代币。利用Cypherium的java智能合约可以轻松编写出属于自己的代币。这些代币是建立在区块链之上，代表你拥有并可转让给其他人的数字资产。现在我们就来看看怎样创建一个这样的代币。</p><h1 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h1><ol><li>下载示例代码。<a href="https://github.com/cypherium/ContractExample" target="_blank" rel="noopener">https://github.com/cypherium/ContractExample</a><br>目录结构介绍：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">├── client              //客户端</span><br><span class="line">│   ├── cypher          //可执行文件cypher</span><br><span class="line">│   ├── jdk             //Java Development Kit</span><br><span class="line">│   ├── genesis.json    //初始化创世区块所需文件</span><br><span class="line">│   ├── db              //自定义数据库目录</span><br><span class="line">│   └── executable_file //可执行文件</span><br><span class="line">│       ├── Linux       //Linux版本</span><br><span class="line">│       │    └── cypher</span><br><span class="line">│       ├── Mac         //Mac版本</span><br><span class="line">│       │    └── cypher</span><br><span class="line">│       └── Windows     //Windows版本</span><br><span class="line">│            └── cypher</span><br><span class="line">├── file2str            //class文件生成二进制字符串工具</span><br><span class="line">│   ├── file2str.go     //go源码</span><br><span class="line">│   ├── Linux           //Linux版本</span><br><span class="line">│   │   └── file2str</span><br><span class="line">│   ├── Mac             //Mac版本</span><br><span class="line">│   │   └── file2str</span><br><span class="line">│   └── Windows         //Windows版本</span><br><span class="line">│       └── file2str.exe</span><br><span class="line">└── src</span><br><span class="line">    ├── HelloWorld.java //Java智能合约</span><br><span class="line">    ├── index.html      //合约部署页面</span><br><span class="line">    └── web3.js</span><br></pre></td></tr></table></figure></li></ol><p>接下来的操作步骤，默认在<code>ContractExample/client</code>目录执行。<br>请根据操作系统，把合适的可执行文件cypher，复制到client下，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp executable_file/Mac/cypher ./</span><br></pre></td></tr></table></figure></p><ol start="2"><li>初始化节点的创世区块。datadir为自行指定的数据库目录，如db。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cypher --datadir db init genesis.json</span><br></pre></td></tr></table></figure><ol start="3"><li>启动节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir db --networkid 123666 --port 7000 --rpcport 8000  --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0</span><br></pre></td></tr></table></figure><ol start="4"><li>启动节点的js交互窗口(用上一步成的ipc文件)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cypher attach db/cypher.ipc</span><br></pre></td></tr></table></figure><ol start="5"><li>创建账户。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(&quot;your password&quot;)</span><br></pre></td></tr></table></figure><ol start="6"><li>请联系我们，给您的测试账户中，转入一些可供测试的代币。邮箱地址：xxx</li><li>查看您的账户余额。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cph.getBalance(&quot;your account address&quot;)</span><br></pre></td></tr></table></figure><ol start="8"><li>您可以通过以下方法，把您账户中的资金转给其他账户。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cph.sendTransaction(from,to,value,gas,gasPrice,data,nonce,Function)</span><br></pre></td></tr></table></figure><ul><li>from: String - 指定的发送者的地址。  </li><li>to: String - （可选）交易消息的目标地址，如果是合约创建，则不填。  </li><li>value: Number|String|BigNumber - （可选）交易携带的货币量，以wei为单位。如果合约创建交易，则为初始的基金。  </li><li>gas: Number|String|BigNumber - （可选）默认是自动，交易可使用的gas，未使用的gas会退回。  </li><li>gasPrice: Number|String|BigNumber - （可选）默认是自动确定，交易的gas价格，默认是网络gas价格的平均值 。  </li><li>data: String - （可选）或者包含相关数据的字节字符串，如果是合约创建，则是初始化要用到的代码。 </li><li>nonce: Number - （可选）整数，使用此值，可以允许你覆盖你自己的相同nonce的，正在pending中的交易。</li><li>Function - 回调函数，用于支持异步的方式执行。  </li></ul><ol start="9"><li>通过以下命令查看现在共识到第几个区块了。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cph.txBlockNumber</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>ERC20是以太坊定义的一个代币标准。要求我们在实现代币的时候必须要遵守的协议，如指定代币名称、总量、实现代币交易函数等，只有支持了协议才能被以太坊钱包支持。<br>Cypherium的代币标准接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.cypher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cypnet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置代币信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol 代币符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 代币名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalSupply 发行代币总量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _owner 合约拥有者账户地址，传""空时，代表默认为创建者账户地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">setTokenInfo</span><span class="params">(String symbol, String name, <span class="keyword">long</span> totalSupply, String _owner)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取合约创建者的账户地址。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> addressType can be "caller","self","owner" and other filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getAddress</span><span class="params">(String addressType)</span></span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看对应账号的代币余额。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _address</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">balanceOf</span><span class="params">(String _address)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改指定账户余额。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">changeBalance</span><span class="params">(String _from, <span class="keyword">long</span> _value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现代币交易</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(String _from, String _to, <span class="keyword">long</span> _value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置键值对。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">setState</span><span class="params">(String _key, String _value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过键获取值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getState</span><span class="params">(String _key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Create-contract"><a href="#Create-contract" class="headerlink" title="Create contract"></a>Create contract</h1><p>现在我们来开始编写第一个<a href="https://github.com/cypherium/ContractExample/blob/master/src/HelloWorld.java" target="_blank" rel="noopener">Java智能合约</a>，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.cypher.Cypnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> totalSupply = <span class="number">10000</span>;</span><br><span class="line">        <span class="comment">//我们创建一个 符号为Hello,名称为Hello world,发行总量为10000的代币。</span></span><br><span class="line">        Cypnet.setTokenInfo(<span class="string">"Hello"</span>, <span class="string">"Hello world"</span>, totalSupply, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">//把发行的代币全都给合约创建者</span></span><br><span class="line">        Cypnet.changeBalance(<span class="string">"caller"</span>, totalSupply);</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transfer</span><span class="params">(String _to, <span class="keyword">long</span> _value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = Cypnet.balanceOf(<span class="string">"caller"</span>);</span><br><span class="line">        <span class="keyword">if</span> (n &lt; _value) &#123;</span><br><span class="line">            <span class="comment">//throw new Exception("Insufficient balance");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Insufficient balance"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Cypnet.transfer(<span class="string">"caller"</span>, _to, _value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String skey)</span> </span>&#123;</span><br><span class="line">        String s = Cypnet.getState(skey);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">setValue</span><span class="params">(String skey, String sValue)</span> </span>&#123;</span><br><span class="line">        Cypnet.setState(skey, sValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单解释下，我们定义了一个名为HelloWorld的合约，main方法是Java应用程序的入口方法，导入Cypnet类。  </p><h1 id="Compile-contract"><a href="#Compile-contract" class="headerlink" title="Compile contract"></a>Compile contract</h1><ol><li>我们来把HelloWorld.java编译成字节码文件HelloWorld.class。编译命令如下： </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -cp jdk/classes ../src/HelloWorld.java</span><br></pre></td></tr></table></figure><ol start="2"><li>给<a href="https://github.com/cypherium/ContractExample/tree/master/file2str" target="_blank" rel="noopener">file2str</a>赋上权限。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 ../file2str</span><br></pre></td></tr></table></figure><p>3.根据操作系统，选择合适的<code>file2str</code>，将 HelloWorld.class文件转成16进制字符串的命令 file2str HelloWorld.class，如Mac版为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../file2str/Mac/file2str ../src/HelloWorld.class</span><br></pre></td></tr></table></figure><p>会看到生成的二进制字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xcafebabe00000036005a0a001a002d05000000000000271008002e08002f0800300a003100320800330a003100340800350800360a00310037090038003908003a0a003b003c0a0031003d0a0031003e08003f0a003100400800410800420a003b00430800440800450700460700470100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100046d61696e010016285b4c6a6176612f6c616e672f537472696e673b29560100087472616e73666572010027284c6a6176612f6c616e672f537472696e673b4a294c6a6176612f6c616e672f537472696e673b01000d537461636b4d61705461626c6501000867657456616c7565010026284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b01000873657456616c7565010038284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b01000967657456616c75653101001428294c6a6176612f6c616e672f537472696e673b01000967657456616c75653201000a536f7572636546696c6501000f48656c6c6f576f726c642e6a6176610c001b001c01000548656c6c6f01000b48656c6c6f20776f726c640100000700480c0049004a01000663616c6c65720c004b004c0100047465737401001048656c6c6f20776f726c6420746573740c004d004e07004f0c0050005101001448656c6c6f20776f726c6420436f6e74726163740700520c005300540c005500250c00560057010014496e73756666696369656e742062616c616e63650c00210058010004414141410100026f6b0c0053005901000973647364736473646401000331303001000a48656c6c6f576f726c640100106a6176612f6c616e672f4f626a6563740100136a617661782f6379706865722f4379706e657401000c736574546f6b656e496e666f01003a284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b4a4c6a6176612f6c616e672f537472696e673b295a01000d6368616e676542616c616e6365010016284c6a6176612f6c616e672f537472696e673b4a295a0100087365745374617465010027284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b295a0100106a6176612f6c616e672f53797374656d0100036f75740100154c6a6176612f696f2f5072696e7453747265616d3b0100136a6176612f696f2f5072696e7453747265616d0100077072696e746c6e010015284c6a6176612f6c616e672f537472696e673b2956010008676574537461746501000962616c616e63654f66010015284c6a6176612f6c616e672f537472696e673b294a010028284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b4a295a0100042849295600210019001a0000000000070001001b001c0001001d0000001d00010001000000052ab70001b100000001001e000000060001000000030009001f00200001001d00000068000500040000003414000240120412051f1206b800075712081fb8000957120a120bb8000c57b2000d120eb6000f120ab800104eb2000d2db6000fb100000001001e0000002200080000000500040008000f00090016000b001e000c0026000e002c000f003300100009002100220001001d0000007a00040006000000351208b80011370416041f949c00061212b012082a1fb8001357120ab800104eb2000d2db6000f1214b800104eb2000d2db6000f01b000000002001e0000002600090000001400070015000e0017001100190019001b001f001c0026001e002c001f003300210023000000070001fd001100040009002400250001001d0000002300010002000000072ab800104c2bb000000001001e0000000a000200000025000500260009002600270001001d0000002500020002000000092a2bb8000c571215b000000001001e0000000a0002000000290006002a0009002800290001001d0000004e0002000100000019033b1a112710a20010b2000d1ab60016840001a7ffef1217b000000002001e0000001600050000003e000200400009004100100042001600440023000000070002fc000201130009002a00290001001d0000001b00010000000000031218b000000001001e000000060001000000470001002b00000002002c</span><br></pre></td></tr></table></figure></p><ol start="4"><li>部署合约<br>我们需要用<code>Chrome</code>浏览器打开部署调用页面ContractExample/src/index.html<br>如下：<br><img src="https://resource.lilyssh.cn/pic/java_contract_init.png" alt></li></ol><p>如果使用的是其他浏览器，直接打开会有跨域请求问题，所以需要使用http-server来部署该页面,需要自行先安装node和npm，再安装http-server，请依次执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g </span><br><span class="line"></span><br><span class="line">pm i http-server</span><br><span class="line"></span><br><span class="line">yarn -g http-server</span><br></pre></td></tr></table></figure></p><p>进入到CypherTestNet/web3-cypher.js目录下，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure></p><p>用浏览器访问<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a>  把刚生成的二进制字符串粘到Java contract bytecode文本框。<br>在From Account账户有余额的情况下，点击Deploy按钮后，会把您的java合约部署到区块链中。并会弹出合约地址信息。<br><!-- <img src="https://resource.lilyssh.cn/pic/deploy_submitted.png" width="896" height="252" /> --><br><img src="https://resource.lilyssh.cn/pic/deploy_submitted.png" alt><br><img src="https://resource.lilyssh.cn/pic/contract_address.png" alt><br>点击Get contract info按钮获取区块链中的合约信息。<br><img src="https://resource.lilyssh.cn/pic/contract_info.png" alt><br>在文本框中输入转账金额，并点击Transfer按钮，付款方就会向收款方转账。<br><img src="https://resource.lilyssh.cn/pic/transfer.png" alt><br>点击From’s Balance按钮查看付款账户的余额。<br><img src="https://resource.lilyssh.cn/pic/from_balance.png" alt><br>点击To’s Balance按钮查看收款账户的余额。<br><img src="https://resource.lilyssh.cn/pic/to_balance.png" alt></p><h1 id="View-deploy-contract-page"><a href="#View-deploy-contract-page" class="headerlink" title="View deploy contract page"></a>View deploy contract page</h1><p>接下来，我们来看看部署调用页面的流程。  </p><ol><li>web3如何调用java方法<br>ABI全称Application Binary Interface, 是调用智能合约函数以及合约之间函数调用的消息编码格式定义,也可以理解为智能合约函数调用的接口说明. 类似Webservice里的SOAP协议一样；也就是定义操作函数签名，参数编码，返回结果编码等。使用ABI协议时必须要求在编译时知道类型,即强类型相关.</li></ol><p>如果想调用HelloWorld.java中的函数，需要把该函数追加到abi变量中，按照现有格式即可。比如说，我们想要调用HelloWorld.java中的getValue方法，就要把以下内容追加到abi变量中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var abi=</span><br><span class="line">...</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line">        &quot;constant&quot;:false,        //方法修饰符,false表示函数内可以修改状态变量</span><br><span class="line">        &quot;inputs&quot;:[               //方法入参，数组里的每个对象都是一个参数说明</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;:&quot;skey&quot;,   //第一个参数的名字</span><br><span class="line">                &quot;type&quot;:&quot;bytes32&quot; //第一个参数的类型</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;outputs&quot;:[              //方法返回值，数组里的每个对象都是一个参数说明</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;:&quot;value&quot;,  //第一个参数的名字</span><br><span class="line">                &quot;type&quot;:&quot;bytes32&quot; //第一个参数的类型</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;name&quot;:&quot;getValue&quot;,       //方法名</span><br><span class="line">        &quot;payable&quot;:false,</span><br><span class="line">        &quot;stateMutability&quot;:&quot;nonpayable&quot;,</span><br><span class="line">        &quot;type&quot;:&quot;function&quot;        //方法类型：function,constructor,fallback,event</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>uint<m>:M为integer类型代表M bits,0 &lt; M &lt;= 256, M % 8 == 0，如uint32，uint8,uint256。<br>int<m>:同上。同为从8到256位的无符号整数。<br>uint和int:整型，分别是uint256和int256的别名。这也是上面的例子中函数参数类型是uint，转sha3码时要变成uint256的原因。<br>address:地址，20个字节，160bits，一个Ethereum地址，地址的类型也可以有成员作为所有合约的base。<br>bool:布尔类型，1个字节，true：1，false:0。<br>bytes<m>:固定大小的字节数组，0&lt;M&lt;=32,byte都是bytes1的别名。<br>bytes:动态分配大小字节数组。不是一个值类型。<br>String:动态大小UTF8编码的字符串,不是一个值类型。<br>尽量少用string。  </m></m></m></p><ol start="2"><li>如何发布合约<br>web3.js对合约的操作进行了封装。发布合约时，可以使用web3.cph.contract的new方法。<br>部署过程中需要主要的是，new方法的回调会执行两次，第一次是合约的交易创建完成，第二次是在某个地址上完成部署。需要注意的是只有在部署完成后，才能进行方法该用，否则会报错TypeError: javaContract.add is not a function。</li></ol>]]></content>
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> Cypherium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cypherium&#39;s synchronous block test operation steps</title>
      <link href="/blockchain/cypherium-test-sync-block-en/"/>
      <url>/blockchain/cypherium-test-sync-block-en/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/">https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Cypherium’s synchronous block test operation steps.<br><a id="more"></a></p><ol><li><p>put cypherium_internal.pem in a directory,for example,~.</p></li><li><p><code>vim ~/.ssh/config</code> file.Add alias for the ssh remote connection.</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">    ServerAliveInterval 60</span><br><span class="line">Host 119</span><br><span class="line">    HostName 18.221.58.119</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile    ~/cypherium_internal.pem</span><br><span class="line">Host 200</span><br><span class="line">    HostName 18.216.16.200</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile    ~/cypherium_internal.pem</span><br></pre></td></tr></table></figure><ol start="3"><li><code>ssh 119</code>,connection AWS node 18.221.58.119.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-31-48:~$</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── genesis.json</span><br><span class="line">├── group.toml</span><br><span class="line">├── Cypherium</span><br><span class="line">│   ├── private.toml</span><br><span class="line">│   └── public.toml</span><br><span class="line">└── cypher_db</span><br><span class="line">    ├── cypher.ipc</span><br></pre></td></tr></table></figure><ol start="4"><li>clean  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><ol start="5"><li>Compile  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make cypher</span><br></pre></td></tr></table></figure><ol start="4"><li>Generate node information </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher setup</span><br></pre></td></tr></table></figure><p>You need to enter the ip: port,Use kyber’s Ed25519 algorithm to generate <code>public.toml</code> and <code>private.toml</code>.Save in the default path. Currently there is no ip discovery, so you need to manually splicing the public key <code>~/Library/Application\ Support/cypher/public.toml</code> (Mac default path) for simulation testing. The node name can be customized, such as node_01_name.<br><img src="https://resource.lilyssh.cn/pic/cypher%20setup_.png" alt></p><ol start="5"><li><p>同理，再生成第二个节点。</p></li><li><p>把第一、二个节点的public.toml，拼接到~/workspace/test/group.toml中。</p></li></ol><p><img src="https://resource.lilyssh.cn/pic/group.toml.png" alt></p><ol start="7"><li>初始化 两个节点的创世区块。  </li></ol><p>第一个节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_01/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>第二个节点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_02/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>genesis.json中内容可参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">        &quot;chainId&quot;: 123666,</span><br><span class="line">        &quot;homesteadBlock&quot;: 0,</span><br><span class="line">        &quot;eip155Block&quot;: 0,</span><br><span class="line">        &quot;eip158Block&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">  &quot;alloc&quot;      : &#123;&#125;,</span><br><span class="line">  &quot;coinbase&quot;   : &quot;0x0000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;difficulty&quot; : &quot;0x20000&quot;,</span><br><span class="line">  &quot;extraData&quot;  : &quot;&quot;,</span><br><span class="line">  &quot;gasLimit&quot;   : &quot;0x2fefd8&quot;,</span><br><span class="line">  &quot;nonce&quot;      : &quot;0x0000000000000042&quot;,</span><br><span class="line">  &quot;mixhash&quot;    : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;parentHash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;timestamp&quot;  : &quot;0x00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>启动第一个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_01/private.toml --datadir ~/workspace/test/node_01/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7010 --rpcport 8510 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_01/output2.log</span><br></pre></td></tr></table></figure><ol start="9"><li>启动第一个节点的js交互窗口(用上一步成的ipc文件)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_01/data/cypher.ipc</span><br></pre></td></tr></table></figure><ol start="10"><li>启动第二个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_02/private.toml --datadir ~/workspace/test/node_02/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7020 --rpcport 8520 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_02/output2.log</span><br></pre></td></tr></table></figure><ol start="11"><li>启动第二个节点的js交互窗口(用上一步成的ipc文件)。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_02/data/cypher.ipc</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/attach%20node_.jpg" alt></p><ol start="12"><li>从此步骤开始，都将在js交互涌窗口执行。查看第一个节点的信息。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.nodeInfo</span><br></pre></td></tr></table></figure><ol start="13"><li>在第二个节点中，创建用户，保存挖矿奖励。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(&quot;password&quot;)</span><br></pre></td></tr></table></figure><ol start="14"><li>在第二个节点中，加入第一个节点。就是把cnode中的内容粘进addPeer中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer(&quot;cnode&quot;)</span><br></pre></td></tr></table></figure><ol start="15"><li>在第一个节点中，验证一下是否已加入。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net</span><br></pre></td></tr></table></figure><ol start="16"><li>主节点调用开始同步命令，从交易池里取tx执行，并打包生成txBlock，发给其他委员会成员做bftcosi共识。会看到两个节点的信息都在滚动。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.start()</span><br></pre></td></tr></table></figure><ol start="17"><li>停止共识。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.stop()</span><br></pre></td></tr></table></figure><ol start="18"><li>查看下两个节点的区块数量是否相同。</li></ol><p><img src="https://resource.lilyssh.cn/pic/txBlockNumber.png" alt></p><ol start="19"><li>(不时需要)解锁账户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.unlockAccount(&quot;需解锁账户&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/unlockAccount.png" alt></p><ol start="20"><li>查看交易池状态，pending为待确认的交易数量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txpool.status</span><br></pre></td></tr></table></figure></li></ol><p>会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pending: 0,</span><br><span class="line">  queued: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="19"><li>退出：</li></ol><p><img src="https://resource.lilyssh.cn/pic/killall.png" alt></p>]]></content>
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> Cypherium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>以太坊 目录结构说明</title>
      <link href="/blockchain/cypherium-dir-description/"/>
      <url>/blockchain/cypherium-dir-description/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/cypherium-dir-description/">https://lilyssh.cn/blockchain/cypherium-dir-description/</a>  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>go-cypherium<br>本篇为转发，只做了下样式整理，<a href="https://blog.csdn.net/jiang_xinxing/article/details/80249981" target="_blank" rel="noopener">原文地址</a>。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/test ⌚ 14:02:17</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── accounts      // 实现了高层级的Ethereum账号管理</span><br><span class="line">│   ├── abi       // 实现了Ethereum的ABI(应用程序二进制接口) </span><br><span class="line">│   │   └── bind  // 该包生成Ethereum合约的Go绑定 </span><br><span class="line">│   │       └── backends</span><br><span class="line">│   ├── keystore  // 实现了Secp256k1私钥的加密存储</span><br><span class="line">│   └── usbwallet // 实现了支持USB硬件钱包</span><br><span class="line">├── cmd</span><br><span class="line">│   ├── abigen</span><br><span class="line">│   ├── bootnode  // 该节点为Ethereum发现协议运行一个引导节点 </span><br><span class="line">│   ├── clef</span><br><span class="line">│   ├── cypher    // 是Cypherium的官方客户端命令行 </span><br><span class="line">│   ├── ethkey</span><br><span class="line">│   ├── evm       // 执行EVM代码片段 </span><br><span class="line">│   ├── faucet    // 是以太faucet支持的轻量级客户 </span><br><span class="line">│   ├── p2psim    // 为客户端命令行模拟 HTTP API </span><br><span class="line">│   ├── puppeth   // 是一个命令组装和维护私人网路</span><br><span class="line">│   ├── rlpdump   // 能更好的打印出RLP格式的数据</span><br><span class="line">│   ├── swarm     // bzzhash命令能够更好的计算出swarm哈希树 </span><br><span class="line">│   ├── utils     // 为Go-Ethereum命令提供说明</span><br><span class="line">│   └── wnode</span><br><span class="line">├── common        // 包含一些帮助函数</span><br><span class="line">│   ├── bitutil   // 该包实现快速位操作</span><br><span class="line">│   ├── compiler  // 包装了Solity编译器可执行文件</span><br><span class="line">│   ├── fdlimit</span><br><span class="line">│   ├── hexutil   // 以0x为前缀的十六进制编码 </span><br><span class="line">│   ├── math</span><br><span class="line">│   └── mclock</span><br><span class="line">├── consensus     // 实现了不同以太共识引擎</span><br><span class="line">│   ├── bftcosi</span><br><span class="line">│   │   └── cosi</span><br><span class="line">│   ├── clique    // 实现了权威共识引擎 </span><br><span class="line">│   ├── ethash    // 发动机工作的共识ethash证明 </span><br><span class="line">│   └── misc</span><br><span class="line">├── console</span><br><span class="line">│   └── testdata</span><br><span class="line">├── containers</span><br><span class="line">│   └── docker</span><br><span class="line">│       ├── develop-alpine</span><br><span class="line">│       ├── develop-ubuntu</span><br><span class="line">│       ├── master-alpine</span><br><span class="line">│       └── master-ubuntu</span><br><span class="line">├── contracts</span><br><span class="line">│   ├── chequebook  // ‘支票薄’以太智能合约 </span><br><span class="line">│   └── ens</span><br><span class="line">├── core            // 核心部分，它包含账户、区块、创世块、区块链、transaction、bloom的定义以及区块如何验证、如何加入链以及transaction如何使用vm执行也就是智能合约的执行都在这里完成。 </span><br><span class="line">│   ├── asm         // 汇编和反汇编接口</span><br><span class="line">│   ├── bloombits   // Bloom过滤批量数据</span><br><span class="line">│   ├── rawdb</span><br><span class="line">│   ├── state       // 封装在以太状态树之上的一种缓存结构</span><br><span class="line">│   ├── types       // 以太合约支持的数据类型</span><br><span class="line">│   └── vm          // 以太虚拟机</span><br><span class="line">│       └── runtime // 一种用于执行EVM代码的基本执行模型</span><br><span class="line">├── crypto          // 加密工具包含不限于hash算法、ECC算法等</span><br><span class="line">│   ├── bn256       // 最优的ATE配对在256位Barreto-Naehrig曲线上 </span><br><span class="line">│   │   ├── cloudflare  // 在128位安全级别上的特殊双线性组</span><br><span class="line">│   │   └── google   // 在128位安全级别上的特殊双线性组</span><br><span class="line">│   ├── ecies</span><br><span class="line">│   ├── randentropy</span><br><span class="line">│   ├── secp256k1    // 封装比特币secp256k1的C库</span><br><span class="line">│   └── sha3         // Sha-3固定输出长度散列函数 and 由FIPS-202定义的抖动变量输出长度散列函数</span><br><span class="line">├── dashboard</span><br><span class="line">│   └── assets</span><br><span class="line">│       ├── components</span><br><span class="line">│       └── types</span><br><span class="line">├── docs</span><br><span class="line">├── eth             // 以太坊协议 </span><br><span class="line">│   ├── downloader  // 手动全链同步 </span><br><span class="line">│   ├── fetcher     // 基于块通知的同步 </span><br><span class="line">│   ├── filters     // 用于区块，交易和日志事件的过滤 </span><br><span class="line">│   ├── gasprice    </span><br><span class="line">│   └── tracers     // 收集JavaScript交易追踪 </span><br><span class="line">├── ethclient       // 以太坊RPC AIP客户端 </span><br><span class="line">├── ethdb           // 提供了数据源实现内存以及leveldb，并使用数据源扩展了不同实现，这包含缓存数据源、链数据源，依据于此又封装出读写缓存、异步读写缓存以及链存储相关的数据源实现。定义了如何使用datasource存储block、transaction，换句话说就是block、transaction的存储数据结构</span><br><span class="line">├── ethstats        // 网络统计报告服务 </span><br><span class="line">├── event           // 处理实时事件的费用 </span><br><span class="line">│   └── filter      // 事件过滤</span><br><span class="line">├── internal        </span><br><span class="line">│   ├── build       </span><br><span class="line">│   ├── cmdtest</span><br><span class="line">│   ├── debug       // 调试接口Go运行时调试功能 </span><br><span class="line">│   ├── ethapi      // 常用的以太坊API函数 </span><br><span class="line">│   ├── guide       // 小测试套件，以确保开发指南工作中的代码段正常运行 </span><br><span class="line">│   ├── jsre        // JavaScript执行环境 </span><br><span class="line">│   │   └── deps    // 控制台JavaScript依赖项Go嵌入 </span><br><span class="line">│   └── web3ext     // geth确保web3.js延伸</span><br><span class="line">├── les             // 轻量级Ethereum子协议 </span><br><span class="line">│   └── flowcontrol // 客户端流程控制机制 </span><br><span class="line">├── light           // 客户端实现按需检索能力的状态和链对象</span><br><span class="line">├── log             // 输出日志 </span><br><span class="line">│   └── term</span><br><span class="line">├── metrics         // Coda Hale度量库的Go端口 </span><br><span class="line">│   ├── exp         // 表达式相关操作 </span><br><span class="line">│   ├── influxdb</span><br><span class="line">│   └── librato</span><br><span class="line">├── miner           // 以太坊块创建和挖矿 </span><br><span class="line">├── mobile          // geth的移动端API</span><br><span class="line">├── node            // 设置多维接口节点</span><br><span class="line">├── p2p             // p2p网络协议 </span><br><span class="line">│   ├── discover    // 节点发现协议 </span><br><span class="line">│   ├── discv5      // RLPx v5主题相关的协议 </span><br><span class="line">│   ├── enr         // 实现EIP-778中的以太坊节点记录 </span><br><span class="line">│   ├── nat         // 提供网络端口映射协议的权限 </span><br><span class="line">│   ├── netutil     // 网络包拓展 </span><br><span class="line">│   ├── protocols   // p2p拓展 </span><br><span class="line">│   └── simulations // 实现模拟p2p网络 </span><br><span class="line">├── params</span><br><span class="line">├── rlp             // RLP系列化格式 </span><br><span class="line">├── rpc             // 通过网络或者I/O链接来访问接口</span><br><span class="line">├── signer</span><br><span class="line">│   ├── core</span><br><span class="line">│   ├── rules</span><br><span class="line">│   │   └── deps</span><br><span class="line">│   └── storage</span><br><span class="line">├── swarm</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── client</span><br><span class="line">│   │   └── http</span><br><span class="line">│   ├── bmt</span><br><span class="line">│   ├── dev</span><br><span class="line">│   ├── fuse</span><br><span class="line">│   ├── grafana_dashboards</span><br><span class="line">│   ├── log</span><br><span class="line">│   ├── metrics</span><br><span class="line">│   ├── multihash</span><br><span class="line">│   ├── network</span><br><span class="line">│   ├── pot</span><br><span class="line">│   ├── pss</span><br><span class="line">│   ├── services</span><br><span class="line">│   ├── state</span><br><span class="line">│   ├── storage</span><br><span class="line">│   └── testutil</span><br><span class="line">├── tests             // 以太坊JSON测试 </span><br><span class="line">├── trie              // Merkle Patricia树实现</span><br><span class="line">├── vendor</span><br><span class="line">│   ├── github.com</span><br><span class="line">│   ├── gopkg.in</span><br><span class="line">│   │   └── check.v1  // Go更深的测试 </span><br><span class="line">└── whisper</span><br><span class="line">    ├── mailserver</span><br><span class="line">    ├── shhclient</span><br><span class="line">    ├── whisperv5</span><br><span class="line">    └── whisperv6</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web3.js 如何修改/添加命令</title>
      <link href="/blockchain/geth-web3-update-command/"/>
      <url>/blockchain/geth-web3-update-command/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/geth-web3-update-command/">https://lilyssh.cn/blockchain/geth-web3-update-command/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以太坊的js交互是靠<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a>调用的。<br>改完后，需要打包，放到<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">Go Ethereum</a>里测试,以下就是修改命令过程说明。<br><a id="more"></a></p><h2 id="一、eth-改为-cph"><a href="#一、eth-改为-cph" class="headerlink" title="一、eth 改为 cph"></a>一、eth 改为 cph</h2><ol><li>修改 <code>web3.js/lib/web3.js</code> 文件中 <code>Web3</code>方法。<code>web3.js</code>是基础命令定义处。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.eth = new Eth(this);  //修改前</span><br><span class="line">this.cph = new Eth(this);  //修改后</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<a href="#internal">go-cypherium/internal/web3ext/web3ext.go</a> 文件中<code>Eth_JS</code>常量定义处。<code>web3ext.go</code>是扩展命令定义处。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const Eth_JS = `</span><br><span class="line">web3._extend(&#123;</span><br><span class="line">property: &apos;eth&apos;,  //修改前</span><br><span class="line">        property: &apos;cph&apos;,  //修改后</span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>go-cypherium/console/console.go</code>中，init方法。此处为web3.eth命令起个简略别名eth。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flatten := &quot;var eth = web3.eth; var personal = web3.personal; &quot;  //修改前</span><br><span class="line">flatten := &quot;var cph = web3.cph; var personal = web3.personal; &quot;  //修改后</span><br></pre></td></tr></table></figure></li></ol><p>到此，修改完成！</p><h2 id="二、eth-getBlock-n-改为-eth-getTxBlock-n"><a href="#二、eth-getBlock-n-改为-eth-getTxBlock-n" class="headerlink" title="二、eth.getBlock(n) 改为 eth.getTxBlock(n)"></a>二、eth.getBlock(n) 改为 eth.getTxBlock(n)</h2><p><a href="id:internal" target="_blank" rel="noopener">以太坊源码分析 internal包简介</a></p><h2 id="ethapi-api包分析"><a href="#ethapi-api包分析" class="headerlink" title="ethapi/api包分析"></a>ethapi/api包分析</h2><p>ethapi/api包主要是进入js的命令行界面后，输入的命令实现部分。<br><br>js的命令实现在ethapi/api和node/api中。目前一共有三种api的命令。<br><br>(1)第一种是admin相关的命令，这个是通过安全的RPC通道实现的。其结构体为PrivateAdminAPI<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// PrivateAdminAPI is the collection of administrative API methods exposed only</span><br><span class="line">// over a secure RPC channel.</span><br><span class="line">type PrivateAdminAPI struct &#123;</span><br><span class="line">    node *Node // Node interfaced by this API</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)第二种是personal相关的命令，主要是负责账户管理相关命令，可以lock和unlock账户。其结构体为PrivateAccountAPI<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// PrivateAccountAPI provides an API to access accounts managed by this node.</span><br><span class="line">// It offers methods to create, (un)lock en list accounts. Some methods accept</span><br><span class="line">// passwords and are therefore considered private by default.</span><br><span class="line">type PrivateAccountAPI struct &#123;</span><br><span class="line">    am *accounts.Manager</span><br><span class="line">    nonceLock *AddrLocker</span><br><span class="line">    b Backend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)第三种是eth相关的命令，主要是可以操作区块上的相关命令。其结构体为PublicBlockChainAPI<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// PublicBlockChainAPI provides an API to access the Ethereum blockchain.</span><br><span class="line">// It offers only methods that operate on public data that is freely available to anyone.</span><br><span class="line">type PublicBlockChainAPI struct &#123;</span><br><span class="line">    b Backend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="otto包"><a href="#otto包" class="headerlink" title="otto包"></a>otto包</h2><p>以太坊的命令是通过在js虚拟机上来实现命令的。而在go语言中，有第三方的otto包，可以直接在go语言中实现js命令。而以太坊代码则使用了otto包来实现搭建js命令。<br><br>在otto包中，set方法是设置变量的值，get方法是获取变量的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Set the property of the given name to the given value.</span><br><span class="line">func (self Object) Set(name string, value interface&#123;&#125;)</span><br><span class="line">// Get the value of the property with the given name.</span><br><span class="line">func (self Object) Get(name string) (Value, error)</span><br></pre></td></tr></table></figure></p><p>Compile是根据输入的路径对js的代码进行编译，返回变量的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Compile will parse the given source and return a Script value or nil and</span><br><span class="line">// an error if there was a problem during compilation.</span><br><span class="line">func (self *Otto) Compile(filename string, src interface&#123;&#125;) (*Script, error)</span><br></pre></td></tr></table></figure></p><p>Run方法会运行相关的js代码，如果有返回值的话会返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Run will run the given source (parsing it first if necessary), returning the resulting value and error (if any)</span><br><span class="line">func (self Otto) Run(src interface&#123;&#125;) (Value, error)</span><br></pre></td></tr></table></figure></p><h2 id="如何编写自己的以太坊命令"><a href="#如何编写自己的以太坊命令" class="headerlink" title="如何编写自己的以太坊命令"></a>如何编写自己的以太坊命令</h2><p>接上篇ethapi.api-analysis分析，如果我们需要在相关模块添加相关命令，首先我们需要找到相关命令所对应的api结构体。<br><br>各个命令对应的结构体，包的位置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin  PrivateAdminAPI,PublicAdminAPI  node/api</span><br><span class="line">debug  PrivateDebugAPI eth/api</span><br><span class="line">eth    PublicBlockChainAPI ethapi/api</span><br><span class="line">miner  PrivateMinerAPI eth/api</span><br><span class="line">net    PublicNetAPI    ethapi/api</span><br><span class="line">personal   PrivateAccountAPI   ethapi/api</span><br><span class="line">txpool PublicTxPoolAPI ethapi/api</span><br><span class="line">rpc    所有可调用包集合</span><br><span class="line">web3   所有命令集合</span><br></pre></td></tr></table></figure></p><p>假设我们需要在personal包中添加一个命令，那么我们就在PrivateAccountAPI中添加一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func (s *PrivateAccountAPI) TestMethod() &#123;</span><br><span class="line">fmt.Print(&quot;TestMethod&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来到internal/web3ext/web3ext.go中，找到personal命令集合，然后添加一条自己的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Personal_JS = `</span><br><span class="line">web3._extend(</span><br><span class="line">methods: [</span><br><span class="line">        new web3._extend.Method(&#123;</span><br><span class="line">            name : &apos;testMethod&apos;,</span><br><span class="line">            call : &apos;personal_testMethod&apos;</span><br><span class="line">        &#125;), //our method</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>最后到internal/jsre/deps/web3.js中，找到personal方法的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function Personal(web3) &#123;</span><br><span class="line">this._requestManager = web3._requestManager;</span><br><span class="line"></span><br><span class="line">var self = this;</span><br><span class="line"></span><br><span class="line">methods().forEach(function(method) &#123;</span><br><span class="line">method.attachToObject(self);</span><br><span class="line">method.setRequestManager(self._requestManager);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">properties().forEach(function(p) &#123;</span><br><span class="line">p.attachToObject(self);</span><br><span class="line">p.setRequestManager(self._requestManager);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">var methods = function () &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>然后再methods中添加你定义的方法名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var methods = function () &#123;</span><br><span class="line">var testMethod = new Method(&#123;</span><br><span class="line">name : &apos;testMethod&apos;,</span><br><span class="line">call : &apos;personal_testMethod&apos;</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>并在最后的return中添加你的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">return [</span><br><span class="line">newAccount,</span><br><span class="line">testMethod, //our method</span><br><span class="line">importRawKey,</span><br><span class="line">unlockAccount,</span><br><span class="line">ecRecover,</span><br><span class="line">sign,</span><br><span class="line">sendTransaction,</span><br><span class="line">lockAccount</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>这之后在启动命令行，我们就可以调用我们的方法了。结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; personal.testMethod()</span><br><span class="line">TestMethodnull</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ansible 使用亚马逊云服务(AWS)密钥文件 xx.pem同时操纵多台机子</title>
      <link href="/linux/ansible-aws-pem/"/>
      <url>/linux/ansible-aws-pem/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911903" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911903</a>  </p><h2 id="一、安装ansible"><a href="#一、安装ansible" class="headerlink" title="一、安装ansible"></a>一、安装<a href="https://www.ansible.com" target="_blank" rel="noopener">ansible</a></h2><ol><li>安装<a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="noopener">pip</a>包管理工具,先下载安装脚本<code>get-pip.py</code>。  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>执行安装脚本。  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>验证下是否安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure></p><ol start="3"><li>安装 ansible  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install ansible</span><br></pre></td></tr></table></figure><p>验证下是否安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible --version</span><br></pre></td></tr></table></figure></p><h2 id="二、-配置ansible。"><a href="#二、-配置ansible。" class="headerlink" title="二、 配置ansible。"></a>二、 配置<a href="https://www.ansible.com" target="_blank" rel="noopener">ansible</a>。</h2><p>在<code>/etc</code>下新建文件夹<code>ansible</code>，在<code>/etc/ansible</code>下创建<code>hosts</code>文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[aws]</span><br><span class="line">13.59.244.124ansible_ssh_private_key_file=~/cypherium_internal.pem</span><br><span class="line">18.216.16.200   ansible_ssh_private_key_file=~/cypherium_internal.pem</span><br></pre></td></tr></table></figure></p><p>aws是自定义的服务器组名。</p><h2 id="三、使用ansible。"><a href="#三、使用ansible。" class="headerlink" title="三、使用ansible。"></a>三、使用<a href="https://www.ansible.com" target="_blank" rel="noopener">ansible</a>。</h2><p><code>ping</code>一下分组中的机子，用<code>ping</code>模块， <code>-u 用户名</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible aws -m ping -u ubuntu</span><br></pre></td></tr></table></figure></p><p><img src="https://resource.lilyssh.cn/pic/ansible_ping.png" alt><br><code>ls</code> 一下分组中的机子，用<code>shell</code>模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible aws -m shell -a &quot;ls&quot; -u ubuntu</span><br></pre></td></tr></table></figure></p><p><img src="https://resource.lilyssh.cn/pic/ansible_ls.png" alt></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go Ethereum 以太坊 web3.js 打包编译发布过程</title>
      <link href="/blockchain/geth-web3-gulp-bindata-/"/>
      <url>/blockchain/geth-web3-gulp-bindata-/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911406" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911406</a>  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以太坊的js交互是靠<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a>调用的。<br>改完后，需要打包，放到<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">Go Ethereum</a>里测试,以下就是打包编译过程说明。<br>web3.js版本：v0.20.6。<br><a id="more"></a></p><ol><li>安装cnpm</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>web3.js</code>的根路径下 安装<code>web3.js</code>的依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure><ol start="3"><li>安装<code>gulp</code>打包命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>web3.js</code>的根路径下 执行<code>gulp</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><ol start="5"><li>把<code>dist/web3.js</code>文件拷贝到项目中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp dist/web3.js ../go-cypherium/internal/jsre/deps</span><br></pre></td></tr></table></figure><ol start="6"><li>安装<code>go-bindata</code>(我是在~目录下执行的)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/jteeuwen/go-bindata/...</span><br></pre></td></tr></table></figure><ol start="7"><li>复制 go-bindata文件 到 go的安装目录的bin下。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/go/bin/go-bindata  ~/install/go/bin</span><br></pre></td></tr></table></figure><ol start="8"><li>在cypherium_private/go-cypherium/internal/jsre/deps下执行deps.go的倒数第二行,会看到bindata.go已变蓝色，大功告成！</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-bindata -nometadata -pkg deps -o bindata.go bignumber.js web3.js</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cypherium 同步区块测试操作步骤</title>
      <link href="/blockchain/cypherium-test-sync-block/"/>
      <url>/blockchain/cypherium-test-sync-block/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/cypherium-test-sync-block/">https://lilyssh.cn/blockchain/cypherium-test-sync-block/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Cypherium 同步区块链测试步骤。以下步骤适用于同一台机子测试。如果使用两台电脑测试，则有关第二节点的操作在另一台机子上执行即可。以下命令请在<code>cypherium_private/go-cypherium</code>路径下执行。<br><a id="more"></a></p><ol><li>创建test文件夹,test中目录结构如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/test ⌚ 14:02:17</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── genesis.json</span><br><span class="line">├── group.toml</span><br><span class="line">├── node_01</span><br><span class="line">│   ├── data</span><br><span class="line">└── node_02</span><br><span class="line">    ├── data</span><br></pre></td></tr></table></figure><ol start="2"><li>清理  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><ol start="3"><li>编译  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make cypher</span><br></pre></td></tr></table></figure><ol start="4"><li>生成节点信息  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher setup</span><br></pre></td></tr></table></figure><p>需要输入 ip：端口，用于测试使用kyber的Ed25519算法生成<code>public.toml</code>和<code>private.toml</code>，保存在默认路径。目前没做ip发现，所以需手动拼接公钥<code>~/Library/Application\ Support/cypher/public.toml</code>(Mac默认路径)，用于模拟测试。节点名字可自定义，如node_01_name。<br><img src="https://resource.lilyssh.cn/pic/cypher%20setup_.png" alt></p><ol start="5"><li><p>同理，再生成第二个节点。</p></li><li><p>把第一、二个节点的public.toml，拼接到~/workspace/test/group.toml中。</p></li></ol><p><img src="https://resource.lilyssh.cn/pic/group.toml.png" alt></p><ol start="7"><li>初始化 两个节点的创世区块。  </li></ol><p>第一个节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_01/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>第二个节点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_02/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>genesis.json中内容可参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">        &quot;chainId&quot;: 123666,</span><br><span class="line">        &quot;homesteadBlock&quot;: 0,</span><br><span class="line">        &quot;eip155Block&quot;: 0,</span><br><span class="line">        &quot;eip158Block&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">  &quot;alloc&quot;      : &#123;&#125;,</span><br><span class="line">  &quot;coinbase&quot;   : &quot;0x0000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;difficulty&quot; : &quot;0x20000&quot;,</span><br><span class="line">  &quot;extraData&quot;  : &quot;&quot;,</span><br><span class="line">  &quot;gasLimit&quot;   : &quot;0x2fefd8&quot;,</span><br><span class="line">  &quot;nonce&quot;      : &quot;0x0000000000000042&quot;,</span><br><span class="line">  &quot;mixhash&quot;    : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;parentHash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;timestamp&quot;  : &quot;0x00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>启动第一个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_01/private.toml --datadir ~/workspace/test/node_01/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7010 --rpcport 8510 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_01/output2.log</span><br></pre></td></tr></table></figure><ol start="9"><li>启动第一个节点的js交互窗口(用上一步成的ipc文件)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_01/data/cypher.ipc</span><br></pre></td></tr></table></figure><ol start="10"><li>启动第二个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_02/private.toml --datadir ~/workspace/test/node_02/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7020 --rpcport 8520 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_02/output2.log</span><br></pre></td></tr></table></figure><ol start="11"><li>启动第二个节点的js交互窗口(用上一步成的ipc文件)。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_02/data/cypher.ipc</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/attach%20node_.jpg" alt></p><ol start="12"><li>从此步骤开始，都将在js交互涌窗口执行。查看第一个节点的信息。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.nodeInfo</span><br></pre></td></tr></table></figure><ol start="13"><li>在第二个节点中，创建用户，保存挖矿奖励。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(&quot;password&quot;)</span><br></pre></td></tr></table></figure><ol start="14"><li>在第二个节点中，加入第一个节点。就是把cnode中的内容粘进addPeer中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer(&quot;cnode&quot;)</span><br></pre></td></tr></table></figure><ol start="15"><li>在第一个节点中，验证一下是否已加入。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net</span><br></pre></td></tr></table></figure><ol start="16"><li>主节点调用开始同步命令，从交易池里取tx执行，并打包生成txBlock，发给其他委员会成员做bftcosi共识。会看到两个节点的信息都在滚动。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.start()</span><br></pre></td></tr></table></figure><ol start="17"><li>停止共识。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.stop()</span><br></pre></td></tr></table></figure><ol start="18"><li>查看下两个节点的区块数量是否相同。</li></ol><p><img src="https://resource.lilyssh.cn/pic/txBlockNumber.png" alt></p><ol start="19"><li>(不时需要)解锁账户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.unlockAccount(&quot;需解锁账户&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/unlockAccount.png" alt></p><ol start="20"><li>查看交易池状态，pending为待确认的交易数量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txpool.status</span><br></pre></td></tr></table></figure></li></ol><p>会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pending: 0,</span><br><span class="line">  queued: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="19"><li>退出：</li></ol><p><img src="https://resource.lilyssh.cn/pic/killall.png" alt></p>]]></content>
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> Cypherium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go Ethereum 以太坊 web3.js 控制台 调试</title>
      <link href="/blockchain/geth-web3-javascript-debug/"/>
      <url>/blockchain/geth-web3-javascript-debug/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911363" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911363</a>  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近要根据以太坊，做个数字货币，需要修改一些命令，就看了一下<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a>。<br>每次改完，都需要打包，放到<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">Go Ethereum</a>里测试，非常麻烦，就研究了一波怎么调试和怎么使用测试用例。<br><a id="more"></a></p><h1 id="一、从官网寻找测试方法"><a href="#一、从官网寻找测试方法" class="headerlink" title="一、从官网寻找测试方法"></a>一、从官网寻找测试方法</h1><p>1、从web3.js的github地址页面，看<a href="https://github.com/ethereum/web3.js/blob/develop/README.md" target="_blank" rel="noopener">README.md</a>，能看到测试命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br></pre></td></tr></table></figure></p><p>2、从<a href="https://github.com/ethereum/web3.js/blob/develop/package.json" target="_blank" rel="noopener">package.json</a>中可以看到<code>npm test</code>的测试方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;gulp&quot;,</span><br><span class="line">    &quot;watch&quot;: &quot;gulp watch&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;jshint *.js lib&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;mocha; jshint *.js lib&quot;,</span><br><span class="line">    &quot;test-coveralls&quot;: &quot;istanbul cover _mocha -- -R spec &amp;&amp; cat coverage/lcov.info | coveralls --verbose&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>看到web3.js是用<code>mocha</code>测试的。  </p><h1 id="二、使用WebStorm调试web3-js"><a href="#二、使用WebStorm调试web3-js" class="headerlink" title="二、使用WebStorm调试web3.js"></a>二、使用<a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>调试<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a></h1><p>1、点击<code>Add Configuration</code>，添加一个测试配置。<br><img src="https://resource.lilyssh.cn/pic/add%20configuration.png" alt><br>2、选择Mocha：<br><img src="https://resource.lilyssh.cn/pic/add%20mocha.png" alt><br>3、配置mocha：<br><img src="https://resource.lilyssh.cn/pic/config%20mocha.png" alt><br>4、debug：<br><img src="https://resource.lilyssh.cn/pic/mocha%20debug.png" alt></p><p>接下来就可以愉快的调试啦！</p>]]></content>
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 8.0 主从复制 基本配置</title>
      <link href="/mysql/1-mysql-replication/"/>
      <url>/mysql/1-mysql-replication/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/mysql/1-mysql-replication/">https://lilyssh.cn/mysql/1-mysql-replication/</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MySQL主从复制可实现数据的多处自动备份。不仅可以加强数据的安全性，通过实现读写分离还能提升数据库的负载性能。<br><a id="more"></a></p><h1 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h1><p><img src="http://p8wysinsm.bkt.clouddn.com/mysql_replication.jpeg" alt> MySQL之间数据复制的基础是二进制日志文件（binary log file）。一台MySQL数据库一旦启用二进制日志后，其作为master，它的数据库中所有操作都会以“事件”的方式记录在二进制日志中，其他数据库作为slave通过一个I/O线程与主服务器保持通信，并监控master的二进制日志文件的变化，如果发现master二进制日志文件发生变化，则会把变化复制到自己的中继日志中，然后slave的一个SQL线程会把相关的“事件”执行到自己的数据库中，以此实现从数据库和主数据库的一致性，也就实现了主从复制。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="主服务器："><a href="#主服务器：" class="headerlink" title="主服务器："></a>主服务器：</h2><ul><li>开启二进制日志</li><li>配置唯一的server-id</li><li>获得master二进制日志文件名及位置</li><li>创建一个用于slave和master通信的用户账号<h2 id="从服务器："><a href="#从服务器：" class="headerlink" title="从服务器："></a>从服务器：</h2></li><li>配置唯一的server-id</li><li>使用master分配的用户账号读取master二进制日志</li><li>启用slave服务</li></ul><p>具体实现过程如下：<br>一、主数据库master修改：<br>1.修改mysql配置</p><p>找到主数据库的配置文件my.cnf(或者my.ini)，我的在/etc/mysql/my.cnf,在[mysqld]部分插入如下两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin #开启二进制日志,mysql-bin是二进制日志文件的名称，可自定义命名。</span><br><span class="line">server-id=1 #设置server-id</span><br></pre></td></tr></table></figure></p><p>2.重启mysql，创建用于同步的用户账号</p><p>打开mysql会话shell&gt;mysql -hlocalhost -uname -ppassword</p><p>创建用户并授权：用户：repl 密码：slavepass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;repl&apos;@&apos;123.57.44.85&apos; IDENTIFIED BY &apos;slavepass&apos;;#创建用户</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;repl&apos;@&apos;123.57.44.85&apos;;#分配权限</span><br><span class="line">mysql&gt;flush privileges;   #刷新权限</span><br></pre></td></tr></table></figure></p><p>3.查看master状态，记录二进制文件名(mysql-bin.000003)和位置(73)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><table><thead><tr><th>File</th><th>Position</th><th>Binlog_Do_DB</th><th>Binlog_Ignore_DB</th><th>Executed_Gtid_Set</th></tr></thead><tbody><tr><td>mysql-bin.000004</td><td>155</td><td></td><td></td></tr></tbody></table><p>二、从服务器slave修改：<br>1.修改mysql配置<br>同样找到my.cnf配置文件，添加server-id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2 #设置server-id，必须唯一</span><br></pre></td></tr></table></figure></p><p>2.重启mysql，打开mysql会话，执行同步SQL语句(需要主服务器主机名，登陆凭据，二进制文件的名称和位置)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">    -&gt;     MASTER_HOST=&apos;192.168.0.110&apos;,</span><br><span class="line">    -&gt;     MASTER_USER=&apos;repl&apos;,</span><br><span class="line">    -&gt;     MASTER_PASSWORD=&apos;slavepass&apos;,</span><br><span class="line">    -&gt;     MASTER_LOG_FILE=&apos;mysql-bin.000003&apos;,</span><br><span class="line">    -&gt;     MASTER_LOG_POS=73;</span><br></pre></td></tr></table></figure></p><p>3.启动slave同步进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;start slave;</span><br></pre></td></tr></table></figure></p><p>4.查看slave状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 182.92.172.80</span><br><span class="line">                  Master_User: rep1</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000013</span><br><span class="line">          Read_Master_Log_Pos: 11662</span><br><span class="line">               Relay_Log_File: mysqld-relay-bin.000022</span><br><span class="line">                Relay_Log_Pos: 11765</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000013</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>当Slave_IO_Running和Slave_SQL_Running都为YES的时候就表示主从同步设置成功了。</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Dubbo的Hessian协议实现远程调用</title>
      <link href="/dubbo/dubbo-hessian/"/>
      <url>/dubbo/dubbo-hessian/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911937" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911937</a>   </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建两个项目，一个provider提供dubbo服务，一个client消费服务。<br>源码地址：<a href="https://gitee.com/qianxunclub/java-demo/tree/master/chapter-2" target="_blank" rel="noopener">https://gitee.com/qianxunclub/java-demo/tree/master/chapter-2</a><br>目录结构如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ tree -I target</span><br><span class="line"></span><br><span class="line">chapter-2</span><br><span class="line">├── api</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           └── java</span><br><span class="line">│               └── com</span><br><span class="line">│                   └── qianxunclub</span><br><span class="line">│                       └── chapter2</span><br><span class="line">│                           └── api</span><br><span class="line">│                               └── DemoService.java</span><br><span class="line">├── client</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── com</span><br><span class="line">│           │       └── qianxunclub</span><br><span class="line">│           │           └── chapter2</span><br><span class="line">│           │               └── client</span><br><span class="line">│           │                   └── ClientMain.java</span><br><span class="line">│           └── resource</span><br><span class="line">│               ├── demo-consumer.xml</span><br><span class="line">│               └── log4j.properties</span><br><span class="line">├── pom.xml</span><br><span class="line">└── provider</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br><span class="line">        └── main</span><br><span class="line">            ├── java</span><br><span class="line">            │   └── com</span><br><span class="line">            │       └── qianxunclub</span><br><span class="line">            │           └── chapter2</span><br><span class="line">            │               └── provider</span><br><span class="line">            │                   ├── DemoServiceImpl.java</span><br><span class="line">            │                   └── ProviderMain.java</span><br><span class="line">            └── resource</span><br><span class="line">                ├── META-INF</span><br><span class="line">                │   └── spring</span><br><span class="line">                │       └── demo-provider.xml</span><br><span class="line">                └── log4j.properties</span><br></pre></td></tr></table></figure><h1 id="1、在provider的pom-xml中引入maven包"><a href="#1、在provider的pom-xml中引入maven包" class="headerlink" title="1、在provider的pom.xml中引入maven包"></a>1、在provider的<code>pom.xml</code>中引入maven包</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qianxunclub<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter-2-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2、在provider中添加配置文件"><a href="#2、在provider中添加配置文件" class="headerlink" title="2、在provider中添加配置文件"></a>2、在provider中添加配置文件</h1><p>在provider的<code>resource/META-INF/spring</code>下建个xml, 例如：demo-provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.qianxunclub.chapter2.provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span> <span class="attr">owner</span>=<span class="string">"lily"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"qianxunclub.com:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前服务发布所依赖的协议；WebService、Thrift、Hessian、http--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增加hessian协议--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"hessian"</span> <span class="attr">port</span>=<span class="string">"8090"</span> <span class="attr">server</span>=<span class="string">"jetty"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：该xml文件默认需要建在resource/META-INF/spring文件夹下。多说无益，上dubbo源码。<br>从ProviderMain.java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Main.main(args);</span><br></pre></td></tr></table></figure><p>点进去<code>main</code>方法，查看<code>main</code>方法中<code>Container</code>接口的其中之一的实现类<code>SpringContainer</code>中可以看到默认路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SPRING_CONFIG = <span class="string">"classpath*:META-INF/spring/*.xml"</span>;</span><br></pre></td></tr></table></figure><p>也可以自定义路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String configPath = ConfigUtils.getProperty(<span class="string">"dubbo.spring.config"</span>);</span><br><span class="line">    <span class="keyword">if</span>(configPath == <span class="keyword">null</span> || configPath.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        configPath = <span class="string">"classpath*:META-INF/spring/*.xml"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    context = <span class="keyword">new</span> ClassPathXmlApplicationContext(configPath.split(<span class="string">"[,\\s]+"</span>));</span><br><span class="line">    context.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点进去getProperty方法,一路ctrl下去，可以看到ConfigUtils.java中自定义路径的规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(PROPERTIES == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Class var0 = ConfigUtils.class;</span><br><span class="line">        <span class="keyword">synchronized</span>(ConfigUtils.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(PROPERTIES == <span class="keyword">null</span>) &#123;</span><br><span class="line">                String path = System.getProperty(<span class="string">"dubbo.properties.file"</span>);</span><br><span class="line">                <span class="keyword">if</span>(path == <span class="keyword">null</span> || path.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    path = System.getenv(<span class="string">"dubbo.properties.file"</span>);</span><br><span class="line">                    <span class="keyword">if</span>(path == <span class="keyword">null</span> || path.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                        path = <span class="string">"dubbo.properties"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                PROPERTIES = loadProperties(path, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PROPERTIES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resource下创建dubbo.properties文件，内容如下：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#dubbo配置的自定义路径</span><br><span class="line">dubbo.spring.config=classpath*:hello/*.xml</span><br></pre></td></tr></table></figure><h1 id="3、在api模块中添加对外抛出的接口"><a href="#3、在api模块中添加对外抛出的接口" class="headerlink" title="3、在api模块中添加对外抛出的接口"></a>3、在api模块中添加对外抛出的接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在provider中添加该接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qianxunclub.chapter2.api.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"demoService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello:"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>demo-provider.xml</code>中，添加 对外抛出接口：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--服务发布的配置，需要暴露的服务接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span></span></span><br><span class="line"><span class="tag">        <span class="attr">interface</span>=<span class="string">"com.qianxunclub.chapter2.api.DemoService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">"demoService"</span> <span class="attr">protocol</span>=<span class="string">"hessian"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4、调用provider中的main方法"><a href="#4、调用provider中的main方法" class="headerlink" title="4、调用provider中的main方法"></a>4、调用provider中的main方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.container.Main;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Main.main(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在provider控制台，会打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DUBBO] Register: hessian://192.168.103.163:8090/com.qianxunclub.chapter2.provider.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.3&amp;interface=com.qianxunclub.chapter2.provider.DemoService&amp;methods=sayHello&amp;owner=lily&amp;pid=6656&amp;server=jetty&amp;side=provider&amp;timestamp=1527126914293, dubbo version: 2.5.3, current host: 127.0.0.1</span><br></pre></td></tr></table></figure><p>进入zookeeper客户端，查看服务：<br><img src="https://lilyssh.github.io/pic/zk_provider_sayhello.jpg" alt>  </p><h1 id="5、在client的pom-xml中引入maven包"><a href="#5、在client的pom-xml中引入maven包" class="headerlink" title="5、在client的pom.xml中引入maven包"></a>5、在client的<code>pom.xml</code>中引入maven包</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qianxunclub<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter-2-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6、在client中添加配置文件"><a href="#6、在client中添加配置文件" class="headerlink" title="6、在client中添加配置文件"></a>6、在client中添加配置文件</h1><p>在provider的<code>resource/META-INF</code>下建个xml, 例如：demo-consumer.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-client"</span> <span class="attr">owner</span>=<span class="string">"mic"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"qianxunclub.com:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前服务发布所依赖的协议；webserovice、Thrift、Hessain、http--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20881"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--服务发布的配置，需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">interface</span>=<span class="string">"com.qianxunclub.chapter2.api.DemoService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">"demoService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7、调用client中的main方法"><a href="#7、调用client中的main方法" class="headerlink" title="7、调用client中的main方法"></a>7、调用client中的main方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qianxunclub.chapter2.api.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"demo-consumer.xml"</span>);</span><br><span class="line">        DemoService demoService = context.getBean(DemoService.class);</span><br><span class="line">        String r = demoService.sayHello(<span class="string">"zhangsan"</span>);</span><br><span class="line">        System.out.println(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unsupported protocol hessian in notified url: hessian://192.168.103.163:8090/com.qianxunclub.chapter2.api.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.3&amp;interface=com.qianxunclub.chapter2.api.DemoService&amp;methods=sayHello&amp;owner=lily&amp;pid=11648&amp;server=jetty&amp;side=provider&amp;timestamp=1527152915485 from registry qianxunclub.com:2181 to consumer 192.168.103.163, supported protocol: [dubbo, injvm, mock, redis, registry, rmi, thrift]</span><br></pre></td></tr></table></figure><p><img src="https://lilyssh.github.io/pic/UnsupportedProtocolHessianError.jpg" alt><br>原来是client端少引了个hessian依赖，加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次启动,会看到控制台打印了：hello:zhangsan。<br>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署和使用dubbo-admin做服务治理</title>
      <link href="/dubbo/dubbo-admin-use-method/"/>
      <url>/dubbo/dubbo-admin-use-method/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/dubbo/dubbo-admin-use-method/">https://lilyssh.cn/dubbo/dubbo-admin-use-method/</a>   </p><h1 id="1、下载dubbo-admin源码"><a href="#1、下载dubbo-admin源码" class="headerlink" title="1、下载dubbo-admin源码"></a>1、下载dubbo-admin源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/incubator-dubbo-ops.git</span><br></pre></td></tr></table></figure><p>会下载下来三个项目：</p><ul><li>dubbo-admin：dubbo控制台(本章重点，敲黑板)</li><li>dubbo-monitor-simple：监控</li><li>dubbo-registry-simple：等我知道这是干啥的了，再来补充。  <a id="more"></a></li></ul><h1 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h1><p>修改<code>webapp/WEB-INF/dubbo.properties</code><br><img src="https://lilyssh.github.io/pic/dubbo.properties.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># zookeeper注册中心地址</span><br><span class="line">dubbo.registry.address=zookeeper://qianxunclub.com:2181</span><br><span class="line"># 默认root用户</span><br><span class="line">dubbo.admin.root.password=root</span><br><span class="line"># 默认guest用户</span><br><span class="line">dubbo.admin.guest.password=guest</span><br></pre></td></tr></table></figure></p><p>如果需要，可修改或添加用户名密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo.admin.用户名.password=密码</span><br></pre></td></tr></table></figure></p><h1 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h1><p>用tomcat启动本项目，访问<code>http://localhost:8080/</code>，并使用上一步<code>dubbo.properties</code>配置好的用户名密码登陆。  </p><h1 id="4、控制台使用"><a href="#4、控制台使用" class="headerlink" title="4、控制台使用"></a>4、控制台使用</h1><p>控制台所展示的数据，是从zookeeper里读取到的数据。  </p><p><img src="https://lilyssh.github.io/pic/dubbo-admin-services.png" alt><br>菜单功能描述：</p><ul><li>services:已注册到zookeeper的dubbo服务接口列表</li><li>applications：已注册到zookeeper的dubbo服务列表</li><li>addresses：所有服务提供者和消费者的ip和端口号列表，点进去会显示，该ip端口下所有的服务信息，包括提供的，消费的，路由，权重等。</li></ul><p>其他菜单，可自行研究。并且还提供了很多服务治理的操作，如:禁用/启用服务，设置权重，添加路由等等。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Main方法启动dubbo，并使用dubbo命令行模拟客户端测试</title>
      <link href="/dubbo/dubbo-main-reload/"/>
      <url>/dubbo/dubbo-main-reload/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/dubbo/dubbo-main-reload/">https://lilyssh.cn/dubbo/dubbo-main-reload/</a></p><h2 id="1、引入maven包"><a href="#1、引入maven包" class="headerlink" title="1、引入maven包"></a>1、引入maven包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、添加配置文件"><a href="#2、添加配置文件" class="headerlink" title="2、添加配置文件"></a>2、添加配置文件</h2><p>在<code>resource/META-INF</code>下建个xml, 例如：demo-provider.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span> <span class="attr">owner</span>=<span class="string">"mic"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"qianxunclub.com:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前服务发布所依赖的协议；webService、Thrift、Hessian、http--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3、添加对外抛出的接口"><a href="#3、添加对外抛出的接口" class="headerlink" title="3、添加对外抛出的接口"></a>3、添加对外抛出的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello:"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>demo-provider.xml</code>配置文件中，添加 对外抛出接口：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.qianxunclub.demo.dubbo.DemoServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--服务发布的配置，需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">interface</span>=<span class="string">"com.qianxunclub.demo.dubbo.DemoService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ref</span>=<span class="string">"demoService"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4、调用dubbo的main方法"><a href="#4、调用dubbo的main方法" class="headerlink" title="4、调用dubbo的main方法"></a>4、调用dubbo的main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.container.Main;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、检查服务注册是否成功"><a href="#5、检查服务注册是否成功" class="headerlink" title="5、检查服务注册是否成功"></a>5、检查服务注册是否成功</h2><p>使用 telnet 模拟调用dubbo服务,端口为<code>demo-provider.xml</code>里配置的dubbo端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 20880</span><br></pre></td></tr></table></figure></p><p>如果连接成功，会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line"></span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure></p><p>使用<code>ls</code>查看所有服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;ls</span><br><span class="line">com.qianxunclub.demo.dubbo.DemoService</span><br></pre></td></tr></table></figure></p><p>如果出现这个接口，代表注册成功。</p><h2 id="6、模拟客户端调用"><a href="#6、模拟客户端调用" class="headerlink" title="6、模拟客户端调用"></a>6、模拟客户端调用</h2><p>使用telnet模拟调用服务<br>使用<code>cd</code>进入到<code>com.qianxunclub.demo.dubbo.DemoService</code>中,并使用<code>ls</code>查看服务里的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;cd com.qianxunclub.demo.dubbo.DemoService</span><br><span class="line">Used the com.qianxunclub.demo.dubbo.DemoService as default.</span><br><span class="line">You can cancel default service by command: cd /</span><br><span class="line">dubbo&gt;ls</span><br><span class="line">Use default service com.qianxunclub.demo.dubbo.DemoService.</span><br><span class="line"></span><br><span class="line">sayHello</span><br></pre></td></tr></table></figure></p><p>使用invoke模拟客户端调用服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;invoke sayHello(&quot;world&quot;)</span><br><span class="line">Use default service com.qianxunclub.demo.dubbo.DemoService.</span><br><span class="line">&quot;hello:world&quot;</span><br><span class="line">elapsed: 1 ms.</span><br></pre></td></tr></table></figure></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浪淘沙（昨日出东城）</title>
      <link href="/poem/su-shi/zuo-ri-chu-dong-cheng/"/>
      <url>/poem/su-shi/zuo-ri-chu-dong-cheng/</url>
      <content type="html"><![CDATA[<blockquote><font size="5">浪淘沙</font>  <p>苏轼（1037年1月8日—1101年8月24日）   &nbsp;&nbsp;宋神宗&nbsp;&nbsp;熙宁五年(1072年)&nbsp;&nbsp;正月&nbsp;&nbsp;杭州&nbsp;&nbsp;35岁<br></p><p>昨日出东城，试探春情。  </p><p>墙头红杏暗如倾。  </p><p>槛内群芳芽未吐,早已回春。<br><a id="more"></a><br><br><br>绮陌敛香尘，雪霁前村。  </p><p>东君用意不辞辛。  </p><p>料想春光先到处，吹绽梅英。  </p></blockquote><p>译文：</p><p>昨日出东城踏青游玩。<br>墙头上的红杏颜色暗，茂密得好像要倾斜下来。<br>栏杆内侧的各种花草却还没有露出花苞，春天的脚步还没走到这里。<br><br><br>美丽的小路上，女子经过扬起尘土和落花，前面的村子刚刚下过雪。<br>这是掌管春天的神辛勤的脚步吧。<br>想必春天来到之时，柔风一定会先吹开梅花。</p><p><img src="http://wailian.work/images/2018/05/21/371259cfce51f4e2.jpg" alt="371259cfce51f4e2.jpg"></p>]]></content>
      
      <categories>
          
          <category> 诗词赏析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宋词 </tag>
            
            <tag> 词 </tag>
            
            <tag> 苏轼 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>行香子（一叶舟轻）</title>
      <link href="/poem/su-shi/yi-ye-zhou-qing/"/>
      <url>/poem/su-shi/yi-ye-zhou-qing/</url>
      <content type="html"><![CDATA[<blockquote><font size="5">行香子</font>  <p>苏轼（1037年1月8日—1101年8月24日）   &nbsp;&nbsp;宋神宗&nbsp;&nbsp;熙宁六年(1073年)&nbsp;&nbsp;春&nbsp;&nbsp;浙江桐庐&nbsp;&nbsp;36岁<br></p><p>一叶舟轻，双桨鸿惊。  </p><p>水天清、影湛波平。  </p><p>鱼翻藻鉴，鹭点烟汀。</p><p>过沙溪急，霜溪冷，月溪明。</p><a id="more"></a><p><br><br>重重似画，曲曲如屏。  </p><p>算当年、虚老严陵。  </p><p>君臣一梦，今古虚名。</p><p>但远山长，云山乱，晓山青。 </p></blockquote><p>译文：</p><p>一叶小舟，荡着双桨，像惊飞的鸿雁一样，飞快的掠过水面。<br>天空碧蓝，水色清明，山色天光尽入江水，波平如镜。<br>水中游鱼清晰可数，不时跃出明镜般的水面；水边沙洲白鹭点点，悠然自得。<br>白天溪水清澈而见沙底，清晓的溪水清冷而有霜意，月下的溪水好似是明亮的水晶宫。<br><br><br>两岸连山重重叠叠如画景，曲曲折折又似屏风。<br>不由得想起当年终老在此的严子陵。<br>而今皇帝和隐士也已如梦一般消失，只留下空名而已。<br>真正能永恒流传下来的又是什么呢？<br>只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。</p><p><img src="https://lilyssh.github.io/pic/yi_ye_zhou_qing.jpg" alt></p>]]></content>
      
      <categories>
          
          <category> 诗词赏析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宋词 </tag>
            
            <tag> 词 </tag>
            
            <tag> 苏轼 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>亿级流量架构(一) 概述</title>
      <link href="/architecture/high-concurrency-reason/"/>
      <url>/architecture/high-concurrency-reason/</url>
      <content type="html"><![CDATA[<h1 id="1-传统单体服务"><a href="#1-传统单体服务" class="headerlink" title="1.传统单体服务"></a>1.传统单体服务</h1><h2 id="什么是单体架构？"><a href="#什么是单体架构？" class="headerlink" title="什么是单体架构？"></a>什么是单体架构？</h2><p>传统单体服务就是 所有功能模块，只有一套代码，并且都部署在同一台服务器上。表都放在同一个数据库中。</p><a id="more"></a><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>(1) 复杂性逐渐变高,代码量大，各模块关系错综复杂。<br>(2) 阻碍技术创新,不能根据不同的模块的特点，为不同模块做技术选型。<br>(3) 开发效率低，由于提前没有考虑公用性，难以共用功能模块。</p><ul><li>所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断。 </li><li>所有人都阶段性完成任务后，不影响要上线的功能，才能部署。 </li></ul><ul><li>举个栗子，商城模块和活动模块都需要支付，但是由于两个模块的开发人员各自开发各自的，导致两者都重复造轮子，造成代码冗余，浪费时间，或者是商城已开发了支付，活动需要用商城的支付，此刻才想到共用的话，增加沟通成本，接口很可能会需要变动，也会导致牵一发而动全身，导致商城调用支付接口处变动。 </li></ul><p>(4) 无法按需伸缩。不能依据流量来布局，比如说，做集群，只能把整个项目集群，活跃度不高的模块就浪费资源了。<br>(5) 代码量大，部署速度会逐渐变慢。<br>(6) 由于耦合性太高，每次一点小的改动，都可能会导致其他模块受到影响，都需要重新对整个项目进行测试，部署和重启，而且还有可能会导致整个项目崩溃。</p><h1 id="2-微服务架构模式"><a href="#2-微服务架构模式" class="headerlink" title="2.微服务架构模式"></a>2.微服务架构模式</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务?"></a>什么是微服务?</h2><p>专注于单一责任的小型功能模块为基础，通过API相互通信的方式完成复杂业务系统搭建的一种设计思想。</p><h2 id="为什么需要微服务"><a href="#为什么需要微服务" class="headerlink" title="为什么需要微服务?"></a>为什么需要微服务?</h2><p>传统架构　扩展性差，可靠性不高，维护成本高。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>每个微服务都很小，这样能聚焦一个指定的业务功能或业务需求。</li><li>微服务能够被小团队单独开发。</li><li>微服务是松耦合，是有功能意义的服务，无论是在开发阶段还是在部署阶段，都是独立的。</li><li>微服务能够使用不同的语言开发。</li><li>微服务易于被一个开发人员理解，修改和维护。</li><li>微服务能根据不同的服务的流量等，来自定义服务配置。</li><li>易于和第三方集成。</li><li>每个微服务都能有自己独立的存储方式。</li><li>故障隔离。</li></ul><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul><li>分布式系统可能复杂，难以管理。  </li><li>分布部署，跟踪问题难。</li><li>服务数量增加，管理复杂性增加。</li></ul><h2 id="需要考虑的问题"><a href="#需要考虑的问题" class="headerlink" title="需要考虑的问题"></a>需要考虑的问题</h2><ul><li>虽然单个微服务代码量小，易于修改和维护，但是系统复杂度的总量是没变的。一个系统被拆成零碎的微服务后，最后还要集成为一个完整的系统，也很复杂。</li><li>当微服务达到一个量级的时候，如何提供一个高效的集群通讯机制，就成了一个问题。</li><li>单个微服务拥有自己的进程，进程本身就可以动态的启停，为无缝升级打好了基础，但谁来启动和停止进程，什么时机，选择在哪台设备上做这件事才是升级的关键，需要强大的版本管理和部署能力。</li><li>多个相同的微服务可以做负载均衡，提高性能和可靠性。就需要考虑什么时候应该启动更多的微服务，多个微服务的流量应该如何调度和分发，这背后也有一套复杂的负载监控和均衡系统在起作用。</li><li>微服务的上线和下线是动态的，当一个新的微服务上线时，用户如何访问到新服务？这就需要一个统一的入口，新的服务可以动态的注册到这个入口上，用户每次访问时，可以从这个入口拿到所有服务的访问地址。这个统一的入口，也是需要系统单独提供的。</li><li>安全策略如何集中管理？系统故障如何快速跟踪到具体服务？整个系统状态如何监控？服务之间的依赖关系如何管理？  </li></ul><h1 id="3-单体和微服务的区别"><a href="#3-单体和微服务的区别" class="headerlink" title="3.单体和微服务的区别"></a>3.单体和微服务的区别</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><table><thead><tr><th style="text-align:center">方面</th><th style="text-align:center">单体</th><th style="text-align:center">微服务</th></tr></thead><tbody><tr><td style="text-align:center">体积</td><td style="text-align:center">大</td><td style="text-align:center">小</td></tr><tr><td style="text-align:center">职责</td><td style="text-align:center">繁杂</td><td style="text-align:center">单一</td></tr><tr><td style="text-align:center">耦合度</td><td style="text-align:center">高</td><td style="text-align:center">松</td></tr><tr><td style="text-align:center">独立部署运行和扩展</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">独立开发和演化</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">独立团队和自治</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr></tbody></table><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><table><thead><tr><th style="text-align:center">方面</th><th style="text-align:center">单体</th><th style="text-align:center">微服务</th></tr></thead><tbody><tr><td style="text-align:center">开发效率</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">技术选型</td><td style="text-align:center">不灵活</td><td style="text-align:center">灵活</td></tr><tr><td style="text-align:center">按需伸缩</td><td style="text-align:center">不灵活</td><td style="text-align:center">灵活</td></tr><tr><td style="text-align:center">部署</td><td style="text-align:center">不灵活</td><td style="text-align:center">灵活</td></tr><tr><td style="text-align:center">可维护性</td><td style="text-align:center">难</td><td style="text-align:center">易</td></tr><tr><td style="text-align:center">可扩展性</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">稳定性</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 亿级流量架构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>行香子（携手江村）</title>
      <link href="/poem/su-shi/xie_shou_jiang_cun/"/>
      <url>/poem/su-shi/xie_shou_jiang_cun/</url>
      <content type="html"><![CDATA[<blockquote><font size="5">行香子</font>  <p>苏轼（1037年1月8日—1101年8月24日）   &nbsp;&nbsp;宋神宗&nbsp;&nbsp;熙宁七年(1074年)&nbsp;&nbsp;春&nbsp;&nbsp;浙江桐庐&nbsp;&nbsp;37岁&nbsp;&nbsp;丹阳寄述古（杭州知州陈襄）<br></p><p>携手江村，梅雪飘裙。  </p><p>情何限、处处消魂。  </p><p>故人不见，旧曲重闻。</p><p>向望湖楼，孤山寺，涌金门。</p><a id="more"></a><p><br><br>寻常行处，题诗千首。  </p><p>绣罗衫、与拂红尘。  </p><p>别来相忆，知是何人。</p><p>有湖中月，江边柳，陇头云。 </p></blockquote><p>译文：</p><p>风景依稀，又是一年之春了。携手寻春游玩时正值梅花似雪，飘沾衣裙。<br>天空碧蓝，水色清明，山色天光尽入江水，波平如镜。<br>水中游鱼清晰可数，不时跃出明镜般的水面；水边沙洲白鹭点点，悠然自得。<br>白天溪水清澈而见沙底，清晓的溪水清冷而有霜意，月下的溪水好似是明亮的水晶宫。<br><br><br>两岸连山重重叠叠如画景，曲曲折折又似屏风。<br>不由得想起当年终老在此的严子陵。<br>而今皇帝和隐士也已如梦一般消失，只留下空名而已。<br>真正能永恒流传下来的又是什么呢？<br>只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。</p><p><img src="https://lilyssh.github.io/pic/yi_ye_zhou_qing.jpg" alt></p>]]></content>
      
      <categories>
          
          <category> 诗词赏析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宋词 </tag>
            
            <tag> 词 </tag>
            
            <tag> 苏轼 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何获取自定义注解使用者信息</title>
      <link href="/rpc/4-custom-annotation/"/>
      <url>/rpc/4-custom-annotation/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/84306592" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/84306592</a><br>项目源码地址：<a href="https://gitee.com/lilyssh/lilyssh-rpc" target="_blank" rel="noopener">https://gitee.com/lilyssh/lilyssh-rpc</a></p><h1 id="一、项目需求"><a href="#一、项目需求" class="headerlink" title="一、项目需求"></a>一、项目需求</h1><p>在启动项目时，获取自定义注解使用者的信息。</p><h1 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h1><p>工程 lilyssh-rpc 的结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── lrpc</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn</span><br><span class="line">│           │       └── lilyssh</span><br><span class="line">│           │           └── rpc</span><br><span class="line">│           │               ├── annotation</span><br><span class="line">│           │               │   └── LrpcService.java</span><br><span class="line">│           │               └── processor</span><br><span class="line">│           │                   └── AnnotationInitializeProcessor.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               ├── META-INF</span><br><span class="line">│               │   └── spring.factories</span><br><span class="line">│               └── application.yml</span><br><span class="line">├── pom.xml</span><br><span class="line">└── demo</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br><span class="line">        └── main</span><br><span class="line">            ├── java</span><br><span class="line">            │   └── cn</span><br><span class="line">            │       └── lilyssh</span><br><span class="line">            │           └── demo</span><br><span class="line">            │               ├── DemoApplication.java</span><br><span class="line">            │               └── service</span><br><span class="line">            │                   └── UserService.java</span><br><span class="line">            └── resources</span><br><span class="line">                └── application.yml</span><br></pre></td></tr></table></figure></p><p>lrpc是创建自定义注解的项目。demo是使用自定义注解的项目。</p><h1 id="三、lrpc项目："><a href="#三、lrpc项目：" class="headerlink" title="三、lrpc项目："></a>三、lrpc项目：</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-自定义注解"><a href="#2-自定义注解" class="headerlink" title="2. 自定义注解"></a>2. 自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc.annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LrpcService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-监听每个bean的注入"><a href="#3-监听每个bean的注入" class="headerlink" title="3. 监听每个bean的注入"></a>3. 监听每个bean的注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.rpc.annotation.LrpcService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationInitializeProcessor</span>  <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">//获取bean的class对象</span></span><br><span class="line">        Class&lt;? extends Object&gt; clazz = bean.getClass();</span><br><span class="line">        <span class="comment">//判断该bean是否用了LrpcService注解</span></span><br><span class="line">        LrpcService lrpcService = AnnotationUtils.findAnnotation(clazz, LrpcService.class);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=lrpcService)&#123;</span><br><span class="line">            System.out.println(<span class="string">"------------------------"</span>+bean.toString());</span><br><span class="line">            System.out.println(<span class="string">"^^^^^^^^^^^^^^^^^^^^^^^^"</span>+lrpcService.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"++++++++++++++++++++++++"</span>+bean.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扫描bean注入监听类"><a href="#4-扫描bean注入监听类" class="headerlink" title="4. 扫描bean注入监听类"></a>4. 扫描bean注入监听类</h2><p>在<code>resources/META-INF</code>下创建<code>spring.factories</code>，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  cn.lilyssh.rpc.processor.AnnotationInitializeProcessor</span><br></pre></td></tr></table></figure></p><h1 id="四、demo项目："><a href="#四、demo项目：" class="headerlink" title="四、demo项目："></a>四、demo项目：</h1><p>使用自定义注解的spring boot项目。</p><h2 id="1-引入依赖："><a href="#1-引入依赖：" class="headerlink" title="1. 引入依赖："></a>1. 引入依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lilyssh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-使用自定义注解："><a href="#2-使用自定义注解：" class="headerlink" title="2. 使用自定义注解："></a>2. 使用自定义注解：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.demo.service;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.rpc.annotation.LrpcService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LrpcService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、测试："><a href="#五、测试：" class="headerlink" title="五、测试："></a>五、测试：</h1><p>启动demo项目，会看到：<br><img src="https://resource.lilyssh.cn/pic/custom-annotation.png" alt><br>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Annotation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Netty的使用</title>
      <link href="/rpc/3-netty/"/>
      <url>/rpc/3-netty/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/84306563" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/84306563</a><br>项目源码地址：<a href="https://gitee.com/lilyssh/lilyssh-rpc" target="_blank" rel="noopener">https://gitee.com/lilyssh/lilyssh-rpc</a></p><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><p>用netty实现两个项目之间的通讯。</p><h1 id="一、Server端："><a href="#一、Server端：" class="headerlink" title="一、Server端："></a>一、Server端：</h1><h2 id="1-在pom-xml中添加以下依赖"><a href="#1-在pom-xml中添加以下依赖" class="headerlink" title="1. 在pom.xml中添加以下依赖"></a>1. 在pom.xml中添加以下依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.Alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-接收端："><a href="#2-接收端：" class="headerlink" title="2. 接收端："></a>2. 接收端：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.ReferenceCountUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//根据给定的字符串内容创建一个ByteBuf。</span></span><br><span class="line">        <span class="keyword">final</span> ByteBuf buf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(<span class="string">"Hi!\r\n"</span>, Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1)、初始化用于Acceptor的主"线程池"以及用于I/O工作的从"线程池"；</span></span><br><span class="line">        <span class="comment">//NioEventLoopGroup可以理解为一个线程池，内部维护了一组线程，每个线程负责处理多个Channel上的事件，而一个Channel只对应于一个线程，这样可以回避多线程下的数据同步问题。默认的线程数目是 CPU 核数 × 2。</span></span><br><span class="line">        EventLoopGroup group=<span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//(2)、ServerBootstrap负责初始化netty服务器，并且开始监听端口的socket请求。</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//(3)、通过ServerBootstrap的group方法，设置（1）中初始化的主从"线程池"；</span></span><br><span class="line">            serverBootstrap.group(group)</span><br><span class="line">                    <span class="comment">//(4)、 指定通道channel的类型，由于是服务端，故而是NioServerSocketChannel；</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .localAddress(<span class="keyword">new</span> InetSocketAddress(<span class="number">2222</span>))</span><br><span class="line">                    <span class="comment">//(5)、 设置子通道也就是SocketChannel的处理器， 其内部是实际业务开发的"主战场"</span></span><br><span class="line">                    .childHandler(</span><br><span class="line">                    <span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            channel.pipeline().addLast(<span class="keyword">new</span> ChannelHandlerAdapter()&#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">                                    ByteBuf in = (ByteBuf) msg;</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        <span class="keyword">while</span> (in.isReadable()) &#123;</span><br><span class="line">                                            System.out.print((<span class="keyword">char</span>) in.readByte());</span><br><span class="line">                                            System.out.flush();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                        ReferenceCountUtil.release(msg);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//(6)、 绑定并侦听某个端口</span></span><br><span class="line">            ChannelFuture f = serverBootstrap.bind().sync();</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-调用、启动："><a href="#3-调用、启动：" class="headerlink" title="3. 调用、启动："></a>3. 调用、启动：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.receiver.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        receiver.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Client端："><a href="#二、Client端：" class="headerlink" title="二、Client端："></a>二、Client端：</h1><h2 id="1-在pom-xml中添加以下依赖-1"><a href="#1-在pom-xml中添加以下依赖-1" class="headerlink" title="1. 在pom.xml中添加以下依赖"></a>1. 在pom.xml中添加以下依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.Alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-发送端："><a href="#2-发送端：" class="headerlink" title="2. 发送端："></a>2. 发送端：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//worker负责读写数据</span></span><br><span class="line">        EventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">//设置线程池</span></span><br><span class="line">            b.group(worker);</span><br><span class="line">            <span class="comment">//设置socket工厂</span></span><br><span class="line">            b.channel(NioSocketChannel.class);</span><br><span class="line">            b.option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//设置管道</span></span><br><span class="line">            b.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">//获取管道</span></span><br><span class="line">                    ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">                    <span class="comment">//字符串解码器</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                    <span class="comment">//字符串编码器</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                    <span class="comment">//处理类</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> ClientHandler4());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//发起异步连接操作</span></span><br><span class="line">            ChannelFuture futrue = b.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">2222</span>)).sync();</span><br><span class="line">            <span class="comment">//等待客户端链路关闭</span></span><br><span class="line">            futrue.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//优雅的退出，释放NIO线程组</span></span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientHandler4</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受服务端发来的消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"server response ： "</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与服务器建立连接</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//给服务器发消息</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="string">"i am client !"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"channelActive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与服务器断开连接</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelInactive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭管道</span></span><br><span class="line">        ctx.channel().close();</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-调用、启动：-1"><a href="#3-调用、启动：-1" class="headerlink" title="3. 调用、启动："></a>3. 调用、启动：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sender sender = <span class="keyword">new</span> Sender();</span><br><span class="line">        sender.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会看到客户端regisry控制台打印了：channelActive，服务端lrpc控制台打印了：i am client !。<br>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义RPC框架实战(二) 实现</title>
      <link href="/rpc/2-rpc-implement/"/>
      <url>/rpc/2-rpc-implement/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/84306533" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/84306533</a><br>项目源码地址：<a href="https://gitee.com/lilyssh/lilyssh-rpc" target="_blank" rel="noopener">https://gitee.com/lilyssh/lilyssh-rpc</a></p><h1 id="一、创建项目："><a href="#一、创建项目：" class="headerlink" title="一、创建项目："></a>一、创建项目：</h1><p>我们需要写三个项目：注册中心registry、rpc框架lrpc 和 使用lrpc的demo项目。demo和registry都是<code>Spring Boot</code>项目，lrpc是一个<code>jar</code>包，demo引用lrpc的<code>jar</code>包，使lrpc嵌入到demo里，这样启动demo时lrpc就会把服务信息捞出来，封装成lrpc和registry约定好的<code>json</code>格式字符串，通过<code>netty</code>发送给registry。  </p><p><code>pom.xml</code>中引入插件时，如果是<code>Spring Boot</code>项目，就用<code>Spring Boot</code>的<code>Maven</code>插件（<code>spring-boot-maven-plugin</code>），它能够将<code>Spring Boot</code>应用打包为可执行的<code>jar</code>或<code>war</code>文件，然后以通常的方式运行<code>Spring Boot</code>应用。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>非<code>spring boot</code>项目，就用原装<code>maven</code>插件：<code>maven-compiler-plugin</code>，<code>maven</code>是个项目管理工具，如果我们不告诉它我们的代码要使用什么样的<code>jdk</code>版本编译的话，它就会用<code>maven-compiler-plugin</code>默认的<code>jdk</code>版本来进行处理，这样就容易出现版本不匹配，以至于可能导致编译不通过的问题。<code>maven</code>的默认编译使用的jdk版本貌似很低，使用<code>maven-compiler-plugin</code>插件可以指定项目源码的jdk版本，编译后的<code>jdk</code>版本，以及编码。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="二、注册服务"><a href="#二、注册服务" class="headerlink" title="二、注册服务"></a>二、注册服务</h1><ul><li>暴露本地服务</li><li>暴露远程服务</li><li>启动netty</li><li>连接zookeeper</li><li>到zookeeper注册</li><li>监听zookeeper</li></ul><p>为什么会有本地暴露和远程暴露呢？在dubbo中一个服务可能既是Provider，又是Consumer，因此就存在他自己调用自己服务的情况，如果再通过网络去访问，那自然是舍近求远，因此要有本地暴露服务。两者的区别：</p><ul><li>本地暴露是暴露在JVM中,不需要网络通信。</li><li>远程暴露是将ip,端口等信息暴露给远程客户端,调用时需要网络通信。</li></ul><h2 id="1-在lrcp中通过netty发送信息给registry，registry接受字符串。"><a href="#1-在lrcp中通过netty发送信息给registry，registry接受字符串。" class="headerlink" title="1.在lrcp中通过netty发送信息给registry，registry接受字符串。"></a>1.在lrcp中通过<code>netty</code>发送信息给registry，registry接受字符串。</h2><p>为什么选择<code>netty</code>呢，因为它并发高，传输快，封装好。<code>Netty</code>是一款基于<code>NIO</code>（<code>Nonblocking I/O</code>，非阻塞IO）开发的网络通信框架，对比于<code>BIO</code>（<code>Blocking I/O</code>，阻塞IO），他的并发性能得到了很大提高。<br>具体实现请参考： <a href="https://lilyssh.cn/rpc/3-netty/">https://lilyssh.cn/rpc/3-netty/</a></p><h2 id="2-在lrcp中写个自定义注解，包装服务，如-LrpcService。扫描到这些的时候，就自动捞取了。"><a href="#2-在lrcp中写个自定义注解，包装服务，如-LrpcService。扫描到这些的时候，就自动捞取了。" class="headerlink" title="2.在lrcp中写个自定义注解，包装服务，如@LrpcService。扫描到这些的时候，就自动捞取了。"></a>2.在lrcp中写个自定义注解，包装服务，如@LrpcService。扫描到这些的时候，就自动捞取了。</h2><p>具体实现请参考： <a href="https://lilyssh.cn/rpc/4-custom-annotation/">https://lilyssh.cn/rpc/4-custom-annotation/</a></p><h2 id="3-使用socket进行通讯，与netty对比效率。"><a href="#3-使用socket进行通讯，与netty对比效率。" class="headerlink" title="3. 使用socket进行通讯，与netty对比效率。"></a>3. 使用socket进行通讯，与netty对比效率。</h2><p>spring boot 在启动时，会对每个类进行扫描，每扫描到有自定义注解@LrpcService时，就由lrcp主动推送给registry。</p>]]></content>
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义RPC框架实战(一) 设计思路</title>
      <link href="/rpc/1-rpc-design/"/>
      <url>/rpc/1-rpc-design/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/84306486" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/84306486</a><br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a>：</p><h1 id="一、缘由"><a href="#一、缘由" class="headerlink" title="一、缘由"></a>一、缘由</h1><p>学习rpc原理，锻炼自己设计能力。</p><h1 id="二、功能"><a href="#二、功能" class="headerlink" title="二、功能"></a>二、功能</h1><ul><li>服务端功能</li></ul><ol><li>服务注册</li><li>服务发现</li><li>定时接收客户端服务心跳</li><li>容错处理</li><li>集群</li><li>负载均衡</li><li>地址路由</li><li>服务监控<br>服务治理</li></ol><ul><li>消费端功能：</li></ul><ol><li>获取服务<h1 id="三、RPC系统架构设计"><a href="#三、RPC系统架构设计" class="headerlink" title="三、RPC系统架构设计"></a>三、RPC系统架构设计</h1>RPC（即Remote Procedure Call，远程过程调用），指的是对网络上另外一个计算机上的，某段特定的函数代码的调用。<br><img src="https://resource.lilyssh.cn/pic/dubbo-architecture.png" alt></li></ol><h2 id="1-注册中心："><a href="#1-注册中心：" class="headerlink" title="1. 注册中心："></a>1. 注册中心：</h2><p>首先得写一个注册中心服务，主要功能如下：<br>(1) 存储服务实例列表。<br>(2) 负载均衡。<br>(3) 服务实例健康监测。可动态增减服务提供者。<br><img src="https://resource.lilyssh.cn/pic/rpc_health.png" alt></p><h2 id="2-服务注册："><a href="#2-服务注册：" class="headerlink" title="2. 服务注册："></a>2. 服务注册：</h2><p>(1) 服务提供者向注册中心注册其提供的服务。<br>(2) 服务消费者向注册中心获取服务提供者地址列表，通过负载均衡的算法选择服务提供者。<br>A服务要调用B服务中的接口，直连也可以，通过注册中心也可以，如果是后者的话首先B服务要在注册中心注册服务，得告诉A服务以下信息：</p><ul><li>ip + port：因为是用netty调用，所以需要提供。</li><li>application：告诉A服务可调用的服务是什么名，如order-provider。</li><li>interface：告诉A服务，api接口是什么，如xxService。</li><li>methods：告诉A服务可调用的方法列表是什么。<br>所以要把这些信息放进注册中心，A服务才能找到B服务。<br><img src="https://resource.lilyssh.cn/pic/loadbalance.png" alt><h2 id="3-服务发现："><a href="#3-服务发现：" class="headerlink" title="3. 服务发现："></a>3. 服务发现：</h2>假如把order-provider部署在三个机子上，就会有三个不同ip的地址注册进注册中心，消费者调用的时候，注册中心查了一下，application叫order-provider的有三个，就根据负载均衡策略，选择合适的机子，给它调用。这就是服务注册为什么要这个服务名的原因，为了服务发现用的。<br>调用服务时，A服务通过socket给B服务的socket服务发送JSON字符串，内容包含要调用的方法和入参。<h2 id="4-健康检查"><a href="#4-健康检查" class="headerlink" title="4. 健康检查"></a>4. 健康检查</h2>监控服务的健康状态，是否可用。每个服务每分钟向注册中心发送心跳，注册中心在1分钟内收到心跳，视为正常，超过1分钟没收到心跳，视为服务宕掉了，先从服务列表中剔除掉该实例，剔除后，调用者调用服务时，负载算法时 就不会把该服务实例算进去了。等服务健康后，再加入进来。</li></ul><p>负载均衡策略，可以每个服务自己控制，每个服务里都得有个监控器，监控所有服务是否健康，缺点是会有点沉重，好处一是可以把压力分摊到每个服务器上。二是不依赖注册中心， 自己就可以找到对应的服务，就算服务挂了，不影响其他服务的RPC交互。<br>这个监控器也可以放在注册中心，单独管理。</p><p>实现过程请参考下一篇文章：<a href="https://lilyssh.cn/rpc/2-rpc-implement/">https://lilyssh.cn/rpc/2-rpc-implement/</a><br>在实现过程中，会不断完善此设计文档。</p>]]></content>
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(十二) 电商项目使用Kafka前后性能对比测试</title>
      <link href="/architecture/12-kafka-test/"/>
      <url>/architecture/12-kafka-test/</url>
      <content type="html"><![CDATA[<p>// TODO 未完待续。。<br><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a> 2.0.0。<br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>为了了解lilyssh电商系统，使用kafka前后有什么区别，我们来整个测试方案测试一下。</p><h1 id="二、测试目标："><a href="#二、测试目标：" class="headerlink" title="二、测试目标："></a>二、测试目标：</h1><p>测试接口：下单。</p><ul><li>使用Kafka前：  </li></ul><ol><li>每秒并发量一万的情况下，会出现什么问题。</li></ol><ul><li>使用Kafka后：</li></ul><ol><li>每秒并发量一万的情况下，是否还会出现问题。<br>为了了解kafka是否符合这个业务场景，我们有没有更优选择，所以需要再测试下以下几点：</li><li>在规定时间内，能接受的最大消息数，如1分钟。</li><li>在规定时间内，能消费的最大消息数，如1分钟。</li></ol><h1 id="二、测试环境说明"><a href="#二、测试环境说明" class="headerlink" title="二、测试环境说明"></a>二、测试环境说明</h1><h2 id="（1）软硬件环境"><a href="#（1）软硬件环境" class="headerlink" title="（1）软硬件环境"></a>（1）软硬件环境</h2><table><thead><tr><th>软件名称</th><th>数量（台）</th><th>质量</th></tr></thead><tbody><tr><td>a</td><td>b</td><td>c</td></tr></tbody></table><h2 id="（2）测试准备"><a href="#（2）测试准备" class="headerlink" title="（2）测试准备"></a>（2）测试准备</h2><h3 id="1）测试参考"><a href="#1）测试参考" class="headerlink" title="1）测试参考"></a>1）测试参考</h3><h3 id="2）测试环境"><a href="#2）测试环境" class="headerlink" title="2）测试环境"></a>2）测试环境</h3><h3 id="3）测试平台"><a href="#3）测试平台" class="headerlink" title="3）测试平台"></a>3）测试平台</h3><h3 id="4）测试数据"><a href="#4）测试数据" class="headerlink" title="4）测试数据"></a>4）测试数据</h3><h3 id="5）测试案例"><a href="#5）测试案例" class="headerlink" title="5）测试案例"></a>5）测试案例</h3><h3 id="6）测试工具"><a href="#6）测试工具" class="headerlink" title="6）测试工具"></a>6）测试工具</h3><p>Jmeter</p><h2 id="（3）测试分工"><a href="#（3）测试分工" class="headerlink" title="（3）测试分工"></a>（3）测试分工</h2><h2 id="（4）测试范围"><a href="#（4）测试范围" class="headerlink" title="（4）测试范围"></a>（4）测试范围</h2><h3 id="1）功能"><a href="#1）功能" class="headerlink" title="1）功能"></a>1）功能</h3><h3 id="2）接口"><a href="#2）接口" class="headerlink" title="2）接口"></a>2）接口</h3><h3 id="3）兼容"><a href="#3）兼容" class="headerlink" title="3）兼容"></a>3）兼容</h3><h3 id="4）性能"><a href="#4）性能" class="headerlink" title="4）性能"></a>4）性能</h3><h3 id="5）安全"><a href="#5）安全" class="headerlink" title="5）安全"></a>5）安全</h3><h3 id="6）安装"><a href="#6）安装" class="headerlink" title="6）安装"></a>6）安装</h3><h3 id="7）埋点"><a href="#7）埋点" class="headerlink" title="7）埋点"></a>7）埋点</h3><h3 id="8）稳定性"><a href="#8）稳定性" class="headerlink" title="8）稳定性"></a>8）稳定性</h3><h2 id="（5）测试风险"><a href="#（5）测试风险" class="headerlink" title="（5）测试风险"></a>（5）测试风险</h2><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> 测试 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(十一) Spring Boot集Kafka及Kafka测试</title>
      <link href="/architecture/11-spring-boot-integration-kafka/"/>
      <url>/architecture/11-spring-boot-integration-kafka/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/83346324" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/83346324</a>  </p><p>Spring Boot 2.0.4 集成 <a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a> 2.0.0。<br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>kafka是一种高吞吐量的分布式发布订阅消息系统。kafka对消息保存时根据Topic进行归类，发送消息者成为Producer,消息接受者成为Consumer,此外kafka集群有多个kafka实例组成，每个实例(server)成为broker。无论是kafka集群，还是producer和consumer都依赖于zookeeper来保证系统可用性集群保存一些meta信息。<br>Kafka的安装请参考文章：<a href="https://lilyssh.cn/architecture/10-kafka-install/">Kafka的安装与使用</a>。</p><h1 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h1><h2 id="（1）添加依赖"><a href="#（1）添加依赖" class="headerlink" title="（1）添加依赖"></a>（1）添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="（2）在application-yml中添加配置"><a href="#（2）在application-yml中添加配置" class="headerlink" title="（2）在application.yml中添加配置"></a>（2）在<code>application.yml</code>中添加配置</h2><p>官方文档说只要配置两个必要项就可以了，spring.kafka.consumer.group-id和spring.kafka.consumer.auto-offset-reset。此处对其他配置稍作解释。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  kafka:</span></span><br><span class="line">    <span class="comment"># 指定kafka代理地址，brokers集群。</span></span><br><span class="line"><span class="attr">    bootstrap-servers:</span> <span class="string">ssh.qianxunclub.com:9092</span></span><br><span class="line"><span class="attr">    producer:</span></span><br><span class="line">      <span class="comment"># 发送失败重试次数。</span></span><br><span class="line"><span class="attr">      retries:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 每次批量发送消息的数量 批处理条数：当多个记录被发送到同一个分区时，生产者会尝试将记录合并到更少的请求中。这有助于客户端和服务器的性能。</span></span><br><span class="line"><span class="attr">      batch-size:</span> <span class="number">16384</span></span><br><span class="line">      <span class="comment"># 32MB的批处理缓冲区。</span></span><br><span class="line"><span class="attr">      buffer-memory:</span> <span class="number">33554432</span></span><br><span class="line">      <span class="comment"># 指定消息key和消息体的编解码方式。</span></span><br><span class="line"><span class="attr">      key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="attr">      value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="attr">    consumer:</span></span><br><span class="line">      <span class="comment"># 消费者群组ID，发布-订阅模式，即如果一个生产者，多个消费者都要消费，那么需要定义自己的群组，同一群组内的消费者只有一个能消费到消息。</span></span><br><span class="line"><span class="attr">      group-id:</span> <span class="string">kafka_order_group</span></span><br><span class="line"><span class="attr">      auto-offset-reset:</span> <span class="string">earliest</span></span><br><span class="line">      <span class="comment"># 如果为true，消费者的偏移量将在后台定期提交。</span></span><br><span class="line"><span class="attr">      enable-auto-commit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 自动提交周期</span></span><br><span class="line"><span class="attr">      auto-commit-interval:</span> <span class="number">100</span></span><br><span class="line">      <span class="comment"># 指定消息key和消息体的编解码方式。</span></span><br><span class="line"><span class="attr">      key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="attr">      value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br></pre></td></tr></table></figure></p><h2 id="（3）消息发送类"><a href="#（3）消息发送类" class="headerlink" title="（3）消息发送类"></a>（3）消息发送类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.common.kafka.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaSender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;</span><br><span class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> GsonBuilder().create();</span><br><span class="line">    <span class="comment">//发送消息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String topic,String key,Object message)</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(topic,key,gson.toJson(message));</span><br><span class="line">        log.info(<span class="string">"+++++++++++++++++++++  message = &#123;&#125;"</span>, gson.toJson(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处关键代码为<code>kafkaTemplate.send()</code>，参数topic是<code>Kafka</code>里的<code>topic</code>，这个<code>topic</code>在 Java程序中是不需要提前在<code>Kafka</code>中设置的，因为它会在发送的时候自动创建你设置的<code>topic</code>， gson.toJson(message)是消息内容。</p><h2 id="（4）在下单业务中调用消息发送"><a href="#（4）在下单业务中调用消息发送" class="headerlink" title="（4）在下单业务中调用消息发送"></a>（4）在下单业务中调用消息发送</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.common.kafka.provider.KafkaSender;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.model.request.OrderInsertReq;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.service.OrderServiceApi;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.entity.OrderEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> <span class="keyword">implements</span> <span class="title">OrderServiceApi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> KafkaSender kafkaSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到kafka</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderInsertReq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveByKafka</span><span class="params">(OrderInsertReq orderInsertReq)</span></span>&#123;</span><br><span class="line">        OrderEntity orderEntity=<span class="keyword">new</span> OrderEntity();</span><br><span class="line">        <span class="comment">//直接写入数据库太慢，引起dubbo超时，导致调用多次，此处需要改造成kafka异步写入。</span></span><br><span class="line">        BeanUtils.copyProperties(orderInsertReq,orderEntity);</span><br><span class="line">        kafkaSender.send(<span class="string">"placeOrder"</span>, orderEntity.getUserId().toString(), orderEntity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（5）消息接收类"><a href="#（5）消息接收类" class="headerlink" title="（5）消息接收类"></a>（5）消息接收类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.provider.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.entity.OrderEntity;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.repository.OrderRepository;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听下单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = &#123;<span class="string">"placeOrder"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String orderEntityStr)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"------------------ orderEntityStr ="</span> + orderEntityStr);</span><br><span class="line">        Gson gs = <span class="keyword">new</span> Gson();</span><br><span class="line">        OrderEntity orderEntity = gs.fromJson(orderEntityStr,OrderEntity.class);<span class="comment">//把JSON字符串转为对象</span></span><br><span class="line">        orderRepository.save(orderEntity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收消息直接用<code>@KafkaListener</code>注解即可，并在监听中设置监听的<code>topic</code>，<code>topics</code>是一个数组所以是可以绑定多个主题的，如@KafkaListener(topics = {“topicA”,”topicB”})。这里的<code>topic</code>需要和消息发送类 KafkaSender.java中设置的<code>topic</code>一致。</p><p>spring.kafka.bootstrap-servers 后面设置你安装的<code>Kafka</code>的机器IP地址和端口号<code>9092</code>。</p><h1 id="三、启动Kafka服务"><a href="#三、启动Kafka服务" class="headerlink" title="三、启动Kafka服务"></a>三、启动Kafka服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh  config/server.properties</span><br></pre></td></tr></table></figure><p><code>千万注意</code>： 记得将你的虚拟机或者服务器关闭防火墙或者开启<code>Kafka</code>的端口<code>9092</code>。</p><h1 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h1><p>启动order-provider，调用下单接口,可以看到下单成功。<br>我们来看下<code>Kafka</code>中的<code>topic</code>列表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure></p><p>会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__consumer_offsets</span><br><span class="line">placeOrder</span><br></pre></td></tr></table></figure></p><p>接下来，我们来测试下kafka的消费能力。<br>我们把 OrderService 改造一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.common.kafka.provider.KafkaSender;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.model.request.OrderInsertReq;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.service.OrderServiceApi;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.entity.OrderEntity;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> <span class="keyword">implements</span> <span class="title">OrderServiceApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> KafkaSender kafkaSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每两秒，新建五百个下单线程，一分钟后停止，查看kafka每秒是否能消费250条数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveByKafka</span><span class="params">(OrderInsertReq orderInsertReq)</span></span>&#123;</span><br><span class="line">        OrderEntity orderEntity=<span class="keyword">new</span> OrderEntity();</span><br><span class="line">        <span class="comment">//直接写入数据库太慢，引起dubbo超时，导致调用多次，此处需要改造成kafka异步写入。</span></span><br><span class="line">        BeanUtils.copyProperties(orderInsertReq,orderEntity);</span><br><span class="line">        System.out.println(<span class="string">"预备备！开始！"</span>);</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> MyTask(timer), <span class="number">0</span>, <span class="number">2000</span>);  <span class="comment">//任务等待0秒后开始执行，之后每2秒执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//任务：每次新建五百个下单线程。</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Timer timer;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(Timer timer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.timer = timer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> second = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"~~~第"</span>+second+<span class="string">"秒~~~"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">                AddOrder addOrder=<span class="keyword">new</span> AddOrder();</span><br><span class="line">                Thread thread=<span class="keyword">new</span> Thread(addOrder);</span><br><span class="line">                thread.start();</span><br><span class="line">            &#125;</span><br><span class="line">            second++;</span><br><span class="line">            <span class="keyword">if</span>( second == <span class="number">30</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.timer.cancel();</span><br><span class="line">                System.out.println(<span class="string">"#### 程序结束 ####"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下单线程</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AddOrder</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            OrderEntity orderEntity = <span class="keyword">new</span> OrderEntity();</span><br><span class="line">            orderEntity.setUserId(<span class="number">753</span>);</span><br><span class="line">            orderEntity.setPayment(<span class="keyword">new</span> BigDecimal(<span class="number">928.23</span>));</span><br><span class="line">            orderEntity.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">            kafkaSender.send(<span class="string">"placeOrder"</span>, orderEntity.getUserId().toString(), orderEntity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果毫无压力！</p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Kafka </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx认识nginx.conf配置文件</title>
      <link href="/reproduce/nginx.conf-introduce/"/>
      <url>/reproduce/nginx.conf-introduce/</url>
      <content type="html"><![CDATA[<p>转载：<a href="https://blog.csdn.net/rth362147773/article/details/78837971" target="_blank" rel="noopener">https://blog.csdn.net/rth362147773/article/details/78837971</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>nginx.conf文件是放在conf目录下的一个配置文件。这个是Nginx服务器的主配置文件。通过指令来配置这个文件能达到控制nginx，实现反向代理，负载均衡，也是nginx入门的基础。读懂使用nginx.conf文件是这篇文章写作目的。<br><a id="more"></a></p><h1 id="nginx-conf文件的结构"><a href="#nginx-conf文件的结构" class="headerlink" title="nginx.conf文件的结构"></a>nginx.conf文件的结构</h1><p>首先介绍文件的架构，整个conf文件分为 全局块、events块、http块、server块、location块。每个块有每个块的作用域，越外层的块作用域就包含内部块的作用域，如全局块作用域就包含events块、http块、server块和location块。而文件中的“#”代表注析，#后的代码是不会有效果的。修改nginx.conf后是必须重启nginx才会生效。这些要注意。<br>下面就看文件架构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...                 #全局块</span><br><span class="line"></span><br><span class="line">event&#123;              #events块</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;               #http块</span><br><span class="line"></span><br><span class="line">    server&#123;         #server块</span><br><span class="line">        ...         #server全局块</span><br><span class="line"></span><br><span class="line">        location&#123;   #location块</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location&#123;   #location块</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server&#123;         #server块</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...             #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大致的nginx.conf文件如上，而下面讲解各块的作用。</p><table><thead><tr><th>名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>全局块</td><td style="text-align:left">全局块是默认配置文件从开始到events块之间的一部分内容，主要是设置一些影响Nginx服务器整体运行的配置指令。因此，这些指令的作用域是Nginx服务器全局。作用：配置Ngnix服务器的用户组、worker process数、Nginx进程PID存放路径、日志的存放路径和类型已经配置文件引入等。</td></tr><tr><td>events块</td><td style="text-align:left">events块的指令主要影响Nginx服务器与用户的网络链接。 作用：是否开启多worker process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取那种事件驱动模型处连接请求，每个worker process可以同时支持的最大连接数等。</td></tr><tr><td>http块</td><td style="text-align:left">http块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这模块中。作用包括：文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单连接请求数上限等。</td></tr><tr><td>server块</td><td style="text-align:left">server块，虚拟主机（虚拟服务器）。作用：使得Nginx服务器可以在同一台服务器上至运行一组Nginx进程，就可以运行多个网站。</td></tr><tr><td>location块</td><td style="text-align:left">location块是server块的一个指令。作用：基于Nginx服务器接收到的请求字符串，虚拟主机名称（ip，域名）、url匹配，对特定请求进行处理。</td></tr></tbody></table><h1 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h1><p>日常我们使用到的配置如下，这些都是常用的指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#### 全局块 开始 ####</span><br><span class="line">user nobody nobody;                 #配置允许运行nginx服务器的用户和用户组</span><br><span class="line">worker_processes 3;                 #配置允许nginx进程生产的worker process数</span><br><span class="line">error_log logs/error.log;           #配置nginx服务器运行对错误日志存放路径</span><br><span class="line">pid nginx.pid;                      #配置nginx服务器运行时的pid文件存放路径和名称</span><br><span class="line">#### 全局块 结束 ####</span><br><span class="line"></span><br><span class="line">#### events块 开始 ####</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    ues epoll;                      #配置事件驱动模型</span><br><span class="line">    worker_connections 1024;        #配置最大连接数</span><br><span class="line">&#125;</span><br><span class="line">#### events块 结束 ####</span><br><span class="line"></span><br><span class="line">#### http块 开始 ####</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    include mime.types;             #定义MIME-Type</span><br><span class="line">    default_type application/octet-stream;   </span><br><span class="line">    sendfile on；                   #配置允许使用sendfile方式传输</span><br><span class="line">    keepalive_timeout 65;           #配置连接超时时间</span><br><span class="line">    log_format access.log &apos;$remote_addr-[$time_local]-&quot;$request&quot;-&quot;$http_user_agent&quot;&apos;;     #配置请求处理日志的格式</span><br><span class="line"></span><br><span class="line">    #### server块 开始 ####</span><br><span class="line">    ##配置虚拟主机 myServerl</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        listen  8081;              #配置监听端口和主机名称</span><br><span class="line">        server_name myServer1;</span><br><span class="line"></span><br><span class="line">        access_log  /myweb/server1/logaccess.log;#配置请求处理日志存放路径</span><br><span class="line">        error_page 404  /404.html;     #配置错误页面</span><br><span class="line"></span><br><span class="line">        location  /server1/location1 &#123; #配置处理／server1/location1 请求的location</span><br><span class="line">            root  /myweb;</span><br><span class="line">            index index.svr1-loc1.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location  /server1/location2 &#123; #配置处理／server1/location2 请求的location</span><br><span class="line">            root  /myweb;</span><br><span class="line">            index index.svr1-loc2.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        listen  8082;</span><br><span class="line">        server_name  192.168.1.3;</span><br><span class="line">        access_log  /myweb/server2/log/access.log;</span><br><span class="line">        error_log  404  /404.html;    #对错误页面404.html 做了定向配置</span><br><span class="line">        location  /server2/location1 </span><br><span class="line">        &#123;</span><br><span class="line">            root  /myweb;</span><br><span class="line">            index index.svr2-loc1.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location  /svr2/loc2 </span><br><span class="line">        &#123;</span><br><span class="line">            alias  /myweb/server2/location2;       #对location的URL进行更改</span><br><span class="line">            index index.svr2-loc1.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location = ／404.html                  #配置错误页面转向</span><br><span class="line">        &#123;</span><br><span class="line">            root  /myweb/;</span><br><span class="line">            index 404.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #### server块 结束 ####</span><br><span class="line">&#125;</span><br><span class="line">### http块 结束 ####</span><br></pre></td></tr></table></figure><table><thead><tr><th>指令</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>user user [group]</td><td style="text-align:left">用于配置允许Nginx服务器用户（组）。user,指可以运行Nginx服务器的用户。group，指可以运行Nginx服务器的用户组。通常设置：user nobody nobody</td></tr><tr><td>worker process number/auto</td><td style="text-align:left">Nginx服务器实现并发处理服务关键，设置值越大并发处理量也就越多，但也受到软硬件制约。number,指Nginx进程最多可以产生worker process数。auto,Nginx进程自动检测。默认设置为1。</td></tr><tr><td>pid file</td><td style="text-align:left">Nginx进程作为系统的守护进程运行，我们需要在某文件中保存当前运行程序的主进程号。Nginx支持对它的存放路径进行自定义配置，指令时pid。如pid sbin／web_nginx</td></tr><tr><td>error_log file</td><td style="text-align:left">配置错误日志存放路径，全局块、http块和server块中都可以对日志进行相关配置。如：error_log logs/error.log error</td></tr><tr><td>incloud file</td><td style="text-align:left">配置文件的引入，引入其他Nginx配置或者第三方模块的配置。如：include mime.types</td></tr><tr><td>accept_mutex on/off</td><td style="text-align:left">设置网络连接的序列化，当某一个时刻只有一个网络连接来时，多个睡眠进程会被同时叫醒，但只有一个进程能接。如果每次呼醒的进程数目太多，会影响一部分系统性能。为了解决这个问题，Nginx配置accept_mutex，当开启的时候，对Nginx进程接收连接进行序列化，防止多个进程对连接的争强。只能在events块配置。</td></tr><tr><td>accept_accept on/off</td><td style="text-align:left">设置是否允许同时接收多个网络连接，这个是配置worker process是否允许同时接收多个连接。</td></tr><tr><td>use method</td><td style="text-align:left">事件驱动模型选择，强制Nginx服务器选择那种事件驱动模型进行消息处理。method:select、poll、kqueue、epoll、rtsig、／dev／poll 以及eventport。此指令智能在events块中配置。</td></tr><tr><td>woker_connections number</td><td style="text-align:left">配置最大连接数，设置允许每一个worker process同时开启的最大连接数。默认为512。只能在events块中配置。</td></tr><tr><td>default_type mime-type</td><td style="text-align:left">在浏览器中，显示内容HTML、XML、GIF和Flash等种类繁多的文本、媒体等资源，浏览器为了区分这些资源，需要使用MIME Type。MIME Type是网络资源的媒体类型。Nginx服务器作为Web服务器，必须能够识别前端请求的资源类型。配置如：include mime.types; default_type application/octet-stream;在http块、server块或者location块进行配置。</td></tr><tr><td>access_log path[format[buffer=size]]</td><td style="text-align:left">服务日志定义，此处定义所指日志与常规的不同，记录Nginx服务器提供服务过程应答前端请求的日志。可以对服务日志进行格式定义。配置如：log_format exampleLog ‘remoteaddr−[remoteaddr−[remote_addr - [time_local] requestrequestrequest status bodybytessentbodybytessentbody_bytes_sent http_referer $http_user_agent’输出：192.168.1.102 - [31/Oct/2011:20:41:29 +0800] “GET/HTTP/1.1” 200 151 “-” “Mozilla/5.0(compatible;MSIE 10.0;Window NT 6.2; Trident/6.0)”</td></tr><tr><td>sendfile on/off</td><td style="text-align:left">配置允许sendfile方式传输文件，在Apache、lighttd等Web服务器配置中，都有和sendfile相关的配置。用于开启或者关闭sendfile传输文件。默认为off。在http块、server块或者location块进行配置。</td></tr><tr><td>sendfile_max_chunk size</td><td style="text-align:left">worker process每次调用sendfile传输的数据量最大不能超过这个值。默认为0。在http块、server块或location块中配置。和sendfile指令一起使用。</td></tr><tr><td>keepalive_timeout timeout[header_timeout]</td><td style="text-align:left">配置连接超时时间，与用户建立会话连接后，Nginx服务器保持这些连接打开一段时间。此指令设置时间。timeout,服务器端对连接的保持时间。默认值为75s。header_tiemout,可选项，在应答报文头部Keep-Alive域设置超时时间。该指令被Mozilla或者Konqueror识别。配置如：keepalive_timeout 120s 100s;此指令在http块、server块或location块中配置。</td></tr><tr><td>keepalive_requests number</td><td style="text-align:left">单连接请求数上限，用户端和服务端建立连接后，用于限制用户通过某一连接向Nginx服务器发送请求的次数。在server块和location块中，默认设置100。</td></tr><tr><td>listen address[:port][default_server][setfib=number][backlog=number][rcvbuf=size][sndbuf=size][deferred]</td><td style="text-align:left">配置监听使用指令listen。address,IP地址，如果有IPv6的地址，需要使用中括号“[]”括起来，比如[fe80::1]等port,端口号，如果只定义IP地址没有定义端口号，就使用80端口。path，socket文件路径，如／var/run/nginx.sock等default_server，标识符，将此虚拟主机设置为address:port的默认主机。配置如：listen :80 / :8000;listen 192.168.1.10:8000;listen 192.168.1.10;listen 8000;listen 192.168.1.10 default_server backlog=1024;</td></tr><tr><td>server_name name…</td><td style="text-align:left">基于名称的虚拟主机配置，主机指server块虚拟主机。设置主机名称并配置号DNS，用户就可以使用这个名词向此虚拟主机请求了。配置如：server_name myserver.com <a href="http://www.myserver.com" target="_blank" rel="noopener">www.myserver.com</a></td></tr><tr><td>location [ = / ~ / ~* / ^~ ] url</td><td style="text-align:left">配置location，匹配成功，就继续执行下面命令。”=”,用于标准url前,要求请求字符串与url严格匹配。”～”,用于表示URL包含正则表达式，并且区分大小写。”～*”,用于表示url包含正则表达式，并且不区分大小写。”^~”,用于标准url前，用于匹配请求最高location后，立即使用localtion处理请求。</td></tr><tr><td>root path</td><td style="text-align:left">配置请求的根目录，在服务端指定目录中请求资源。</td></tr><tr><td>alias path</td><td style="text-align:left">更改location的URL，使用alias指令改变location接收的URL的请求路径。配置如：alias ／locationtest1/other／$1</td></tr><tr><td>index file …</td><td style="text-align:left">设置网站的默认首页，用于index设置为默认首页。配置如：index index.$1.html index.my.html index.html</td></tr><tr><td>error_page code … [=[response]] url</td><td style="text-align:left">设置网站的错误页面，如果服务端错误需要错误页面来显示。这个设置错误页面。配置如：error_page 404 404/html</td></tr><tr><td>allow address/CIDR/all</td><td style="text-align:left">基于IP配置Nginx的访问权限，通过IP来判断客户端是否拥有对Nginx的访问权限。address，允许访问的客户端的IP，不支持同时设置多个。需要重复使用allow指令。CIDR，允许访问的客户端CIDR地址，例如202.80.18.23/25。all，代表允许所有客户端访问。配置如：deny 192.168.1.1；allow 192.168.1.0/24  deny all；</td></tr><tr><td>auth_basic string/off</td><td style="text-align:left">基于密码配置Nginx的访问权限，该给予HTTP Basic Authentication协议的认证。该协议是一种HTTP性质的认证办法，需要识别用户名和密码，认证失败的苦户端不拥有访问Nginx服务器权限。</td></tr><tr><td>auth_basic_user_file file</td><td style="text-align:left">用语设置包含用户名和密码信息的文件路径。file为密码文件的绝对路径。file配置如：name1:password1</td></tr></tbody></table><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过指令的实例和指令的详细说明，可以学会看nginx.conf。nginx虽然容易使用，但想使用的好。需要了解指令的用法。最后才可以实现高性能服务器。</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(十) Kafka的安装与使用</title>
      <link href="/architecture/10-kafka-install/"/>
      <url>/architecture/10-kafka-install/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/83346201" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/83346201</a>  </p><h2 id="1、下载Kafka"><a href="#1、下载Kafka" class="headerlink" title="1、下载Kafka"></a>1、下载Kafka</h2><p>下载地址：<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">https://kafka.apache.org/downloads</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.11-2.0.0.tgz</span><br></pre></td></tr></table></figure></p><p>解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka_2.11-2.0.0.tgz</span><br><span class="line"></span><br><span class="line">cd /usr/local/kafka_2.11-2.0.0/</span><br></pre></td></tr></table></figure></p><h2 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h2><p>把config/server.properties中advertised.listeners设置为服务器的IP，可使用<code>ping</code>命令查看IP。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">advertised.listeners=PLAINTEXT://120.25.173.32:9092</span><br></pre></td></tr></table></figure></p><h2 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h2><h3 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure><h3 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh  config/server.properties</span><br></pre></td></tr></table></figure><h2 id="4、创建TOPIC"><a href="#4、创建TOPIC" class="headerlink" title="4、创建TOPIC"></a>4、创建TOPIC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure><p>查看 topic 列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure></p><h2 id="5、发送消息"><a href="#5、发送消息" class="headerlink" title="5、发送消息"></a>5、发送消息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure><h2 id="6、消费消息"><a href="#6、消费消息" class="headerlink" title="6、消费消息"></a>6、消费消息</h2><p>可以在另一台机子上，启动kafka后，执行消费消息的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure></p><p>–from-beginning 代表从头开始消费消息。<br>在生产端发送消息，可以在消费端收到消息。</p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(九) Spring Boot 集成 Swagger2</title>
      <link href="/architecture/9-spring-boot-integration-swagger/"/>
      <url>/architecture/9-spring-boot-integration-swagger/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82945876" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82945876</a>  </p><p>Spring Boot 2.0.4 集成 <a href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener">swagger</a> 2.9.2。<br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Swagger是一款Restful接口的文档在线自动生成的软件，也能进行功能测试。   </p><h1 id="二、好处"><a href="#二、好处" class="headerlink" title="二、好处"></a>二、好处</h1><ul><li>方便开发人员单元测试，提高开发效率。<h1 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h1>先看下目录结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/gitee/high-concurrency on master ⌚ 12:52:03</span><br><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── common</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn</span><br><span class="line">│           │       └── lilyssh</span><br><span class="line">│           │           └── common</span><br><span class="line">│           │               └── swagger</span><br><span class="line">│           │                   ├── Swagger2Config.java</span><br><span class="line">│           │                   └── SwaggerProperties.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               └── META-INF</span><br><span class="line">│                   └── spring.factories</span><br><span class="line">├── order</span><br><span class="line">│   ├── order-api</span><br><span class="line">│   │   ├── pom.xml</span><br><span class="line">│   │   └── src</span><br><span class="line">│   │       └── main</span><br><span class="line">│   │           └── java</span><br><span class="line">│   │               └── cn.lilyssh.order.api</span><br><span class="line">│   │                   ├── model</span><br><span class="line">│   │                   │   ├── request</span><br><span class="line">│   │                   │   │   ├── OrderInsertReq.java</span><br><span class="line">│   │                   │   │   └── OrderQueryReq.java</span><br><span class="line">│   │                   │   └── response</span><br><span class="line">│   │                   │       └── OrderQueryResp.java</span><br><span class="line">│   │                   └── service</span><br><span class="line">│   │                       └── OrderServiceApi.java</span><br><span class="line">│   └── order-consumer</span><br><span class="line">│       ├── pom.xml</span><br><span class="line">│       └── src</span><br><span class="line">│           └── main</span><br><span class="line">│               ├── java</span><br><span class="line">│               │   └── cn</span><br><span class="line">│               │       └── lilyssh</span><br><span class="line">│               │           └── order</span><br><span class="line">│               │               └── consumer</span><br><span class="line">│               │                   ├── OrderConsumerApplication.java</span><br><span class="line">│               │                   ├── controller</span><br><span class="line">│               │                   │   └── OrderController.java</span><br><span class="line">│               │                   └── service</span><br><span class="line">│               │                       └── OrderService.java</span><br><span class="line">│               └── resources</span><br><span class="line">│                   ├── application.yml</span><br><span class="line">│                   └── bootstrap.yml</span><br><span class="line">└── pom.xml</span><br></pre></td></tr></table></figure></li></ul><h2 id="1、common项目"><a href="#1、common项目" class="headerlink" title="1、common项目"></a>1、common项目</h2><h3 id="（1）添加swagger依赖"><a href="#（1）添加swagger依赖" class="headerlink" title="（1）添加swagger依赖"></a>（1）添加swagger依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）新建Swagger的配置类"><a href="#（2）新建Swagger的配置类" class="headerlink" title="（2）新建Swagger的配置类"></a>（2）新建Swagger的配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.common.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;SwaggerProperties.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SwaggerProperties swaggerProperties;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加摘要信息(Docket)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">controllerApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(<span class="keyword">true</span>)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                        .title(swaggerProperties.getTitle())</span><br><span class="line">                        .description(swaggerProperties.getDescription())</span><br><span class="line">                        .contact(<span class="keyword">new</span> Contact(swaggerProperties.getAuthor(), swaggerProperties.getUrl(), swaggerProperties.getEmail()))</span><br><span class="line">                        .version(swaggerProperties.getVersion())</span><br><span class="line">                        .build())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(swaggerProperties.getBasePackage()))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.common.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"swagger"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enable;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="keyword">private</span> String basePackage;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）配置spring扫描路径"><a href="#（3）配置spring扫描路径" class="headerlink" title="（3）配置spring扫描路径"></a>（3）配置spring扫描路径</h3><p><code>spring.factories</code>中内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  cn.lilyssh.common.exception.ExceptionAdviceHandler,\</span><br><span class="line">  cn.lilyssh.common.swagger.Swagger2Config</span><br></pre></td></tr></table></figure></p><p>换行要用\。</p><h2 id="2、order-consumer项目"><a href="#2、order-consumer项目" class="headerlink" title="2、order-consumer项目"></a>2、order-consumer项目</h2><h3 id="（1）添加common依赖"><a href="#（1）添加common依赖" class="headerlink" title="（1）添加common依赖"></a>（1）添加common依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;cn.lilyssh&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;common&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）在启动类中添加-EnableSwagger2注解"><a href="#（2）在启动类中添加-EnableSwagger2注解" class="headerlink" title="（2）在启动类中添加@EnableSwagger2注解"></a>（2）在启动类中添加@EnableSwagger2注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启在线接口文档</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OrderConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）在application-yml中添加配置"><a href="#（3）在application-yml中添加配置" class="headerlink" title="（3）在application.yml中添加配置"></a>（3）在application.yml中添加配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="string">title</span> <span class="string">:</span> <span class="string">lilyssh_电商系统_接口文档</span></span><br><span class="line">  <span class="string">description</span> <span class="string">:</span> <span class="string">用于网上购物的订单模块</span></span><br><span class="line">  <span class="string">author</span> <span class="string">:</span> <span class="string">lily</span></span><br><span class="line">  <span class="string">url</span> <span class="string">:</span> <span class="string">lilyssh.cn</span></span><br><span class="line">  <span class="string">email</span> <span class="string">:</span> <span class="number">1643995620</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="string">version</span> <span class="string">:</span> <span class="string">版本号:1.0</span></span><br><span class="line">  <span class="string">basePackage</span> <span class="string">:</span> <span class="string">cn.lilyssh.order.consumer.controller</span></span><br></pre></td></tr></table></figure><h3 id="（4）在controller中添加注解"><a href="#（4）在controller中添加注解" class="headerlink" title="（4）在controller中添加注解"></a>（4）在controller中添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.common.result.Result;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.common.validate.ValidateGroup;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.model.request.OrderInsertReq;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.model.request.OrderQueryReq;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.consumer.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api</span>(description = <span class="string">"订单接口"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"获取所有订单"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">orderList</span><span class="params">(OrderQueryReq orderQueryReq)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.orderList(orderQueryReq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"下单"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(@RequestBody @Validated(value = ValidateGroup.Insert.class)</span> OrderInsertReq orderInsertReq)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.save(orderInsertReq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、order-api项目"><a href="#3、order-api项目" class="headerlink" title="3、order-api项目"></a>3、order-api项目</h2><h3 id="（1）在实体类中添加注解"><a href="#（1）在实体类中添加注解" class="headerlink" title="（1）在实体类中添加注解"></a>（1）在实体类中添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.api.model.request;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> io.swagger.models.properties.BaseIntegerProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"订单查询请求数据"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderQueryReq</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"订单ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userUuid;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal payment;</span><br><span class="line">    <span class="keyword">private</span> Integer payType;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal postFee;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line">    <span class="keyword">private</span> Date cosignTime;</span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="keyword">private</span> Date closeTime;</span><br><span class="line">    <span class="keyword">private</span> String shippingName;</span><br><span class="line">    <span class="keyword">private</span> String shippingCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:1111/swagger-ui.html</code>，报错:<code>Illegal DefaultValue null for parameter type integer.</code>，解决办法：<br>实体类中，Integer类型的属性加@ApiModelProperty时，必须要给example参数赋值，且值必须为数字类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"订单查询请求数据"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderQueryReq</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"订单ID"</span>,example = <span class="string">"123"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>异常分析过程 请参考：<a href="https://lilyssh.cn/exception/3-swagger-NumberFormatException/">swagger2异常:java.lang.NumberFormatException:For input string:””</a><br>再次访问<br><img src="https://resource.lilyssh.cn/pic/swagger.png" alt><br>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Swagger2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>swagger2异常:java.lang.NumberFormatException:For input string:&quot;&quot;</title>
      <link href="/exception/3-swagger-NumberFormatException/"/>
      <url>/exception/3-swagger-NumberFormatException/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82944507" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82944507</a>  </p><p><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a>  </p><h1 id="1-异常描述"><a href="#1-异常描述" class="headerlink" title="1. 异常描述"></a>1. 异常描述</h1><a id="more"></a><p>在访问swagger首页时<br><img src="https://resource.lilyssh.cn/pic/swagger_NumberFormatException.png" alt><br>报错：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">10</span>-<span class="number">05</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">13.537</span>  WARN <span class="number">19699</span> --- [nio-<span class="number">1111</span>-exec-<span class="number">4</span>] i.s.m.p.AbstractSerializableParameter    : Illegal DefaultValue <span class="keyword">null</span> <span class="keyword">for</span> parameter type integer</span><br><span class="line"></span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">""</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>) ~[na:<span class="number">1.8</span>.0_171]</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">601</span>) ~[na:<span class="number">1.8</span>.0_171]</span><br><span class="line">at java.lang.Long.valueOf(Long.java:<span class="number">803</span>) ~[na:<span class="number">1.8</span>.0_171]</span><br><span class="line">at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class="number">412</span>) ~[swagger-models-<span class="number">1.5</span>.20.jar:<span class="number">1.5</span>.20]</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source) ~[na:na]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[na:<span class="number">1.8</span>.0_171]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[na:<span class="number">1.8</span>.0_171]</span><br><span class="line">at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:<span class="number">687</span>) [jackson-databind-<span class="number">2.9</span>.6.jar:<span class="number">2.9</span>.6]</span><br></pre></td></tr></table></figure></p><p>实体类是这么写的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.api.model.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> io.swagger.models.properties.BaseIntegerProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"订单查询请求数据"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderQueryReq</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"订单ID"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-异常分析"><a href="#2-异常分析" class="headerlink" title="2. 异常分析"></a>2. 异常分析</h1><p>从<code>Illegal DefaultValue null for parameter type integer</code>和<code>NumberFormatException: For input string: &quot;&quot;</code>这一句可以看出，有个默认值是空字符串的变量转换成integer类型时异常。<br>从<code>at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412) ~[swagger-models-1.5.20.jar:1.5.20]</code><br>点进去<code>AbstractSerializableParameter.java:412</code><br>可以看到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (BaseIntegerProperty.TYPE.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> Long.valueOf(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就是说如果实体属性类型是Integer，就把example转为Long类型，而example默认为””,导致转换错误。</p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h1><p>实体类中，Integer类型的属性加@ApiModelProperty时，必须要给example参数赋值，且值必须为数字类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.api.model.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> io.swagger.models.properties.BaseIntegerProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"订单查询请求数据"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderQueryReq</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"订单ID"</span>,example = <span class="string">"123"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Swagger2 </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(八) Spring Boot 集成 elasticsearch</title>
      <link href="/architecture/8-spring-boot-integration-elasticsearch/"/>
      <url>/architecture/8-spring-boot-integration-elasticsearch/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82948369" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82948369</a>  </p><p>Spring Boot 2.0.4 集成 <a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">elasticsearch</a> 6.4.1。<br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>ElasticSearch是一个基于Lucene的分布式的全文搜索引擎，基于RESTful web接口。</p><h1 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h1><h2 id="（1）添加elasticsearch依赖"><a href="#（1）添加elasticsearch依赖" class="headerlink" title="（1）添加elasticsearch依赖"></a>（1）添加elasticsearch依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="（2）在application-yml中添加elasticsearch配置"><a href="#（2）在application-yml中添加elasticsearch配置" class="headerlink" title="（2）在application.yml中添加elasticsearch配置"></a>（2）在<code>application.yml</code>中添加elasticsearch配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">my-application</span>  <span class="comment">#集群名，默认elasticsearch</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.111</span><span class="string">:9200,192.168.0.112:9200</span> <span class="comment">#节点地址，多个节点用逗号隔开</span></span><br></pre></td></tr></table></figure><h2 id="（3）实体类添加-Document注解"><a href="#（3）实体类添加-Document注解" class="headerlink" title="（3）实体类添加@Document注解"></a>（3）实体类添加@Document注解</h2><p> <code>indexName</code>：索引名称，可以理解为数据库名，必须为小写，不然会报错：<code>org.elasticsearch.indices.InvalidIndexNameException</code><br><code>type</code>：类型，可以理解为表名。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.provider.dao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"demo"</span>,type = <span class="string">"order"</span>, shards = <span class="number">1</span>,replicas = <span class="number">0</span>, refreshInterval = <span class="string">"-1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderESEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">551589397625941750L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userUuid;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal payment;</span><br><span class="line">    <span class="keyword">private</span> Integer payType;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal postFee;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line">    <span class="keyword">private</span> Date cosignTime;</span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="keyword">private</span> Date closeTime;</span><br><span class="line">    <span class="keyword">private</span> String shippingName;</span><br><span class="line">    <span class="keyword">private</span> String shippingCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="（4）repository继承ElasticsearchRepository"><a href="#（4）repository继承ElasticsearchRepository" class="headerlink" title="（4）repository继承ElasticsearchRepository"></a>（4）repository继承ElasticsearchRepository</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.provider.dao.esrepository ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.entity.OrderESEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderESRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">OrderESEntity</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（5）服务实现类"><a href="#（5）服务实现类" class="headerlink" title="（5）服务实现类"></a>（5）服务实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.order.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.model.request.OrderInsertReq;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.model.request.OrderQueryReq;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.model.response.OrderQueryResp;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.api.service.OrderServiceApi;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.entity.OrderESEntity;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.entity.OrderEntity;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.order.provider.dao.esrepository.OrderESRepository;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.query.NativeSearchQuery;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.query.SearchQuery;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> <span class="keyword">implements</span> <span class="title">OrderServiceApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderESRepository orderESRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件从ES中查询订单列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderQueryReq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderQueryResp&gt; <span class="title">listByEs</span><span class="params">(OrderQueryReq orderQueryReq)</span> </span>&#123;</span><br><span class="line">        SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQuery(</span><br><span class="line">                <span class="keyword">new</span> BoolQueryBuilder()</span><br><span class="line">                        .must(QueryBuilders.matchQuery(<span class="string">"id"</span>,orderQueryReq.getId()))</span><br><span class="line">        );</span><br><span class="line">        Page&lt;OrderESEntity&gt; orderESEntityPage = orderESRepository.search(searchQuery);</span><br><span class="line">        List&lt;OrderESEntity&gt; orderESEntityList = orderESEntityPage.getContent();</span><br><span class="line">        List&lt;OrderQueryResp&gt; orderQueryRespList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (OrderESEntity orderESEntity: orderESEntityList) &#123;</span><br><span class="line">            OrderQueryResp orderQueryResp=<span class="keyword">new</span> OrderQueryResp();</span><br><span class="line">            BeanUtils.copyProperties(orderESEntity,orderQueryResp);</span><br><span class="line">            orderQueryRespList.add(orderQueryResp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> orderQueryRespList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存到ES</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderInsertReq</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveByEs</span><span class="params">(OrderInsertReq orderInsertReq)</span></span>&#123;</span><br><span class="line">        OrderESEntity orderESEntity = <span class="keyword">new</span> OrderESEntity();</span><br><span class="line">        OrderEntity orderEntity=<span class="keyword">new</span> OrderEntity();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 直接写入数据库太慢，引起dubbo超时，导致调用多次，此处需要后期改造成kafka异步写入。</span></span><br><span class="line">        BeanUtils.copyProperties(orderInsertReq,orderEntity);</span><br><span class="line">        orderRepository.save(orderEntity);</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(orderEntity,orderESEntity);</span><br><span class="line">        orderESRepository.save(orderESEntity);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、启动ES服务"><a href="#三、启动ES服务" class="headerlink" title="三、启动ES服务"></a>三、启动ES服务</h1><ul><li><p>（1）后台启动Elasticsearch<br>在<code>elasticsearch-6.3.2/bin</code>下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure></li><li><p>（2）后台启动elasticsearch-head<br>elasticsearch-head是一个界面化的集群操作和管理工具，可以对集群进行傻瓜式操作。<br>在elasticsearch-head根目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup npm run start &amp;</span><br></pre></td></tr></table></figure></li><li><p>（3）访问es <code>http://192.168.0.111:9100/</code><br><img src alt> </p><h1 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h1><p><img src alt><br>大功告成！</p></li></ul>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Cloud Config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(七) Elasticsearch的安装与使用</title>
      <link href="/architecture/7-elasticsearch-install/"/>
      <url>/architecture/7-elasticsearch-install/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/architecture/7-elasticsearch-install/">https://lilyssh.cn/architecture/7-elasticsearch-install/</a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。Elasticsearch使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。它是分布式的实时文件存储，每个字段都被索引并可被搜索。分布式的实时分析搜索引擎。可以扩展到上百台服务器，处理PB级结构化或非结构化数据。<br><a id="more"></a></p><h1 id="二、优势"><a href="#二、优势" class="headerlink" title="二、优势"></a>二、优势</h1><p>上手Elasticsearch非常容易。它提供了许多合理的缺省值，并对初学者隐藏了复杂的搜索引擎理论。它开箱即用（安装即可使用），只需很少的学习既可在生产环境中使用。</p><h1 id="三、安装Elasticsearch"><a href="#三、安装Elasticsearch" class="headerlink" title="三、安装Elasticsearch"></a>三、安装Elasticsearch</h1><p>因为安全问题，Elasticsearch不允许root用户直接运行，否则会报错：<code>can not run elasticsearch as root</code>。即使事后再把Elasticsearch拥有权赋给新建用户，也会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误: 找不到或无法加载主类 org.elasticsearch.tools.java_version_checker.JavaVersionChecker</span><br><span class="line">原因: java.lang.ClassNotFoundException: org.elasticsearch.tools.java_version_checker.JavaVersionChecker</span><br></pre></td></tr></table></figure></p><h2 id="1、创建新用户。"><a href="#1、创建新用户。" class="headerlink" title="1、创建新用户。"></a>1、创建新用户。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser admin  # 创建admin用户</span><br><span class="line"></span><br><span class="line">su admin       # 切换到admin用户</span><br></pre></td></tr></table></figure><h2 id="2、下载并解压Elasticsearch"><a href="#2、下载并解压Elasticsearch" class="headerlink" title="2、下载并解压Elasticsearch"></a>2、下载并解压Elasticsearch</h2><p>从<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">Elasticsearch官网</a> 下载最新版本的Elasticsearch，并解压。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.2.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf elasticsearch-6.4.2.tar.gz</span><br><span class="line"></span><br><span class="line">cd elasticsearch-6.4.2</span><br></pre></td></tr></table></figure></p><h2 id="3、后台运行Elasticsearch"><a href="#3、后台运行Elasticsearch" class="headerlink" title="3、后台运行Elasticsearch"></a>3、后台运行Elasticsearch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h2 id="4、验证是否启动成功"><a href="#4、验证是否启动成功" class="headerlink" title="4、验证是否启动成功"></a>4、验证是否启动成功</h2><p>curl <a href="http://localhost:9200" target="_blank" rel="noopener">http://localhost:9200</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;LwWH-xd&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;8HsSQm_NSPOSMpbwSIXDZw&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;6.4.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;04711c2&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-09-26T13:34:09.098244Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;7.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、安装Elasticsearch-head"><a href="#四、安装Elasticsearch-head" class="headerlink" title="四、安装Elasticsearch head"></a>四、安装Elasticsearch head</h1><h2 id="1、下载并安装Elasticsearch-head"><a href="#1、下载并安装Elasticsearch-head" class="headerlink" title="1、下载并安装Elasticsearch head"></a>1、下载并安装Elasticsearch head</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"></span><br><span class="line">cd elasticsearch-head</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>由于<code>npm</code>太慢，可换成<code>cnpm</code>。</p><h2 id="2、配置head"><a href="#2、配置head" class="headerlink" title="2、配置head"></a>2、配置head</h2><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><p>打开 <a href="http://localhost:9100/" target="_blank" rel="noopener">http://localhost:9100/</a></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(六) 提高查询性能</title>
      <link href="/architecture/6-tuning-performance/"/>
      <url>/architecture/6-tuning-performance/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/architecture/6-tuning-performance/">https://lilyssh.cn/architecture/6-tuning-performance/</a><br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a><br>在不采取任何措施下，从160万数据中查询某用户的订单，耗时14895毫秒：<br><img src="https://resource.lilyssh.cn/pic/query_no_index.png" alt></p><h1 id="一、初步优化，加索引"><a href="#一、初步优化，加索引" class="headerlink" title="一、初步优化，加索引"></a>一、初步优化，加索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">TABLE</span>  demo.<span class="string">`order`</span>  <span class="keyword">ADD</span>  <span class="keyword">INDEX</span> index_order_user_id (  <span class="string">`user_id`</span>  );</span><br></pre></td></tr></table></figure><p>加索引后 耗时56毫秒：<br><img src="https://resource.lilyssh.cn/pic/query_index.png" alt></p><p>在order是三千万条数据，且使用模糊查询时，直接报<code>TimeoutException</code>了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method list in the service cn.lilyssh.order.api.service.OrderServiceApi. Tried 3 times of the providers [192.168.0.105:3333] (1/1) from the registry ssh.qianxunclub.com:2181 on the consumer 192.168.0.105 using the dubbo version 2.6.0. Last error is: Invoke remote method timeout. method: list, provider: dubbo://192.168.0.105:3333/cn.lilyssh.order.api.service.OrderServiceApi?anyhost=true&amp;application=order-consumer&amp;check=false&amp;default.timeout=5000&amp;dubbo=2.6.0&amp;generic=false&amp;interface=cn.lilyssh.order.api.service.OrderServiceApi&amp;methods=saveBatch,save,list&amp;pid=1468&amp;register.ip=192.168.0.105&amp;remote.timestamp=1537974222744&amp;side=consumer&amp;timestamp=1537974194871.</span><br><span class="line">...</span><br><span class="line">Caused by: com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-09-26 23:05:43.949, end time: 2018-09-26 23:05:48.952, client elapsed: 1 ms, server elapsed: 5002 ms, timeout: 5000 ms, request: Request [id=6, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=list, parameterTypes=[class cn.lilyssh.order.api.model.request.OrderQueryReq], arguments=[OrderQueryReq(id=null, userId=null, userUuid=null, payment=null, payType=null, postFee=null, status=null, createTime=null, updateTime=null, payTime=null, cosignTime=null, endTime=null, closeTime=null, shippingName=拼, shippingCode=null)], attachments=&#123;path=cn.lilyssh.order.api.service.OrderServiceApi, interface=cn.lilyssh.order.api.service.OrderServiceApi, version=0.0.0, timeout=5000&#125;]], channel: /192.168.0.105:51181 -&gt; /192.168.0.105:3333</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77) ~[dubbo-2.6.0.jar:2.6.0]</span><br><span class="line">... 70 common frames omitted</span><br></pre></td></tr></table></figure></p><p>直接查数据库，也查不出：<br><img src="https://resource.lilyssh.cn/pic/order_can%27t_query.png" alt></p><h1 id="二、使用ES"><a href="#二、使用ES" class="headerlink" title="二、使用ES"></a>二、使用ES</h1><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dubbo服务调用异常：No provider available for the service</title>
      <link href="/exception/2-No-provider-available/"/>
      <url>/exception/2-No-provider-available/</url>
      <content type="html"><![CDATA[<p> 转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82775678" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82775678</a>  </p><p><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a>  </p><h1 id="1-异常描述"><a href="#1-异常描述" class="headerlink" title="1. 异常描述"></a>1. 异常描述</h1><p>在启动基于<code>spring boot</code>的order-consumer项目时，报错：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with <span class="string">'debug'</span> enabled.</span><br><span class="line"><span class="number">2018</span>-<span class="number">09</span>-<span class="number">19</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">34.167</span> ERROR <span class="number">2615</span> --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name <span class="string">'orderController'</span> defined in file [/Users/cypher02/workspace/gitee/high-concurrency/order/order-consumer/target/classes/cn/lilyssh/order/consumer/controller/OrderController.class]: Unsatisfied dependency expressed through constructor parameter <span class="number">0</span>; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'orderService'</span> defined in file [/Users/cypher02/workspace/gitee/high-concurrency/order/order-consumer/target/classes/cn/lilyssh/order/consumer/service/OrderService.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: orderService; nested exception is java.lang.IllegalStateException: Failed to check the status of the service cn.lilyssh.goods.api.service.GoodsServiceApi. No provider available <span class="keyword">for</span> the service cn.lilyssh.goods.api.service.GoodsServiceApi from the url zookeeper:<span class="comment">//ssh.qianxunclub.com:2181/com.alibaba.dubbo.registry.RegistryService?application=order-consumer&amp;dubbo=2.6.0&amp;interface=cn.lilyssh.goods.api.service.GoodsServiceApi&amp;methods=exist,saveBatch,save,list,updateById&amp;pid=2615&amp;register.ip=192.168.31.31&amp;side=consumer&amp;timestamp=1537344873982 to the consumer 192.168.31.31 use dubbo version 2.6.0</span></span><br><span class="line">at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:<span class="number">732</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:<span class="number">197</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:<span class="number">1267</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:<span class="number">1124</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">535</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">495</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$<span class="number">0</span>(AbstractBeanFactory.java:<span class="number">317</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">222</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">315</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">199</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">759</span>) ~[spring-beans-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">869</span>) ~[spring-context-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">550</span>) ~[spring-context-<span class="number">5.0</span>.8.RELEASE.jar:<span class="number">5.0</span>.8.RELEASE]</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:<span class="number">140</span>) ~[spring-boot-<span class="number">2.0</span>.4.RELEASE.jar:<span class="number">2.0</span>.4.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="number">762</span>) [spring-boot-<span class="number">2.0</span>.4.RELEASE.jar:<span class="number">2.0</span>.4.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:<span class="number">398</span>) [spring-boot-<span class="number">2.0</span>.4.RELEASE.jar:<span class="number">2.0</span>.4.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">330</span>) [spring-boot-<span class="number">2.0</span>.4.RELEASE.jar:<span class="number">2.0</span>.4.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1258</span>) [spring-boot-<span class="number">2.0</span>.4.RELEASE.jar:<span class="number">2.0</span>.4.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1246</span>) [spring-boot-<span class="number">2.0</span>.4.RELEASE.jar:<span class="number">2.0</span>.4.RELEASE]</span><br><span class="line">at cn.lilyssh.order.consumer.OrderConsumerApplication.main(OrderConsumerApplication.java:<span class="number">12</span>) [classes/:na]</span><br><span class="line">Disconnected from the target VM, address: <span class="string">'127.0.0.1:56417'</span>, transport: <span class="string">'socket'</span></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h1 id="2-异常分析"><a href="#2-异常分析" class="headerlink" title="2. 异常分析"></a>2. 异常分析</h1><p>No provider available for the service cn.lilyssh.goods.api.service.GoodsServiceApi<br>从异常的信息看，有两种可能：</p><ol><li>在zookeeper里没注册进去服务</li><li>注册进去了，但是拿不出来。<br>进去zookeeper里看看就知道怎么肥四了：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo://192.168.31.31:3333/cn.lilyssh.order.api.service.OrderServiceApi?anyhost=true&amp;application=order-provider&amp;default.timeout=5000&amp;dubbo=2.6.0&amp;generic=false&amp;interface=cn.lilyssh.order.api.service.OrderServiceApi&amp;methods=saveBatch,save,list&amp;pid=2541&amp;revision=1.2.3&amp;side=provider&amp;timestamp=1537344229809&amp;version=1.2.3</span><br></pre></td></tr></table></figure></li></ol><p>最后是 version=1.2.3<br>原来是往外抛服务时，加了版本号：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span>(version = <span class="string">"1.2.3"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> <span class="keyword">implements</span> <span class="title">GoodsServiceApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在order-coonsumer项目中，引用时，却没加版本号<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> GoodsServiceApi goodsServiceApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(version = <span class="string">"1.2.3"</span>)</span><br><span class="line">    <span class="keyword">private</span> OrderServiceApi orderServiceApi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h1><p>注册和调用的服务的版本号要一致！</p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Dubbo </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(五) Spring Boot 集成 spring-cloud-config</title>
      <link href="/architecture/5-spring-boot-integration-spring-cloud_config/"/>
      <url>/architecture/5-spring-boot-integration-spring-cloud_config/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82754702" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82754702</a>  </p><p>Spring Boot 2.0.4 集成 <a href="http://cloud.spring.io/spring-cloud-config" target="_blank" rel="noopener">spring-cloud-config</a> 2.0.1。<br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Spring Cloud Config为服务端和客户端提供了分布式系统的外部化配置支持。配置服务器为各应用的所有环境提供了一个中心化的外部配置。spring cloud config支持配置文件放在在配置服务的内存中，也支持放在远程Git仓库里。</p><h1 id="二、为什么用"><a href="#二、为什么用" class="headerlink" title="二、为什么用"></a>二、为什么用</h1><p>在分布式系统中，由于服务数量庞大，如果各个项目管理各自的配置文件，修改起来会非常困难。</p><h1 id="三、有什么好处"><a href="#三、有什么好处" class="headerlink" title="三、有什么好处"></a>三、有什么好处</h1><ul><li>方便服务配置文件统一管理，实时更新，且易于部署、维护。方便切换环境。<br>它实现了对服务端和客户端对Spring Environment和PropertySource抽象的映射，所以它除了适用于Spring构建的应用程序，也可以在任何其他语言运行的应用程序中使用。<h1 id="四、适用场景"><a href="#四、适用场景" class="headerlink" title="四、适用场景"></a>四、适用场景</h1><h1 id="五、使用方法"><a href="#五、使用方法" class="headerlink" title="五、使用方法"></a>五、使用方法</h1>引入spring cloud config后，外部配置文件就可以集中放置在一个git仓库里，再新建一个config server，用来管理所有的配置文件，需要更改配置时，只需要在本地更改后，推送到远程仓库，所有的服务都可以通过config server来获取配置文件，这时每个服务就相当于配置服务的客户端config client,为了保证系统的稳定，配置服务端config server可以进行集群部署，即使某一个实例，因为某种原因不能提供服务，也还有其他的实例保证服务的继续进行。<h2 id="1、配置config服务端"><a href="#1、配置config服务端" class="headerlink" title="1、配置config服务端"></a>1、配置config服务端</h2>新建配置服务项目，如config-server。  <h3 id="（1）在config-server项目中添加依赖"><a href="#（1）在config-server项目中添加依赖" class="headerlink" title="（1）在config-server项目中添加依赖"></a>（1）在config-server项目中添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-config&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（2）在启动类上加注解-EnableConfigServer"><a href="#（2）在启动类上加注解-EnableConfigServer" class="headerlink" title="（2）在启动类上加注解@EnableConfigServer"></a>（2）在启动类上加注解@EnableConfigServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）创建配置仓库"><a href="#（3）创建配置仓库" class="headerlink" title="（3）创建配置仓库"></a>（3）创建配置仓库</h3><p>在github上新建一个空项目：<a href="https://gitee.com/lilyssh/config-repo" target="_blank" rel="noopener">https://gitee.com/lilyssh/config-repo</a> 作为配置仓库。<br>在config-repo项目中新建一个公用的配置文件application-dev.yml，内容如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">cn.lilyssh:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line"><span class="attr">      address:</span> <span class="attr">zookeeper://ssh.qianxunclub.com:2181</span></span><br></pre></td></tr></table></figure></p><p>再新建一个数据库配置文件mysql-dev.yml,内容如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://db.qianxunclub.com:3306/demo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">  global-config:</span></span><br><span class="line"><span class="attr">    db-config:</span></span><br><span class="line"><span class="attr">      id-type:</span> <span class="string">AUTO</span></span><br></pre></td></tr></table></figure></p><h3 id="（4）在config-server项目application-yml中配置仓库信息"><a href="#（4）在config-server项目application-yml中配置仓库信息" class="headerlink" title="（4）在config-server项目application.yml中配置仓库信息"></a>（4）在config-server项目<code>application.yml</code>中配置仓库信息</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/lilyssh/config-repo.git</span></span><br><span class="line"><span class="attr">          basedir:</span> <span class="string">config/data</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">/**</span></span><br></pre></td></tr></table></figure><ul><li>uri：上一步创建的配置仓库地址。</li><li>basedir: 把远程仓库数据下载到本地的目录。由于源码中写着会访问到父级目录，所以此处需要设置为两级目录。</li><li>search-paths: 要下载的远程仓库的目录。<h3 id="（5）测试访问远程仓库配置"><a href="#（5）测试访问远程仓库配置" class="headerlink" title="（5）测试访问远程仓库配置"></a>（5）测试访问远程仓库配置</h3>在浏览器中，输入地址<a href="http://localhost:8888/{app}/{profile}" target="_blank" rel="noopener">http://localhost:8888/{app}/{profile}</a> 由于刚在远程仓库建的配置文件名为application-dev.yml，所以需要访问<br><a href="http://localhost:8888/application/dev" target="_blank" rel="noopener">http://localhost:8888/application/dev</a> 进行测试，会看到：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"application"</span>,</span><br><span class="line">    <span class="attr">"profiles"</span>:[</span><br><span class="line">        <span class="string">"dev"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"label"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"version"</span>:<span class="string">"9fdeb7331e3e78da436b0a404707c1873fe72076"</span>,</span><br><span class="line">    <span class="attr">"state"</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"propertySources"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"https://gitee.com/lilyssh/config-repo.git/application-dev.yml"</span>,</span><br><span class="line">            <span class="attr">"source"</span>:&#123;</span><br><span class="line">                <span class="attr">"logging.level.cn.lilyssh"</span>:<span class="string">"info"</span>,</span><br><span class="line">                <span class="attr">"spring.dubbo.registry.address"</span>:<span class="string">"zookeeper://ssh.qianxunclub.com:2181"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>证明配置服务中心可以从远程程序获取配置信息，http请求地址和资源文件映射如下:<br>可参考<code>/{application}/{profile}[/{label}]</code></p><ul><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties<h2 id="2、配置config客户端"><a href="#2、配置config客户端" class="headerlink" title="2、配置config客户端"></a>2、配置config客户端</h2><h3 id="（1）在order-provider项目中添加依赖"><a href="#（1）在order-provider项目中添加依赖" class="headerlink" title="（1）在order-provider项目中添加依赖"></a>（1）在order-provider项目中添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="（2）新建配置文件bootstrap-yml"><a href="#（2）新建配置文件bootstrap-yml" class="headerlink" title="（2）新建配置文件bootstrap.yml"></a>（2）新建配置文件<code>bootstrap.yml</code></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">application,mysql</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://config.qianxunclub.com</span></span><br></pre></td></tr></table></figure><ul><li>name: 配置文件名的前半部分,如“db-dev.yml”中的db。如果是多个，以逗号分隔。</li><li>profile: 配置文件名的后半部分，如”db-dev.yml中得dev。</li><li>uri: 配置服务地址。</li></ul><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><p><img src="https://resource.lilyssh.cn/pic/add_order_result.png" alt><br>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Cloud Config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(四) Spring Boot 集成 dubbo-spring-boot</title>
      <link href="/architecture/4-spring-boot-integration-dubbo/"/>
      <url>/architecture/4-spring-boot-integration-dubbo/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82753906" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82753906</a>  </p><p>Spring Boot 2.0.4 集成 dubbo-spring-boot-starter 2.0.0。<a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="一-初始化工程"><a href="#一-初始化工程" class="headerlink" title="一. 初始化工程"></a>一. 初始化工程</h1><p>创建一个空的 Spring Boot 工程</p><blockquote><p>TIP</p><p>可以使用 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initializr</a> 快速初始化一个 Spring Boot 工程 </p></blockquote><p>在high-concurrency/user文件夹下，创建工程：<br>（1）user-provider  &nbsp;&nbsp;&nbsp;&nbsp;//服务提供者<br>（2）user-api  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//接口<br>（3）user-consumer  &nbsp;//服务消费者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/gitee/high-concurrency/user on  master ⌚ 12:47:10</span><br><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">├── user-api</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           └── java</span><br><span class="line">│               └── cn</span><br><span class="line">│                   └── lilyssh</span><br><span class="line">│                       └── user</span><br><span class="line">│                           └── api</span><br><span class="line">│                               ├── model</span><br><span class="line">│                               │   ├── request</span><br><span class="line">│                               │   │   ├── UserInsertReq.java</span><br><span class="line">│                               │   │   └── UserQueryReq.java</span><br><span class="line">│                               │   └── response</span><br><span class="line">│                               │       └── UserQueryResp.java</span><br><span class="line">│                               └── service</span><br><span class="line">│                                   └── UserServiceApi.java</span><br><span class="line">├── user-consumer</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn</span><br><span class="line">│           │       └── lilyssh</span><br><span class="line">│           │           └── user</span><br><span class="line">│           │               └── consumer</span><br><span class="line">│           │                   ├── UserConsumerApplication.java</span><br><span class="line">│           │                   ├── controller</span><br><span class="line">│           │                   │   └── UserController.java</span><br><span class="line">│           │                   └── service</span><br><span class="line">│           │                       └── UserService.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               └── application.yml</span><br><span class="line">└── user-provider</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br><span class="line">        └── main</span><br><span class="line">            ├── java</span><br><span class="line">            │   └── cn</span><br><span class="line">            │       └── lilyssh</span><br><span class="line">            │           └── user</span><br><span class="line">            │               └── provider</span><br><span class="line">            │                   ├── UserProviderApplication.java</span><br><span class="line">            │                   ├── dao</span><br><span class="line">            │                   │   ├── entity</span><br><span class="line">            │                   │   │   └── UserEntity.java</span><br><span class="line">            │                   │   ├── mapper</span><br><span class="line">            │                   │   │   └── UserMapper.java</span><br><span class="line">            │                   │   └── repository</span><br><span class="line">            │                   │       └── UserRepository.java</span><br><span class="line">            │                   └── service</span><br><span class="line">            │                       └── UserService.java</span><br><span class="line">            └── resources</span><br><span class="line">                └── application.yml</span><br></pre></td></tr></table></figure><h1 id="二、在user-api工程中添加接口"><a href="#二、在user-api工程中添加接口" class="headerlink" title="二、在user-api工程中添加接口"></a>二、在user-api工程中添加接口</h1><p>(1) 添加实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.api.model.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserQueryResp</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> String lastLoginIp;</span><br><span class="line">    <span class="keyword">private</span> Date lastLoginTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idType;</span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2) 添加接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.api.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.api.model.response.UserQueryResp;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserServiceApi</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;UserQueryResp&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="三、发布dubbo服务（user-provider）"><a href="#三、发布dubbo服务（user-provider）" class="headerlink" title="三、发布dubbo服务（user-provider）"></a>三、发布dubbo服务（user-provider）</h1><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-dubbo配置"><a href="#2-dubbo配置" class="headerlink" title="2. dubbo配置"></a>2. dubbo配置</h2><p>（1）在src/main/resources下新建文件<code>application.yml</code>，配置dubbo ：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user-provider</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    registry:</span> <span class="attr">zookeeper://ssh.qianxunclub.com:2181</span></span><br></pre></td></tr></table></figure></p><p>(2) 在<code>spirng boot</code>启动类中，添加@EnableDubboConfiguration注解启用dubbo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProviderApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(UserProviderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3) 创建接口实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.api.model.response.UserQueryResp;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.api.service.UserServiceApi;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.provider.dao.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.provider.dao.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span>  <span class="keyword">implements</span> <span class="title">UserServiceApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserQueryResp&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; qw = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        List&lt;UserEntity&gt; userEntityList = userRepository.list(qw);</span><br><span class="line">        List&lt;UserQueryResp&gt; resultList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userEntityList.forEach(userEntity-&gt;&#123;</span><br><span class="line">            UserQueryResp  userQueryResp=<span class="keyword">new</span> UserQueryResp();</span><br><span class="line">            BeanUtils.copyProperties(userEntity,userQueryResp);</span><br><span class="line">            resultList.add(userQueryResp);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-启动项目，模拟测试调用dubbo服务"><a href="#3-启动项目，模拟测试调用dubbo服务" class="headerlink" title="3. 启动项目，模拟测试调用dubbo服务"></a>3. 启动项目，模拟测试调用dubbo服务</h2><p>(1) 使用<code>telnet</code>模拟调用<code>dubbo</code>服务,端口为user-provider.xml里配置的dubbo端口，默认20880。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 20880</span><br></pre></td></tr></table></figure></p><p>如果连接成功，会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line"></span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure></p><p>(2) 使用<code>ls</code>查看所有服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;ls</span><br><span class="line">cn.lilyssh.user.api.service.UserServiceApi</span><br></pre></td></tr></table></figure></p><p>(3) 使用<code>cd</code>进入到com.qianxunclub.demo.dubbo.DemoService中,并使用<code>ls</code>查看服务里的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;cd cn.lilyssh.user.api.service.UserServiceApi</span><br><span class="line">Used the cn.lilyssh.user.api.service.UserServiceApi as default.</span><br><span class="line">You can cancel default service by command: cd /</span><br><span class="line">dubbo&gt;ls</span><br><span class="line">Use default service cn.lilyssh.user.api.service.UserServiceApi.</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure></p><p>(4) 使用<code>invoke</code>模拟客户端调用服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;invoke list()</span><br><span class="line">Use default service cn.lilyssh.user.api.service.UserServiceApi.</span><br><span class="line">[&#123;&quot;age&quot;:0,&quot;id&quot;:1,&quot;idType&quot;:0,&quot;phone&quot;:0,&quot;sex&quot;:0,&quot;status&quot;:0,&quot;userName&quot;:&quot;Tom&quot;,&quot;uuid&quot;:&quot;3&quot;&#125;,&#123;&quot;age&quot;:0,&quot;id&quot;:2,&quot;idType&quot;:0,&quot;phone&quot;:0,&quot;sex&quot;:0,&quot;status&quot;:0,&quot;userName&quot;:&quot;Mike&quot;,&quot;uuid&quot;:&quot;4&quot;&#125;]</span><br><span class="line">elapsed: 334 ms.</span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure></p><h1 id="四、消费dubbo服务（user-consumer）"><a href="#四、消费dubbo服务（user-consumer）" class="headerlink" title="四、消费dubbo服务（user-consumer）"></a>四、消费dubbo服务（user-consumer）</h1><h2 id="1-添加依赖-1"><a href="#1-添加依赖-1" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-dubbo配置-1"><a href="#2-dubbo配置-1" class="headerlink" title="2. dubbo配置"></a>2. dubbo配置</h2><p>（1）在src/main/resources下新建文件<code>application.yml</code>，配置dubbo：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user-consumer</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="attr">zookeeper://ssh.qianxunclub.com:2181</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure></p><p>(2) 在<code>spirng boot</code>启动类中，添加@EnableDubboConfiguration注解启用dubbo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(UserConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（3）创建Controller，给前端提供Rest接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.consumer.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">userList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.userList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（4）创建Service，调用api接口。需用@Reference注解注入api接口服务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.api.model.response.UserQueryResp;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.api.service.UserServiceApi;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceApi userServiceApi;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserQueryResp&gt; <span class="title">userList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userServiceApi.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、用postman测试，调用Rest接口"><a href="#四、用postman测试，调用Rest接口" class="headerlink" title="四、用postman测试，调用Rest接口"></a>四、用postman测试，调用Rest接口</h1><h2 id="1-启动user-provider和user-consumer工程"><a href="#1-启动user-provider和user-consumer工程" class="headerlink" title="1. 启动user-provider和user-consumer工程"></a>1. 启动user-provider和user-consumer工程</h2><h2 id="2-在postman中输入测试地址"><a href="#2-在postman中输入测试地址" class="headerlink" title="2. 在postman中输入测试地址"></a>2. 在postman中输入测试地址</h2><p><a href="http://localhost:9000/user" target="_blank" rel="noopener">http://localhost:9000/user</a> 会看到结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"uuid"</span>:<span class="string">"3"</span>,<span class="attr">"userName"</span>:<span class="string">"Tom"</span>,<span class="attr">"password"</span>:<span class="literal">null</span>,<span class="attr">"realName"</span>:<span class="literal">null</span>,<span class="attr">"sex"</span>:<span class="number">0</span>,<span class="attr">"age"</span>:<span class="number">0</span>,<span class="attr">"phone"</span>:<span class="number">0</span>,<span class="attr">"email"</span>:<span class="literal">null</span>,<span class="attr">"status"</span>:<span class="number">0</span>,<span class="attr">"lastLoginIp"</span>:<span class="literal">null</span>,<span class="attr">"lastLoginTime"</span>:<span class="literal">null</span>,<span class="attr">"idType"</span>:<span class="number">0</span>,<span class="attr">"idNumber"</span>:<span class="literal">null</span>,<span class="attr">"address"</span>:<span class="literal">null</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"uuid"</span>:<span class="string">"4"</span>,<span class="attr">"userName"</span>:<span class="string">"Mike"</span>,<span class="attr">"password"</span>:<span class="literal">null</span>,<span class="attr">"realName"</span>:<span class="literal">null</span>,<span class="attr">"sex"</span>:<span class="number">0</span>,<span class="attr">"age"</span>:<span class="number">0</span>,<span class="attr">"phone"</span>:<span class="number">0</span>,<span class="attr">"email"</span>:<span class="literal">null</span>,<span class="attr">"status"</span>:<span class="number">0</span>,<span class="attr">"lastLoginIp"</span>:<span class="literal">null</span>,<span class="attr">"lastLoginTime"</span>:<span class="literal">null</span>,<span class="attr">"idType"</span>:<span class="number">0</span>,<span class="attr">"idNumber"</span>:<span class="literal">null</span>,<span class="attr">"address"</span>:<span class="literal">null</span>&#125;]</span><br></pre></td></tr></table></figure></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并发过大druid异常：Thread pool is EXHAUSTED!</title>
      <link href="/exception/1-threadpool-is-exhausted/"/>
      <url>/exception/1-threadpool-is-exhausted/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82775497" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82775497</a>  </p><p>当并发量太高，就会导致部分请求调用服务失败，我们就需要定位瓶颈在哪里，再对症下药，本篇就是为了说明线程池资源耗尽的情况下该怎么办。<br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="1-用jmeter压测"><a href="#1-用jmeter压测" class="headerlink" title="1. 用jmeter压测"></a>1. 用<a href="https://jmeter.apache.org/" target="_blank" rel="noopener">jmeter</a>压测</h1><p><img src="https://resource.lilyssh.cn/pic/thread_group.png" alt><br><img src="https://resource.lilyssh.cn/pic/http_request.png" alt><br><img src="https://resource.lilyssh.cn/pic/http_header.png" alt></p><h1 id="2-异常描述"><a href="#2-异常描述" class="headerlink" title="2. 异常描述"></a>2. 异常描述</h1><p>运行，会看到部分请求失败：<br><img src="https://resource.lilyssh.cn/pic/request_result.png" alt><br>在项目控制台会看到报错信息：threadpool is exhausted，线程池耗尽。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2018-09-14 11:04:30.365 [http-nio-1111-exec-435] ERROR cn.lilyssh.common.exception.ExceptionAdviceHandler  - 处理出现异常</span><br><span class="line">com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method save in the service cn.lilyssh.order.api.service.OrderServiceApi. Tried 3 times of the providers [192.168.31.31:3333] (1/1) from the registry ssh.qianxunclub.com:2181 on the consumer 192.168.31.31 using the dubbo version 2.6.0. Last error is: Failed to invoke remote method: save, provider: dubbo://192.168.31.31:3333/cn.lilyssh.order.api.service.OrderServiceApi?anyhost=true&amp;application=order-consumer&amp;check=false&amp;default.check=false&amp;dubbo=2.6.0&amp;generic=false&amp;interface=cn.lilyssh.order.api.service.OrderServiceApi&amp;methods=save,list&amp;pid=2372&amp;register.ip=192.168.31.31&amp;remote.timestamp=1536893088718&amp;side=consumer&amp;timestamp=1536893890966, cause: Server side(192.168.31.31,3333) threadpool is exhausted ,detail msg:Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-192.168.31.31:3333, Pool Size: 200 (active: 200, core: 200, max: 200, largest: 200), Task: 4395 (completed: 4195), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://192.168.31.31:3333!</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:101)</span><br><span class="line">at java.base/java.lang.Thread.run(Thread.java:844)</span><br><span class="line">Caused by: com.alibaba.dubbo.remoting.RemotingException: Server side(192.168.31.31,3333) threadpool is exhausted ,detail msg:Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-192.168.31.31:3333, Pool Size: 200 (active: 200, core: 200, max: 200, largest: 200), Task: 4395 (completed: 4195), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://192.168.31.31:3333!</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.returnFromResponse(DefaultFuture.java:218)</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)</span><br><span class="line">... 69 common frames omitted</span><br></pre></td></tr></table></figure></p><h1 id="3-异常分析"><a href="#3-异常分析" class="headerlink" title="3. 异常分析"></a>3. 异常分析</h1><p>从异常的信息看，有两种可能：</p><ol><li><code>dubbo</code>线程池耗尽</li><li><code>druid</code>连接池耗尽<br>先增加<code>dubbo</code>线程池的数量，默认为200。改大后又报超时的错误：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2018-09-14 15:04:45.223 [http-nio-1111-exec-194] ERROR cn.lilyssh.common.exception.ExceptionAdviceHandler  - 处理出现异常</span><br><span class="line">com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method exist in the service cn.lilyssh.user.api.service.UserServiceApi. Tried 3 times of the providers [192.168.31.31:6666] (1/1) from the registry ssh.qianxunclub.com:2181 on the consumer 192.168.31.31 using the dubbo version 2.6.0. Last error is: Invoke remote method timeout. method: exist, provider: dubbo://192.168.31.31:6666/cn.lilyssh.user.api.service.UserServiceApi?anyhost=true&amp;application=order-consumer&amp;check=false&amp;default.check=false&amp;dubbo=2.6.0&amp;generic=false&amp;interface=cn.lilyssh.user.api.service.UserServiceApi&amp;methods=exist,list&amp;pid=3307&amp;register.ip=192.168.31.31&amp;remote.timestamp=1536908653179&amp;side=consumer&amp;timestamp=1536908663628, cause: Waiting server-side response timeout. start time: 2018-09-14 15:04:43.837, end time: 2018-09-14 15:04:44.860, client elapsed: 1 ms, server elapsed: 1022 ms, timeout: 1000 ms, request: Request [id=590, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=exist, parameterTypes=[class java.lang.Integer], arguments=[4], attachments=&#123;path=cn.lilyssh.user.api.service.UserServiceApi, interface=cn.lilyssh.user.api.service.UserServiceApi, version=0.0.0&#125;]], channel: /192.168.31.31:61708 -&gt; /192.168.31.31:6666</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:101)</span><br><span class="line">at java.base/java.lang.Thread.run(Thread.java:844)</span><br><span class="line">Caused by: com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-09-14 15:04:43.837, end time: 2018-09-14 15:04:44.860, client elapsed: 1 ms, server elapsed: 1022 ms, timeout: 1000 ms, request: Request [id=590, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=exist, parameterTypes=[class java.lang.Integer], arguments=[4], attachments=&#123;path=cn.lilyssh.user.api.service.UserServiceApi, interface=cn.lilyssh.user.api.service.UserServiceApi, version=0.0.0&#125;]], channel: /192.168.31.31:61708 -&gt; /192.168.31.31:6666</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.support.DefaultFuture.get(DefaultFuture.java:134)</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:77)</span><br><span class="line">... 69 common frames omitted</span><br></pre></td></tr></table></figure></li></ol><p>把<code>timeout</code>默认为1秒，改为5秒：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line"><span class="attr">      address:</span> <span class="attr">zookeeper://ssh.qianxunclub.com:2181</span></span><br><span class="line"><span class="attr">    provider:</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">6666</span></span><br><span class="line"><span class="comment">#      threads: 1000</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="comment">#    protocol:</span></span><br><span class="line"><span class="comment">#      threads: 1000</span></span><br></pre></td></tr></table></figure></p><p>依旧报错：threadpool is exhausted.<br>druid最大连接数max-active默认为8，改为20：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://db.qianxunclub.com:3306/demo</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>继续测试，<code>jmeter</code>报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">java.net.NoRouteToHostException: Can&apos;t assign requested address (Address not available)</span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)</span><br><span class="line">at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)</span><br><span class="line">at org.apache.jmeter.protocol.http.sampler.hc.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:318)</span><br><span class="line">at org.apache.jmeter.protocol.http.sampler.MeasuringConnectionManager$MeasuredConnection.open(MeasuringConnectionManager.java:114)</span><br><span class="line">at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)</span><br><span class="line">at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)</span><br><span class="line">at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)</span><br><span class="line">at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)</span><br><span class="line">at org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.executeRequest(HTTPHC4Impl.java:697)</span><br><span class="line">at org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.sample(HTTPHC4Impl.java:455)</span><br><span class="line">at org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy.sample(HTTPSamplerProxy.java:74)</span><br><span class="line">at org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.sample(HTTPSamplerBase.java:1189)</span><br><span class="line">at org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.sample(HTTPSamplerBase.java:1178)</span><br><span class="line">at org.apache.jmeter.threads.JMeterThread.executeSamplePackage(JMeterThread.java:490)</span><br><span class="line">at org.apache.jmeter.threads.JMeterThread.processSampler(JMeterThread.java:416)</span><br><span class="line">at org.apache.jmeter.threads.JMeterThread.run(JMeterThread.java:250)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure></p><p>修改了<code>jmeter</code>的<code>implementation</code>参数设置，就解决了报错的问题。修改如下：<br><img src="https://resource.lilyssh.cn/pic/http_java.png" alt></p><h1 id="4-解决办法"><a href="#4-解决办法" class="headerlink" title="4. 解决办法"></a>4. 解决办法</h1><p><code>druid</code>最大连接数<code>max-active</code>默认为8，改为20：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Druid </tag>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(三) Spring Boot 集成 mybatis-plus</title>
      <link href="/architecture/3-spring-boot-integration-mybatis-plus/"/>
      <url>/architecture/3-spring-boot-integration-mybatis-plus/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82753716" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82753716</a>  </p><p>Spring Boot 2.0.4 集成 <a href="http://mp.baomidou.com/" target="_blank" rel="noopener">mybatisplus-spring-boot-starter 1.0.5</a> 。<a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="1-初始化工程"><a href="#1-初始化工程" class="headerlink" title="1. 初始化工程"></a>1. 初始化工程</h1><p>工程 user-provider的结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── cn</span><br><span class="line">        │       └── lilyssh</span><br><span class="line">        │           └── user</span><br><span class="line">        │               └── provider</span><br><span class="line">        │                   ├── UserProviderApplication.java</span><br><span class="line">        │                   ├── dao</span><br><span class="line">        │                   │   ├── entity</span><br><span class="line">        │                   │   │   └── UserEntity.java</span><br><span class="line">        │                   │   ├── mapper</span><br><span class="line">        │                   │   │   └── UserMapper.java</span><br><span class="line">        │                   │   └── repository</span><br><span class="line">        │                   │       └── UserRepository.java</span><br><span class="line">        │                   └── service</span><br><span class="line">        │                       └── UserService.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── application.yml</span><br></pre></td></tr></table></figure></p><h1 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h1><p>在<code>user-provider</code>工程中打开<code>pom.xml</code>加入以下依赖。<br>引入<code>mybatis-plus-boot-starter</code>依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="3-编码"><a href="#3-编码" class="headerlink" title="3. 编码"></a>3. 编码</h1><p>(1) 编写Mapper类，要加<code>@Mapper</code>，继承<code>BaseMapper&lt;T&gt;</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.provider.dao.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.provider.dao.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2) 编写repository类，继承<code>ServiceImpl&lt;xxMapper, xxEntity&gt;</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.provider.dao.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.provider.dao.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.provider.dao.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3) 添加接口实现类，调用<code>mybatis plus</code>提供的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.user.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.api.model.response.UserQueryResp;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.api.service.UserServiceApi;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.provider.dao.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.user.provider.dao.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span>  <span class="keyword">implements</span> <span class="title">UserServiceApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserQueryResp&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; qw = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        List&lt;UserEntity&gt; userEntityList = userRepository.list(qw);</span><br><span class="line">        List&lt;UserQueryResp&gt; resultList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userEntityList.forEach(userEntity-&gt;&#123;</span><br><span class="line">            UserQueryResp  userQueryResp=<span class="keyword">new</span> UserQueryResp();</span><br><span class="line">            BeanUtils.copyProperties(userEntity,userQueryResp);</span><br><span class="line">            resultList.add(userQueryResp);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h1><p>(1) 使用<code>telnet</code>模拟调用<code>dubbo</code>服务,端口为user-provider.xml里配置的dubbo端口，默认20880。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 20880</span><br></pre></td></tr></table></figure></p><p>如果连接成功，会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line"></span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure></p><p>(2) 使用<code>ls</code>查看所有服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;ls</span><br><span class="line">cn.lilyssh.user.api.service.UserServiceApi</span><br></pre></td></tr></table></figure></p><p>(3) 使用<code>cd</code>进入到com.qianxunclub.demo.dubbo.DemoService中,并使用<code>ls</code>查看服务里的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;cd cn.lilyssh.user.api.service.UserServiceApi</span><br><span class="line">Used the cn.lilyssh.user.api.service.UserServiceApi as default.</span><br><span class="line">You can cancel default service by command: cd /</span><br><span class="line">dubbo&gt;ls</span><br><span class="line">Use default service cn.lilyssh.user.api.service.UserServiceApi.</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure></p><p>(4) 使用<code>invoke</code>模拟客户端调用服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;invoke list()</span><br></pre></td></tr></table></figure></p><p>会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Use default service cn.lilyssh.user.api.service.UserServiceApi.</span><br><span class="line">[&#123;&quot;age&quot;:0,&quot;id&quot;:1,&quot;idType&quot;:0,&quot;phone&quot;:0,&quot;sex&quot;:0,&quot;status&quot;:0,&quot;userName&quot;:&quot;Tom&quot;,&quot;uuid&quot;:&quot;3&quot;&#125;,&#123;&quot;age&quot;:0,&quot;id&quot;:2,&quot;idType&quot;:0,&quot;phone&quot;:0,&quot;sex&quot;:0,&quot;status&quot;:0,&quot;userName&quot;:&quot;Mike&quot;,&quot;uuid&quot;:&quot;4&quot;&#125;]</span><br><span class="line">elapsed: 83 ms.</span><br></pre></td></tr></table></figure></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> MyBatis Plus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(二) Spring Boot 集成 druid</title>
      <link href="/architecture/2-spring-boot-integration-druid/"/>
      <url>/architecture/2-spring-boot-integration-druid/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82753582" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82753582</a>  </p><p>Spring Boot 2.0.4 集成 druid 1.1.10 。<a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a><br><a id="more"></a></p><h1 id="1-初始化工程"><a href="#1-初始化工程" class="headerlink" title="1. 初始化工程"></a>1. 初始化工程</h1><p>工程 user-provider的结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── cn</span><br><span class="line">        │       └── lilyssh</span><br><span class="line">        │           └── user</span><br><span class="line">        │               └── provider</span><br><span class="line">        │                   └── UserProviderApplication.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── application.yml</span><br></pre></td></tr></table></figure></p><h1 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h1><p>打开 <code>pom.xml</code> 引入<code>druid-spring-boot-starter</code>、<code>mysql-connector-java</code>、<code>spring-boot-starter-jdbc</code>、<code>lombok</code> 依赖：(引入lombok是为了方便实体类中get、set方法的自动生成，并不是连接池需要)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><p> (1) 在 <code>application.yml</code>配置文件中添加数据库的相关配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://db.qianxunclub.com:3306/demo</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">zhangbin</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">ghdxZSuz+strVRCKInFX8Vp1vjMksZgb5tELqcc7Gkv7c2pQEFSFGDCy8qfbCZdRdG4VVVwS7rIKCFGWZh0OgQ==</span></span><br><span class="line"><span class="attr">      filters:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">      connection-properties:</span> <span class="string">"config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALCr8UOmkUhwi+xhbpYaSPOMPxw/Rh3KCzIS9VPTo6fleRLXAP9zCC+9s9f88l/GuN4PI4yDPqg4qT6iQpsREA0CAwEAAQ=="</span></span><br></pre></td></tr></table></figure></p><p>(2) 上一步的数据库密码 加密步骤：<br>(2.1) 执行命令加密数据库密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.m2/repository/com/alibaba/druid/1.1.10</span><br><span class="line"></span><br><span class="line">$ java -cp druid-1.1.10.jar com.alibaba.druid.filter.config.ConfigTools you_password</span><br></pre></td></tr></table></figure></p><p>会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privateKey: xxx</span><br><span class="line">publicKey: ***</span><br><span class="line">password: &amp;&amp;&amp;</span><br></pre></td></tr></table></figure></p><p>输入你的数据库密码，输出的是加密后的结果。<br>(2.2) 配置数据源，提示Druid数据源需要对数据库密码进行解密。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">datasource:</span><br><span class="line">    druid:</span><br><span class="line">      url: jdbc:mysql://db.qianxunclub.com:3306/demo</span><br><span class="line">      username: zhangbin</span><br><span class="line">      password: $&#123;password&#125;</span><br><span class="line">      filters: config</span><br><span class="line">      connection-properties: config.decrypt=true;config.decrypt.key=$&#123;publickey&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h1><p>mvn clean package，报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project user-api: Fatal error compiling: java.lang.ExceptionInInitializerError: com.sun.tools.javac.code.TypeTags -&gt; [Help 1]</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br></pre></td></tr></table></figure></p><p>解决办法：<br>这是java10下编译lombok 1.16.20版本的问题，通过升级到1.16.22即可搞定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.16.22&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>用<code>jmeter</code>压测，会出现错误：线程池耗尽。具体解决办法参考文章：<a href="https://lilyssh.cn/exception/1-threadpool-is-exhausted/">threadpool is exhausted</a><br>大功告成！</p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构实战(一) 电商系统设计</title>
      <link href="/architecture/1-high-concurrency-design/"/>
      <url>/architecture/1-high-concurrency-design/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82753318" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82753318</a></p><h1 id="电商平台微服务架构设计"><a href="#电商平台微服务架构设计" class="headerlink" title="电商平台微服务架构设计"></a>电商平台微服务架构设计</h1><p>按照孢子框架要义对电商平台进行微服务架构设计。假设我们设计的目标是简易版淘宝。<br><a id="more"></a><br><a href="https://gitee.com/lilyssh/high-concurrency" target="_blank" rel="noopener">项目源码地址</a>  </p><h1 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h1><p>由于主要是学习技术，所以没对业务规划得过于详细和全面。大的功能分为三个，用户、商品、订单。主要需求如下：</p><table><thead><tr><th>分类</th><th>功能</th><th>质量</th></tr></thead><tbody><tr><td>前端首页</td><td>注册</td><td>及时响应、安全性</td></tr><tr><td>&nbsp;</td><td>商品展示</td><td>及时响应、搜索引擎优化</td></tr><tr><td>&nbsp;</td><td>商品搜索</td><td>及时响应、搜索引擎优化</td></tr><tr><td>&nbsp;</td><td>秒杀购买商品</td><td>及时响应、安全性、可靠性</td></tr><tr><td>用户中心</td><td>我的订单</td><td>及时响应、安全性</td></tr></tbody></table><h1 id="2-系统分析"><a href="#2-系统分析" class="headerlink" title="2. 系统分析"></a>2. 系统分析</h1><p>要将需求进行系统分析，还需要有企业的运营目标做支持。假设我们运营目标是：</p><ul><li>用户量：3000万</li><li>网站日访问量：3000万PV</li><li>商品购买并发：1000 QPS<br>我们按照上面的需求进行系统分析，首先按大的职责将职责相同的划分为一个服务。并且有了上面这个运营目标，所有功能需求都需要增加一项“质量”特性，那就是“高并发”，高并发会影响到所有设计。安全性和可靠性也会直接影响功能的技术实现，但并没有并发性影响性大。深入分析职责后把每一种功能的实现关键技术列出，如下：   </li></ul><table><thead><tr><th>分类</th><th>需求</th><th>实现子系统及服务</th><th>实现技术（软硬件结合）</th></tr></thead><tbody><tr><td>前端首页</td><td>商品展示、商品搜索</td><td>商品系统</td><td>集群部署、高速缓存、分布式缓存、搜索引擎技术、静态化</td></tr><tr><td>&nbsp;</td><td>秒杀购买商品</td><td>订单系统</td><td>集群部署、消息队列、实时计算</td></tr><tr><td>用户中心</td><td>我的订单</td><td>订单系统</td><td>集群部署</td></tr></tbody></table><p>如上所述，要支持运营目标的电商平台，可以分为大小几个服务和子系统。系统划分的依据一方面是职责，一方面跟实现技术有关，同一职责下实现技术不同会被划分为两个服务，比如购买商品和商品展示原本属于同一个大的领域，但其因为实现技术和质量要求不同需要划分为两个模块。这是因为微服务和传统SOA最大的区别就是技术实现的个性化，只有个性化才能做好做专，并节省成本。用户购买产品产生订单相关数据，订单数据关系到商品和用户两方面，如果是超高并发的系统，用户购买行为需要单独的服务。</p><h1 id="3-逻辑架构"><a href="#3-逻辑架构" class="headerlink" title="3. 逻辑架构"></a>3. 逻辑架构</h1><p>逻辑视图采用以下方法建立。<br><img src="https://resource.lilyssh.cn/pic/logical_architecture_method.png" alt><br>按照职责、通用性、技能及工作量综合考虑和计量，平台逻辑架构设计如下图：<br><img src="https://resource.lilyssh.cn/pic/technical_architecture_1.png" alt><br>用户通过终端层发起请求，请求经由网关层nginx，路由到业务层，业务层通过业务逻辑判断，再访问数据访问层，数据访问层再通过数据库层获取到想要的内容。</p><ul><li>使用kafka，可优化下单性能，可以处理秒抢，或者异步处理一些事情，如送下单后优惠券。</li><li>使用Elasticsearch，可优化商品查询，商品一般数据量比较大，用户经常模糊查询，近义词要能查出来，且要求及时响应，Elasticsearch正好能解决这种难题，所以非它莫属啦！</li><li>使用mongoDB，可优化订单列表。后台订单经常按照时间查询订单列表。</li><li>使用redis，可优化库存管理，以免在秒抢时，出现多用户同时抢到同一商品的情况。<h1 id="4-开发架构"><a href="#4-开发架构" class="headerlink" title="4. 开发架构"></a>4. 开发架构</h1>系统所需的工程：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/gitee/high-concurrency on master ⌚ 9:54:01</span><br><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── common            //公共模块 [cn.lilyssh.common]</span><br><span class="line">├── config-server     //分布式配置中心服务 [cn.lilyssh.config]</span><br><span class="line">├── goods             //商品服务</span><br><span class="line">│   ├── goods-api         //实体类和接口定义层 [cn.lilyssh.goods.api]</span><br><span class="line">│   ├── goods-consumer    //接口访问层 [cn.lilyssh.goods.consumer]</span><br><span class="line">│   └── goods-provider    //数据访问层 [cn.lilyssh.goods.provider]</span><br><span class="line">├── order             //订单服务</span><br><span class="line">│   ├── order-api         //实体类和接口定义层 [cn.lilyssh.order.api]</span><br><span class="line">│   ├── order-consumer    //接口访问层 [cn.lilyssh.order.consumer]</span><br><span class="line">│   └── order-provider    //数据访问层 [cn.lilyssh.order.provider]</span><br><span class="line">└── user              //用户服务</span><br><span class="line">    ├── user-api          //实体类和接口定义层 [cn.lilyssh.user.api]</span><br><span class="line">    ├── user-consumer     //接口访问层 [cn.lilyssh.user.consumer]</span><br><span class="line">    └── user-provider     //数据访问层 [cn.lilyssh.user.provider]</span><br></pre></td></tr></table></figure></li></ul><p>开发环境：</p><table><thead><tr><th>编码</th><th>工具</th><th>版本控制</th><th>JDK</th><th>开发环境 </th></tr></thead><tbody><tr><td>UTF-8</td><td>IDEA</td><td>Git</td><td>JDK1.8</td><td>Maven 3 </td></tr></tbody></table><p>开发技术选型：</p><table><thead><tr><th>分类</th><th>实现</th><th>分类</th><th>实现</th></tr></thead><tbody><tr><td>MVC框架：</td><td>Spring Boot 2.0.4</td><td>Rest接口实现：</td><td>Spring MVC Rest</td></tr><tr><td>持久层：</td><td>mybatisplus-spring-boot 1.0.5</td><td>数据库连接池：</td><td>druid 1.1.10 </td></tr><tr><td>分库分表：</td><td>mycat</td><td>数据库：</td><td>MySql 5.6</td></tr><tr><td>缓存框架：</td><td>Redis、mongoDB</td><td>搜索引擎：</td><td>Elasticsearch</td></tr><tr><td>网关：</td><td>Nginx、Kong(纯属学习使用)</td><td>API 开发：</td><td>swagger</td></tr><tr><td>RPC框架：</td><td>dubbo-spring-boot 2.0.0</td><td>注册中心：</td><td>zookeeper </td></tr><tr><td>日志管理：</td><td>SLF4J</td><td>消息队列：</td><td>Kafka </td></tr><tr><td>分布式配置中心：</td><td>spring cloud config</td><td>部署：</td><td>Jenkins</td></tr></tbody></table><h2 id="1-微服务的架构"><a href="#1-微服务的架构" class="headerlink" title="1).微服务的架构"></a>1).微服务的架构</h2><p>每个微服务的架构基本上是一致的。拿order来说，分为 order-api、order-consumer、order-provider。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/gitee/high-concurrency/order on master ⌚ 11:18:53</span><br><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── order-api</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           └── java</span><br><span class="line">│               └── cn.lilyssh.order.api</span><br><span class="line">│                   ├── model</span><br><span class="line">│                   │   ├── request</span><br><span class="line">│                   │   │   ├── OrderInsertReq.java</span><br><span class="line">│                   │   │   └── OrderQueryReq.java</span><br><span class="line">│                   │   └── response</span><br><span class="line">│                   │       └── OrderQueryResp.java</span><br><span class="line">│                   └── service</span><br><span class="line">│                       └── OrderServiceApi.java</span><br><span class="line">├── order-consumer</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn</span><br><span class="line">│           │       └── lilyssh</span><br><span class="line">│           │           └── order</span><br><span class="line">│           │               └── consumer</span><br><span class="line">│           │                   ├── OrderConsumerApplication.java</span><br><span class="line">│           │                   ├── controller</span><br><span class="line">│           │                   │   └── OrderController.java</span><br><span class="line">│           │                   └── service</span><br><span class="line">│           │                       └── OrderService.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               ├── application.yml</span><br><span class="line">│               └── bootstrap.yml</span><br><span class="line">├── order-provider</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn</span><br><span class="line">│           │       └── lilyssh</span><br><span class="line">│           │           └── order</span><br><span class="line">│           │               └── provider</span><br><span class="line">│           │                   ├── OrderProviderApplication.java</span><br><span class="line">│           │                   ├── dao</span><br><span class="line">│           │                   │   ├── entity</span><br><span class="line">│           │                   │   │   └── OrderEntity.java</span><br><span class="line">│           │                   │   ├── mapper</span><br><span class="line">│           │                   │   │   └── OrderMapper.java</span><br><span class="line">│           │                   │   └── repository</span><br><span class="line">│           │                   │       └── OrderRepository.java</span><br><span class="line">│           │                   └── service</span><br><span class="line">│           │                       └── OrderService.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               ├── application.yml</span><br><span class="line">│               └── bootstrap.yml</span><br><span class="line">└── pom.xml</span><br></pre></td></tr></table></figure></p><ul><li>api项目 提供 前端与consumer层 以及 consumer层与provider层 进行数据传递的实体类和接口xxServiceApi，实体类分为请求类和响应类，这两个包中又根据不同的业务需求分为不同的实体类。实体和接口访问层虽然属于“层”，但它们并不单独发布，而是使用Jar包类库的方式提供给其它服务调用，是逻辑上的层。其他任意项目可dependency此api模块，并调用此api模块提供的接口。</li><li>consumer 项目中包含controller层和service层，controller给前端提供rest接口，它调用service的方法，service中写业务逻辑，且调用api模块的接口ServiceApi。</li><li>provider 项目的主要任务是为api项目的接口xxServiceApi提供实现，即xxService，进行数据访问，分为entity，mapper，repository，entity中存放与数据库表字段一一映射的实体类，用于与数据库进行数据传递的交互。mapper由于继承了mybatisplus的BaseMapper,所以本身提供了增删改查等基本方法，如需自定义方法，可自行添加。repository可对业务逻辑进行进一步的拆解。</li><li>配置文件application.yml中存放与其他项目不可公用的配置，如端口，其他公用的配置放在分布式配置中心，bootstrap.yml文件中设置分布式配置中心服务地址，和需要下载的配置文件。由于consumer和provider中都用到了配置文件，所以把这点拿出来单独说。<h2 id="2-分布式配置中心"><a href="#2-分布式配置中心" class="headerlink" title="2).分布式配置中心"></a>2).分布式配置中心</h2>我们来看一下配置服务config-server项目的目录结构：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/gitee/high-concurrency/config-server on master ⌚ 16:10:35</span><br><span class="line">$ tree -I target</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── cn</span><br><span class="line">        │       └── lilyssh</span><br><span class="line">        │           └── config</span><br><span class="line">        │               └── ConfigApplication.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── application.yml</span><br></pre></td></tr></table></figure></li></ul><p><code>application.yml</code>中用来设置配置仓库地址。</p><h2 id="3-公用的项目"><a href="#3-公用的项目" class="headerlink" title="3).公用的项目"></a>3).公用的项目</h2><p>即common项目的目录结构。common项目主要是放一些工具类、异常的统一捕获处理，还有consumer对前端返回结果的统一封装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/gitee/high-concurrency/common on master ⌚ 16:20:17</span><br><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── cn</span><br><span class="line">        │       └── lilyssh</span><br><span class="line">        │           └── common</span><br><span class="line">        │               ├── date</span><br><span class="line">        │               │   └──DateUtil.java</span><br><span class="line">        │               ├── exception</span><br><span class="line">        │               │   └── ExceptionAdviceHandler.java</span><br><span class="line">        │               ├── result</span><br><span class="line">        │               │   ├── Result.java</span><br><span class="line">        │               │   ├── ReturnCode.java</span><br><span class="line">        │               │   └── ReturnCodeInterFace.java</span><br><span class="line">        │               └── validate</span><br><span class="line">        │                   └── ValidateGroup.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── META-INF</span><br><span class="line">                └── spring.factories</span><br></pre></td></tr></table></figure></p><h1 id="5-表结构"><a href="#5-表结构" class="headerlink" title="5. 表结构"></a>5. 表结构</h1><p>用户表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `uuid` varchar(45) DEFAULT NULL,</span><br><span class="line">  `user_name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `password` varchar(45) DEFAULT NULL,</span><br><span class="line">  `real_name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `sex` bit(1) DEFAULT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `phone` int(11) DEFAULT NULL,</span><br><span class="line">  `email` varchar(45) DEFAULT NULL,</span><br><span class="line">  `status` tinyint(1) DEFAULT NULL,</span><br><span class="line">  `last_login_ip` varchar(45) DEFAULT NULL,</span><br><span class="line">  `last_login_time` datetime DEFAULT NULL,</span><br><span class="line">  `id_type` int(11) DEFAULT NULL,</span><br><span class="line">  `id_number` varchar(45) DEFAULT NULL,</span><br><span class="line">  `address` varchar(45) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>订单表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `order` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL,</span><br><span class="line">  `user_uuid` varchar(45) DEFAULT NULL,</span><br><span class="line">  `goods_id` int(11) DEFAULT NULL COMMENT &apos;商品ID&apos;,</span><br><span class="line">  `payment` decimal(14,2) DEFAULT NULL COMMENT &apos;实付金额&apos;,</span><br><span class="line">  `pay_type` tinyint(1) DEFAULT NULL COMMENT &apos;支付类型：1 在线支付 2 货到付款&apos;,</span><br><span class="line">  `post_fee` decimal(6,2) DEFAULT NULL,</span><br><span class="line">  `status` tinyint(2) DEFAULT NULL,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  `pay_time` datetime DEFAULT NULL,</span><br><span class="line">  `cosign_time` datetime DEFAULT NULL COMMENT &apos;发货时间&apos;,</span><br><span class="line">  `end_time` datetime DEFAULT NULL COMMENT &apos;交易完成时间&apos;,</span><br><span class="line">  `close_time` datetime DEFAULT NULL COMMENT &apos;交易关闭时间&apos;,</span><br><span class="line">  `shipping_name` varchar(20) DEFAULT NULL COMMENT &apos;物流名称&apos;,</span><br><span class="line">  `shipping_code` varchar(45) DEFAULT NULL COMMENT &apos;物流单号&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>商品表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `goods` (</span><br><span class="line">  `id` mediumint(8)  NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `goods_name` varchar(45) NOT NULL COMMENT &apos;商品名称&apos;,</span><br><span class="line">  `stock` int(11) NOT NULL,</span><br><span class="line">  `logo` varchar(150) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;商品logo&apos;,</span><br><span class="line">  `sm_logo` varchar(150) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;商品缩略图logo&apos;,</span><br><span class="line">  `price` decimal(10,2) NOT NULL DEFAULT &apos;0.00&apos; COMMENT &apos;商品价格&apos;,</span><br><span class="line">  `goods_desc` longtext COMMENT &apos;商品描述&apos;,</span><br><span class="line">  `is_on_sale` tinyint(3)  NOT NULL DEFAULT &apos;1&apos; COMMENT &apos;是否上架：1：上架，0：下架&apos;,</span><br><span class="line">  `is_delete` tinyint(3)  NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;是否已经删除，1：已经删除 0：未删除&apos;,</span><br><span class="line">  `create_time` int(10)  NOT NULL COMMENT &apos;添加时间&apos;,</span><br><span class="line">  `update_time` int(10)  NOT NULL COMMENT &apos;修改时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 高并发架构实战 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网上养狗证办理步骤</title>
      <link href="/life/1-certificate-of-holding-dogs/"/>
      <url>/life/1-certificate-of-holding-dogs/</url>
      <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/84143423" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/84143423</a><br>由于图片放在国外的github上，所以图片加载会有点慢，如若引起不适，忍着！</p><h1 id="1-资料准备："><a href="#1-资料准备：" class="headerlink" title="1. 资料准备："></a>1. 资料准备：</h1><ul><li>本人有效身份证件  </li><li>住址证明  </li><li>犬只照片（全身彩照，四肢站立、侧身回头、能看见犬只双眼。一寸犬头照一张、三寸犬全身照一张）。  </li><li>狂犬免疫证<br><img src="https://resource.lilyssh.cn/pic/application-material.png" alt><h1 id="2-登录广东政务服务网"><a href="#2-登录广东政务服务网" class="headerlink" title="2. 登录广东政务服务网"></a>2. 登录广东政务服务网</h1><a href="http://www.gdzwfw.gov.cn/" target="_blank" rel="noopener">http://www.gdzwfw.gov.cn/</a> 注册、登录。不要用QQ浏览器，因为后面会显示不出来单选按钮，LZ换了谷歌浏览器。<h1 id="3-搜索养犬初始登记"><a href="#3-搜索养犬初始登记" class="headerlink" title="3. 搜索养犬初始登记"></a>3. 搜索养犬初始登记</h1><img src="https://resource.lilyssh.cn/pic/search-dog-registration.png" alt><br><img src="https://resource.lilyssh.cn/pic/search-result.png" alt><br>选择地点，点击在线办理。<br><img src="https://resource.lilyssh.cn/pic/online-declaration.png" alt><br>点击在线申报，会进入养犬初始登记（养犬证）办理页面。<h1 id="4-填写养犬初始登记（养犬证）办理表"><a href="#4-填写养犬初始登记（养犬证）办理表" class="headerlink" title="4. 填写养犬初始登记（养犬证）办理表"></a>4. 填写养犬初始登记（养犬证）办理表</h1><img src="https://resource.lilyssh.cn/pic/application.png" alt><br>填写完信息以后，点击打印按钮，<br><img src="https://resource.lilyssh.cn/pic/print-application.png" alt><br>会下载下来一个pdf文件，由于这里没打印机，所以LZ决定用ps，把狗子照片粘贴到办理表上。如果狗友们有打印机的话，可以打印出来，粘上狗子照片，拍照，转成pdf格式，直接跳过第4步，往下走。<h1 id="4、把照片P到申请表上（如果不想打印出来贴照片的）"><a href="#4、把照片P到申请表上（如果不想打印出来贴照片的）" class="headerlink" title="4、把照片P到申请表上（如果不想打印出来贴照片的）"></a>4、把照片P到申请表上（如果不想打印出来贴照片的）</h1><h2 id="1-下载creative-cloud"><a href="#1-下载creative-cloud" class="headerlink" title="(1) 下载creative-cloud"></a>(1) 下载creative-cloud</h2><a href="https://creative.adobe.com/zh-cn/products/download/creative-cloud" target="_blank" rel="noopener">https://creative.adobe.com/zh-cn/products/download/creative-cloud</a><h2 id="2-下载ps"><a href="#2-下载ps" class="headerlink" title="(2) 下载ps"></a>(2) 下载ps</h2><img src="https://resource.lilyssh.cn/pic/download-ps.png" alt><h2 id="3-把狗子照片粘贴到pdf上"><a href="#3-把狗子照片粘贴到pdf上" class="headerlink" title="(3) 把狗子照片粘贴到pdf上"></a>(3) 把狗子照片粘贴到pdf上</h2>点击 文件 -&gt; 打开，打开pdf、狗子照片，<br><img src="https://resource.lilyssh.cn/pic/open-application.png" alt><br>会分别在两个标签页，把狗子照片的标签页缩小一点，然后把狗子照片拖进pdf：<br><img src="https://resource.lilyssh.cn/pic/drag.png" alt><br>按住 Ctrl + T ,来调整图片大小，并把照片放在合适的位置，放好后，按Enter键确认。之后，效果如下：<br><img src="https://resource.lilyssh.cn/pic/application-result.png" alt><h2 id="4-保存为pdf"><a href="#4-保存为pdf" class="headerlink" title="(4) 保存为pdf"></a>(4) 保存为pdf</h2>点击 文件 -&gt; 存储为，格式选择 Photoshop PDF：<br><img src="https://resource.lilyssh.cn/pic/save-pdf-1.png" alt><br><img src="https://resource.lilyssh.cn/pic/save-pdf-2.png" alt><br>贴好狗子照片版本的 养狗证申请表副本.pdf 就制作完成了！艾玛！不容易呀！<h1 id="5-上传资料"><a href="#5-上传资料" class="headerlink" title="5. 上传资料"></a>5. 上传资料</h1>上传前，需要先把每个照片，转换成pdf格式：<br><img src="https://resource.lilyssh.cn/pic/cast-format.png" alt><br>接下来，我们再次回到填办理表的地方，滑到下面，上传资料。<br><img src="https://resource.lilyssh.cn/pic/wait-upload.png" alt><br>点击上图红框里的图标，会弹出上传页面：<br><img src="https://resource.lilyssh.cn/pic/upload-1.png" alt><br><img src="https://resource.lilyssh.cn/pic/upload-2.png" alt><br>完全上传完后，后面会显示每个资料的上传张数：<br><img src="https://resource.lilyssh.cn/pic/after-upload.png" alt><br>点击下一步，输入邮寄地址：<br><img src="https://resource.lilyssh.cn/pic/at-last.png" alt><br>点击下一步，输入手机验证码：<br><img src="https://resource.lilyssh.cn/pic/send-code.png" alt><br>点击下一步，截止到文章发布时，还在转圈，LZ F12了一下，艾玛！不忍直视呀：<br><img src="https://resource.lilyssh.cn/pic/last-last.png" alt><br>zf网站做得好差劲。。建议zf多花点钱，招点做双十一的程序员过去重新做下。一打出来zf俩字，竟然变成待审核了。。<br>又重新操作了一遍，成功！！！<br><img src="https://resource.lilyssh.cn/pic/success-1.png" alt><br><img src="https://resource.lilyssh.cn/pic/success-2.png" alt><br>三天后，会收到短信：<br><img src="https://resource.lilyssh.cn/pic/zwfw-msg-1.JPG" alt><br>接下来我们再来看几个反面案例，我只想对她们说：“作为失败的典型，你实在是太成功啦！”。<br><img src="https://resource.lilyssh.cn/pic/failed-1.JPG" alt><br><img src="https://resource.lilyssh.cn/pic/failed-2.JPG" alt><br>大功告成！</li></ul>]]></content>
      
      <categories>
          
          <category> 养狗证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 养狗证 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh警告: REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
      <link href="/exception/4-mote-host-identification-has-changed/"/>
      <url>/exception/4-mote-host-identification-has-changed/</url>
      <content type="html"><![CDATA[<h1 id="1-异常描述"><a href="#1-异常描述" class="headerlink" title="1. 异常描述"></a>1. 异常描述</h1><a id="more"></a><p>在远程连接服务器时报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~ ⌚ 14:03:35</span><br><span class="line">$ ssh root@ssh.qianxunclub.com</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:XoSjIjyhyQYeWVkAwwRdB/akalMTPJIRBoShLfMxEVY.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /Users/cypher02/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in /Users/cypher02/.ssh/known_hosts:1</span><br><span class="line">ECDSA host key for ssh.qianxunclub.com has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure></p><h1 id="2-异常分析"><a href="#2-异常分析" class="headerlink" title="2. 异常分析"></a>2. 异常分析</h1><p>ssh会把每个你访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH会核对公钥。如果公钥不同，OpenSSH会发出警告， 避免你受到DNS Hijack之类的攻击。<br>此处原因是由于把服务器的系统从centos换成了ubantu.</p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h1><p>有以下两个解决方案：</p><ol><li><p>删除known_hsots； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .ssh/known_hosts</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件“~/.ssh/config”，加上这两行，重启服务器。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StrictHostKeyChecking no </span><br><span class="line">UserKnownHostsFile /dev/null</span><br></pre></td></tr></table></figure></li></ol><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> Exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>无</p>]]></content>
    </entry>
    
    <entry>
      <title>标签云</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
