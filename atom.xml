<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lilyssh</title>
  
  <subtitle>lilyssh</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lilyssh.cn/"/>
  <updated>2019-05-03T11:20:49.395Z</updated>
  <id>https://lilyssh.cn/</id>
  
  <author>
    <name>lilyssh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka原理</title>
    <link href="https://lilyssh.cn/architecture/13-kafka/"/>
    <id>https://lilyssh.cn/architecture/13-kafka/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.395Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a> 2.0.0。<br><a id="more"></a></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>分布式的消息和订阅系统，高性能、高吞吐量。<br>内置分区（对数据做分片处理）、实现集群、有容错能力和数据复制能力。</p><h1 id="二、产生背景"><a href="#二、产生背景" class="headerlink" title="二、产生背景"></a>二、产生背景</h1><p>领英要对用户的行为进行统计。</p><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><p>行为跟踪：收集用户的操作行为。可以根据爱好做推送。<br>日志收集。</p><h1 id="四、术语"><a href="#四、术语" class="headerlink" title="四、术语"></a>四、术语</h1><ul><li>Topic<br>存储消息的逻辑概念。</li><li>Partition</li></ul><ol><li>每个topic可以划分多个分区。</li><li>相同topic下的不同分区的消息是不同的。如果是集群，分区会均分在集群机子上。<br><img src="https://resource.lilyssh.cn/pic/kafka-partition.png" alt><br>设置分区目的：减少消息容量，从而提升io性能。</li></ol><h1 id="五、架构"><a href="#五、架构" class="headerlink" title="五、架构"></a>五、架构</h1><p><img src="https://resource.lilyssh.cn/pic/kafka-architecture.png" alt><br>一个kafka集群会包含多个broker，它又依赖zookeeper的集群，去实现broker之间的master-slaver机制。<br>多个producer，多个consumer。<br>消费者去broker里pull消息的。而mq是主动推送给消费者。</p><h1 id="六、消息的同步发送和异步发送"><a href="#六、消息的同步发送和异步发送" class="headerlink" title="六、消息的同步发送和异步发送"></a>六、消息的同步发送和异步发送</h1><ul><li>异步发送：<br>kafka1.0以后，默认的client使用的都是异步发送消息。消息通过kafka producer发送后，这个消息放到了后台一个消息队列里，然后通过一个线程不断的从队列里取出消息进行发送。消息发送成功后，会进行一个callback回调。</li><li>同步发送：<br>通过future和get。get方法是个阻塞。同步去获得结果。</li></ul><h1 id="七、消息分发策略"><a href="#七、消息分发策略" class="headerlink" title="七、消息分发策略"></a>七、消息分发策略</h1><p>消息由key和value组成，key是可选项，producer会根据key和partition机制来判断当前这条消息应该放到哪个partition里面。默认算法是哈希取模。如果key为null，则随机分配，根据metadata.max.age.ms来，十分钟更新一次。<br>分区分配策略：</p><ul><li>Range（范围） -&gt; 默认<br>针对于同一个topic中的多个partition而言的。首先会对这个topic中的partition进行排序，然后 partition数量除以consumer数量，加入有0-9个partition，3个consumer，那consumer1会消费前4个分区。如果是多个topic，那每次多消费的都是第一个。</li><li>轮询Round-Robin<br>把所有的partition和consumer数量列出来，然后按照hashcode进行排序，通过轮询算法分配partition和consumer。</li></ul><p>也可以自定义分发规则，implements Partitioner。</p><p>什么时候会触发rebalance ？<br>1、对于同一个consumer group，新增consumer<br>2、consumer离开<br>3、consumer取消订阅<br>4、topic中新增分区</p><p>谁来执行rebalance，以及管理consumer group？<br>coordinator</p><h1 id="八、消息的存储策略"><a href="#八、消息的存储策略" class="headerlink" title="八、消息的存储策略"></a>八、消息的存储策略</h1><ul><li>消息保存的路径<br>默认tmp，也可以自定义。</li><li>消息的写入性能<br>顺序写入<br>零拷贝</li><li>消息的存储机制<br>日志分段，方便清理和压缩。根据时间（默认保留7天）或者 大小，满足其中之一，就会被清理掉。<br><img src="https://resource.lilyssh.cn/pic/kafka-segment.png" alt><br><img src="https://resource.lilyssh.cn/pic/kafka-consume-msg.png" alt></li></ul><h1 id="九、Partition副本机制"><a href="#九、Partition副本机制" class="headerlink" title="九、Partition副本机制"></a>九、Partition副本机制</h1><p>分区是对数据内容的分片，每个分区里的内容不一样，当一个分区不可用时，有一部分消息就没办法消费。所以为了提高分区的可用性，去实现冗余的备份，就是副本。如果有多个副本，一定会有个leader副本和follower副本。命令中通过<code>--replication-factor</code>参数去设置。<br>第i个分区的第j个副本，会落在 第 (i+j)% broker counts 个broker上。<br>查看分区状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /brokers/topics/topic_name/partitions/partition_num/state</span><br></pre></td></tr></table></figure></p><p>其中 isr维护的是当前分区，所有的副本集。follower的内容必须跟leader的在一定阈值范围内保持一致，如果不一致，就会被踢出去，直到follower的内容与leader内容保持在一定阈值范围内，follower才会被加进来。<br>leader副本 负责接收客户端的写入和读取请求。<br>follower副本 负责从leader副本中读取数据。</p><h1 id="十、消息消费原理"><a href="#十、消息消费原理" class="headerlink" title="十、消息消费原理"></a>十、消息消费原理</h1><p>consumer可以指定消费哪个partition。如果不指定，会按照一定的策略进行负载，比如三个consumer、三个partition，就一个consumer消费一个partition。如果consumer数量小于partition数量，则有的consumer会多消费一些partition。如果consumer数量大于partition数量，则有的consumer会消费不到消息，会造成一定的浪费，所以不建议设置太多的consumer。因为在一个partition上是不允许并发的。consumer的数量最好是partition数量的整数倍。如果consumer从多个partition上读到消息，是不保证顺序的。<br><img src="https://resource.lilyssh.cn/pic/kafka-broker.png" alt></p><h1 id="十、集群"><a href="#十、集群" class="headerlink" title="十、集群"></a>十、集群</h1><p>集群的构建是基于zookeeper的。<br>修改config/server.properties中三个地方：</p><ol><li>zookeeper的地址，</li><li>broker.id（在kafka集群中必须是唯一的）。</li><li>listeners，是为了各个节点互相通信，所以需要写各个节点自己的ip。</li></ol><p>启动集群各节点kafka后，会看到zookeeper上多了几个节点。<br>启动zookeeper客户端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zookeeper-3.5.4-beta/bin/zkCli.sh</span><br></pre></td></tr></table></figure></p><p>查看所有kafka集群节点的id：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /brokers/ids</span><br></pre></td></tr></table></figure></p><p>查看kafka主节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /controller</span><br></pre></td></tr></table></figure></p><p>写请求会进入master节点，读请求进入其他节点。<br>选举规则：最小的节点，也就是最早注册的节点是leader。</p><h1 id="十二、使用api"><a href="#十二、使用api" class="headerlink" title="十二、使用api"></a>十二、使用api</h1><ol><li><p>引入kafka依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>消息发送端<br>(1) 设置kafka配置信息(集群地址、序列化)，创建KafkaProducer。<br>可设置参数如：</p></li></ol><ul><li><p>ProducerConfig.ACKS_CONFIG，<br>0：消息发送给broker以后，不需要确认（性能较高，但是数据会丢失）。<br>1：只需要获得kafka集群中leader节点的确认，即可返回。<br>all(-1)：需要集群中的所有节点确认。（最安全，性能最低的）</p></li><li><p>batch.size(默认16kb)<br>producer对于同一个分区来说，会按照batch.size的大小进行统一收集后，批量发送。</p></li><li><p>linger.ms<br>按时间间隔，进行统一收集后，批量发送。<br>如果都设置了，满足其中任意一个条件，消息就会立马发送。<br>为了解决大量的小数据包频繁的发送，这个问题。</p></li><li><p>max.request.size(默认1M)<br>控制请求的大小</p></li></ul><p>(2) 通过send方法发送消息，入参为ProducerRecord(topic,message)。</p><ol start="3"><li>消息接受端<br>(1) 设置kafka配置信息(集群地址、序列化)，创建KafkaConsumer。<br>不同的组，只要订阅了，每个组都可以获取消息。<br>同一个组内的消费者们，只能有一个消费者能获取到消息，其他成员不会获取到。<br>可设置参数如：</li></ol><ul><li>AUTO_OFFSET_RESET_CONFIG：<br>earliest：对于新的group id来说，它会从最早的消息开始消费。对于已经消费过消息的group id来说，它还是会从已经消费过的最大的offset里去取。<br>latest：对于新的group_id来说，直接从已经消费过并且提交的最大的偏移量开始取。<br><img src="https://resource.lilyssh.cn/pic/kafka-group.png" alt><ul><li>ENABLE_AUTO_COMMIT_CONFIG:自动提交</li><li>AUTO_COMMIT_INTERVAL_MS_CONFIG：自动提交的间隔毫秒<br>就是说每xx毫秒，对这个时间段内的所有消息，进行提交确认。<br>消息消费完以后，要进行提交确认。如果设置为false的话，消费一次后，还允许再次消费。设置为true，则消费一次后，不会被再次消费到。</li><li>MAX_POLL_RECORDS_CONFIG：每一次调用poll，获取到的消息数。这样可以根据消费端的处理性能，来预设一个数量，减少poll的次数，提升性能。</li></ul></li></ul><p>(2) 通过subscribe方法订阅消息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kafka&lt;/a&gt; 2.0.0。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://lilyssh.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="测试" scheme="https://lilyssh.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="高并发架构实战" scheme="https://lilyssh.cn/tags/%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/"/>
    
      <category term="Kafka" scheme="https://lilyssh.cn/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Cypherium Java smart contract programming guide</title>
    <link href="https://lilyssh.cn/blockchain/cypherium-java-smart-contract-programming-guide/"/>
    <id>https://lilyssh.cn/blockchain/cypherium-java-smart-contract-programming-guide/</id>
    <published>2018-09-24T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.404Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911309" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911309</a>  </p><p>代币就是数字货币，比特币、以太币就是一个代币。利用Cypherium的java智能合约可以轻松编写出属于自己的代币。这些代币是建立在区块链之上，代表你拥有并可转让给其他人的数字资产。现在我们就来看看怎样创建一个这样的代币。</p><h1 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h1><ol><li>下载示例代码。<a href="https://github.com/cypherium/ContractExample" target="_blank" rel="noopener">https://github.com/cypherium/ContractExample</a><br>目录结构介绍：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">├── client              //客户端</span><br><span class="line">│   ├── cypher          //可执行文件cypher</span><br><span class="line">│   ├── jdk             //Java Development Kit</span><br><span class="line">│   ├── genesis.json    //初始化创世区块所需文件</span><br><span class="line">│   ├── db              //自定义数据库目录</span><br><span class="line">│   └── executable_file //可执行文件</span><br><span class="line">│       ├── Linux       //Linux版本</span><br><span class="line">│       │    └── cypher</span><br><span class="line">│       ├── Mac         //Mac版本</span><br><span class="line">│       │    └── cypher</span><br><span class="line">│       └── Windows     //Windows版本</span><br><span class="line">│            └── cypher</span><br><span class="line">├── file2str            //class文件生成二进制字符串工具</span><br><span class="line">│   ├── file2str.go     //go源码</span><br><span class="line">│   ├── Linux           //Linux版本</span><br><span class="line">│   │   └── file2str</span><br><span class="line">│   ├── Mac             //Mac版本</span><br><span class="line">│   │   └── file2str</span><br><span class="line">│   └── Windows         //Windows版本</span><br><span class="line">│       └── file2str.exe</span><br><span class="line">└── src</span><br><span class="line">    ├── HelloWorld.java //Java智能合约</span><br><span class="line">    ├── index.html      //合约部署页面</span><br><span class="line">    └── web3.js</span><br></pre></td></tr></table></figure></li></ol><p>接下来的操作步骤，默认在<code>ContractExample/client</code>目录执行。<br>请根据操作系统，把合适的可执行文件cypher，复制到client下，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp executable_file/Mac/cypher ./</span><br></pre></td></tr></table></figure></p><ol start="2"><li>初始化节点的创世区块。datadir为自行指定的数据库目录，如db。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cypher --datadir db init genesis.json</span><br></pre></td></tr></table></figure><ol start="3"><li>启动节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir db --networkid 123666 --port 7000 --rpcport 8000  --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0</span><br></pre></td></tr></table></figure><ol start="4"><li>启动节点的js交互窗口(用上一步成的ipc文件)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cypher attach db/cypher.ipc</span><br></pre></td></tr></table></figure><ol start="5"><li>创建账户。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(&quot;your password&quot;)</span><br></pre></td></tr></table></figure><ol start="6"><li>请联系我们，给您的测试账户中，转入一些可供测试的代币。邮箱地址：xxx</li><li>查看您的账户余额。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cph.getBalance(&quot;your account address&quot;)</span><br></pre></td></tr></table></figure><ol start="8"><li>您可以通过以下方法，把您账户中的资金转给其他账户。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cph.sendTransaction(from,to,value,gas,gasPrice,data,nonce,Function)</span><br></pre></td></tr></table></figure><ul><li>from: String - 指定的发送者的地址。  </li><li>to: String - （可选）交易消息的目标地址，如果是合约创建，则不填。  </li><li>value: Number|String|BigNumber - （可选）交易携带的货币量，以wei为单位。如果合约创建交易，则为初始的基金。  </li><li>gas: Number|String|BigNumber - （可选）默认是自动，交易可使用的gas，未使用的gas会退回。  </li><li>gasPrice: Number|String|BigNumber - （可选）默认是自动确定，交易的gas价格，默认是网络gas价格的平均值 。  </li><li>data: String - （可选）或者包含相关数据的字节字符串，如果是合约创建，则是初始化要用到的代码。 </li><li>nonce: Number - （可选）整数，使用此值，可以允许你覆盖你自己的相同nonce的，正在pending中的交易。</li><li>Function - 回调函数，用于支持异步的方式执行。  </li></ul><ol start="9"><li>通过以下命令查看现在共识到第几个区块了。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cph.txBlockNumber</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>ERC20是以太坊定义的一个代币标准。要求我们在实现代币的时候必须要遵守的协议，如指定代币名称、总量、实现代币交易函数等，只有支持了协议才能被以太坊钱包支持。<br>Cypherium的代币标准接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.cypher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cypnet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置代币信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol 代币符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 代币名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalSupply 发行代币总量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _owner 合约拥有者账户地址，传""空时，代表默认为创建者账户地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">setTokenInfo</span><span class="params">(String symbol, String name, <span class="keyword">long</span> totalSupply, String _owner)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取合约创建者的账户地址。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> addressType can be "caller","self","owner" and other filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getAddress</span><span class="params">(String addressType)</span></span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看对应账号的代币余额。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _address</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">balanceOf</span><span class="params">(String _address)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改指定账户余额。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">changeBalance</span><span class="params">(String _from, <span class="keyword">long</span> _value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现代币交易</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(String _from, String _to, <span class="keyword">long</span> _value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置键值对。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">setState</span><span class="params">(String _key, String _value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过键获取值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> _key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getState</span><span class="params">(String _key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Create-contract"><a href="#Create-contract" class="headerlink" title="Create contract"></a>Create contract</h1><p>现在我们来开始编写第一个<a href="https://github.com/cypherium/ContractExample/blob/master/src/HelloWorld.java" target="_blank" rel="noopener">Java智能合约</a>，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.cypher.Cypnet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> totalSupply = <span class="number">10000</span>;</span><br><span class="line">        <span class="comment">//我们创建一个 符号为Hello,名称为Hello world,发行总量为10000的代币。</span></span><br><span class="line">        Cypnet.setTokenInfo(<span class="string">"Hello"</span>, <span class="string">"Hello world"</span>, totalSupply, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">//把发行的代币全都给合约创建者</span></span><br><span class="line">        Cypnet.changeBalance(<span class="string">"caller"</span>, totalSupply);</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">transfer</span><span class="params">(String _to, <span class="keyword">long</span> _value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = Cypnet.balanceOf(<span class="string">"caller"</span>);</span><br><span class="line">        <span class="keyword">if</span> (n &lt; _value) &#123;</span><br><span class="line">            <span class="comment">//throw new Exception("Insufficient balance");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Insufficient balance"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Cypnet.transfer(<span class="string">"caller"</span>, _to, _value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String skey)</span> </span>&#123;</span><br><span class="line">        String s = Cypnet.getState(skey);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">setValue</span><span class="params">(String skey, String sValue)</span> </span>&#123;</span><br><span class="line">        Cypnet.setState(skey, sValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单解释下，我们定义了一个名为HelloWorld的合约，main方法是Java应用程序的入口方法，导入Cypnet类。  </p><h1 id="Compile-contract"><a href="#Compile-contract" class="headerlink" title="Compile contract"></a>Compile contract</h1><ol><li>我们来把HelloWorld.java编译成字节码文件HelloWorld.class。编译命令如下： </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -cp jdk/classes ../src/HelloWorld.java</span><br></pre></td></tr></table></figure><ol start="2"><li>给<a href="https://github.com/cypherium/ContractExample/tree/master/file2str" target="_blank" rel="noopener">file2str</a>赋上权限。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 ../file2str</span><br></pre></td></tr></table></figure><p>3.根据操作系统，选择合适的<code>file2str</code>，将 HelloWorld.class文件转成16进制字符串的命令 file2str HelloWorld.class，如Mac版为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../file2str/Mac/file2str ../src/HelloWorld.class</span><br></pre></td></tr></table></figure><p>会看到生成的二进制字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xcafebabe00000036005a0a001a002d05000000000000271008002e08002f0800300a003100320800330a003100340800350800360a00310037090038003908003a0a003b003c0a0031003d0a0031003e08003f0a003100400800410800420a003b00430800440800450700460700470100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100046d61696e010016285b4c6a6176612f6c616e672f537472696e673b29560100087472616e73666572010027284c6a6176612f6c616e672f537472696e673b4a294c6a6176612f6c616e672f537472696e673b01000d537461636b4d61705461626c6501000867657456616c7565010026284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b01000873657456616c7565010038284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f537472696e673b01000967657456616c75653101001428294c6a6176612f6c616e672f537472696e673b01000967657456616c75653201000a536f7572636546696c6501000f48656c6c6f576f726c642e6a6176610c001b001c01000548656c6c6f01000b48656c6c6f20776f726c640100000700480c0049004a01000663616c6c65720c004b004c0100047465737401001048656c6c6f20776f726c6420746573740c004d004e07004f0c0050005101001448656c6c6f20776f726c6420436f6e74726163740700520c005300540c005500250c00560057010014496e73756666696369656e742062616c616e63650c00210058010004414141410100026f6b0c0053005901000973647364736473646401000331303001000a48656c6c6f576f726c640100106a6176612f6c616e672f4f626a6563740100136a617661782f6379706865722f4379706e657401000c736574546f6b656e496e666f01003a284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b4a4c6a6176612f6c616e672f537472696e673b295a01000d6368616e676542616c616e6365010016284c6a6176612f6c616e672f537472696e673b4a295a0100087365745374617465010027284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b295a0100106a6176612f6c616e672f53797374656d0100036f75740100154c6a6176612f696f2f5072696e7453747265616d3b0100136a6176612f696f2f5072696e7453747265616d0100077072696e746c6e010015284c6a6176612f6c616e672f537472696e673b2956010008676574537461746501000962616c616e63654f66010015284c6a6176612f6c616e672f537472696e673b294a010028284c6a6176612f6c616e672f537472696e673b4c6a6176612f6c616e672f537472696e673b4a295a0100042849295600210019001a0000000000070001001b001c0001001d0000001d00010001000000052ab70001b100000001001e000000060001000000030009001f00200001001d00000068000500040000003414000240120412051f1206b800075712081fb8000957120a120bb8000c57b2000d120eb6000f120ab800104eb2000d2db6000fb100000001001e0000002200080000000500040008000f00090016000b001e000c0026000e002c000f003300100009002100220001001d0000007a00040006000000351208b80011370416041f949c00061212b012082a1fb8001357120ab800104eb2000d2db6000f1214b800104eb2000d2db6000f01b000000002001e0000002600090000001400070015000e0017001100190019001b001f001c0026001e002c001f003300210023000000070001fd001100040009002400250001001d0000002300010002000000072ab800104c2bb000000001001e0000000a000200000025000500260009002600270001001d0000002500020002000000092a2bb8000c571215b000000001001e0000000a0002000000290006002a0009002800290001001d0000004e0002000100000019033b1a112710a20010b2000d1ab60016840001a7ffef1217b000000002001e0000001600050000003e000200400009004100100042001600440023000000070002fc000201130009002a00290001001d0000001b00010000000000031218b000000001001e000000060001000000470001002b00000002002c</span><br></pre></td></tr></table></figure></p><ol start="4"><li>部署合约<br>我们需要用<code>Chrome</code>浏览器打开部署调用页面ContractExample/src/index.html<br>如下：<br><img src="https://resource.lilyssh.cn/pic/java_contract_init.png" alt></li></ol><p>如果使用的是其他浏览器，直接打开会有跨域请求问题，所以需要使用http-server来部署该页面,需要自行先安装node和npm，再安装http-server，请依次执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g </span><br><span class="line"></span><br><span class="line">pm i http-server</span><br><span class="line"></span><br><span class="line">yarn -g http-server</span><br></pre></td></tr></table></figure></p><p>进入到CypherTestNet/web3-cypher.js目录下，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure></p><p>用浏览器访问<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a>  把刚生成的二进制字符串粘到Java contract bytecode文本框。<br>在From Account账户有余额的情况下，点击Deploy按钮后，会把您的java合约部署到区块链中。并会弹出合约地址信息。<br><!-- <img src="https://resource.lilyssh.cn/pic/deploy_submitted.png" width="896" height="252" /> --><br><img src="https://resource.lilyssh.cn/pic/deploy_submitted.png" alt><br><img src="https://resource.lilyssh.cn/pic/contract_address.png" alt><br>点击Get contract info按钮获取区块链中的合约信息。<br><img src="https://resource.lilyssh.cn/pic/contract_info.png" alt><br>在文本框中输入转账金额，并点击Transfer按钮，付款方就会向收款方转账。<br><img src="https://resource.lilyssh.cn/pic/transfer.png" alt><br>点击From’s Balance按钮查看付款账户的余额。<br><img src="https://resource.lilyssh.cn/pic/from_balance.png" alt><br>点击To’s Balance按钮查看收款账户的余额。<br><img src="https://resource.lilyssh.cn/pic/to_balance.png" alt></p><h1 id="View-deploy-contract-page"><a href="#View-deploy-contract-page" class="headerlink" title="View deploy contract page"></a>View deploy contract page</h1><p>接下来，我们来看看部署调用页面的流程。  </p><ol><li>web3如何调用java方法<br>ABI全称Application Binary Interface, 是调用智能合约函数以及合约之间函数调用的消息编码格式定义,也可以理解为智能合约函数调用的接口说明. 类似Webservice里的SOAP协议一样；也就是定义操作函数签名，参数编码，返回结果编码等。使用ABI协议时必须要求在编译时知道类型,即强类型相关.</li></ol><p>如果想调用HelloWorld.java中的函数，需要把该函数追加到abi变量中，按照现有格式即可。比如说，我们想要调用HelloWorld.java中的getValue方法，就要把以下内容追加到abi变量中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var abi=</span><br><span class="line">...</span><br><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line">        &quot;constant&quot;:false,        //方法修饰符,false表示函数内可以修改状态变量</span><br><span class="line">        &quot;inputs&quot;:[               //方法入参，数组里的每个对象都是一个参数说明</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;:&quot;skey&quot;,   //第一个参数的名字</span><br><span class="line">                &quot;type&quot;:&quot;bytes32&quot; //第一个参数的类型</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;outputs&quot;:[              //方法返回值，数组里的每个对象都是一个参数说明</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;:&quot;value&quot;,  //第一个参数的名字</span><br><span class="line">                &quot;type&quot;:&quot;bytes32&quot; //第一个参数的类型</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;name&quot;:&quot;getValue&quot;,       //方法名</span><br><span class="line">        &quot;payable&quot;:false,</span><br><span class="line">        &quot;stateMutability&quot;:&quot;nonpayable&quot;,</span><br><span class="line">        &quot;type&quot;:&quot;function&quot;        //方法类型：function,constructor,fallback,event</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>uint<m>:M为integer类型代表M bits,0 &lt; M &lt;= 256, M % 8 == 0，如uint32，uint8,uint256。<br>int<m>:同上。同为从8到256位的无符号整数。<br>uint和int:整型，分别是uint256和int256的别名。这也是上面的例子中函数参数类型是uint，转sha3码时要变成uint256的原因。<br>address:地址，20个字节，160bits，一个Ethereum地址，地址的类型也可以有成员作为所有合约的base。<br>bool:布尔类型，1个字节，true：1，false:0。<br>bytes<m>:固定大小的字节数组，0&lt;M&lt;=32,byte都是bytes1的别名。<br>bytes:动态分配大小字节数组。不是一个值类型。<br>String:动态大小UTF8编码的字符串,不是一个值类型。<br>尽量少用string。  </m></m></m></p><ol start="2"><li>如何发布合约<br>web3.js对合约的操作进行了封装。发布合约时，可以使用web3.cph.contract的new方法。<br>部署过程中需要主要的是，new方法的回调会执行两次，第一次是合约的交易创建完成，第二次是在某个地址上完成部署。需要注意的是只有在部署完成后，才能进行方法该用，否则会报错TypeError: javaContract.add is not a function。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://blog.csdn.net/lilyssh/article/details/82911309&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lilyssh/a
      
    
    </summary>
    
      <category term="Blockchain" scheme="https://lilyssh.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://lilyssh.cn/tags/Blockchain/"/>
    
      <category term="区块链" scheme="https://lilyssh.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="Cypherium" scheme="https://lilyssh.cn/tags/Cypherium/"/>
    
  </entry>
  
  <entry>
    <title>Cypherium&#39;s synchronous block test operation steps</title>
    <link href="https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/"/>
    <id>https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/</id>
    <published>2018-08-14T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.404Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/">https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Cypherium’s synchronous block test operation steps.<br><a id="more"></a></p><ol><li><p>put cypherium_internal.pem in a directory,for example,~.</p></li><li><p><code>vim ~/.ssh/config</code> file.Add alias for the ssh remote connection.</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">    ServerAliveInterval 60</span><br><span class="line">Host 119</span><br><span class="line">    HostName 18.221.58.119</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile    ~/cypherium_internal.pem</span><br><span class="line">Host 200</span><br><span class="line">    HostName 18.216.16.200</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile    ~/cypherium_internal.pem</span><br></pre></td></tr></table></figure><ol start="3"><li><code>ssh 119</code>,connection AWS node 18.221.58.119.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-31-48:~$</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── genesis.json</span><br><span class="line">├── group.toml</span><br><span class="line">├── Cypherium</span><br><span class="line">│   ├── private.toml</span><br><span class="line">│   └── public.toml</span><br><span class="line">└── cypher_db</span><br><span class="line">    ├── cypher.ipc</span><br></pre></td></tr></table></figure><ol start="4"><li>clean  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><ol start="5"><li>Compile  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make cypher</span><br></pre></td></tr></table></figure><ol start="4"><li>Generate node information </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher setup</span><br></pre></td></tr></table></figure><p>You need to enter the ip: port,Use kyber’s Ed25519 algorithm to generate <code>public.toml</code> and <code>private.toml</code>.Save in the default path. Currently there is no ip discovery, so you need to manually splicing the public key <code>~/Library/Application\ Support/cypher/public.toml</code> (Mac default path) for simulation testing. The node name can be customized, such as node_01_name.<br><img src="https://resource.lilyssh.cn/pic/cypher%20setup_.png" alt></p><ol start="5"><li><p>同理，再生成第二个节点。</p></li><li><p>把第一、二个节点的public.toml，拼接到~/workspace/test/group.toml中。</p></li></ol><p><img src="https://resource.lilyssh.cn/pic/group.toml.png" alt></p><ol start="7"><li>初始化 两个节点的创世区块。  </li></ol><p>第一个节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_01/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>第二个节点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_02/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>genesis.json中内容可参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">        &quot;chainId&quot;: 123666,</span><br><span class="line">        &quot;homesteadBlock&quot;: 0,</span><br><span class="line">        &quot;eip155Block&quot;: 0,</span><br><span class="line">        &quot;eip158Block&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">  &quot;alloc&quot;      : &#123;&#125;,</span><br><span class="line">  &quot;coinbase&quot;   : &quot;0x0000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;difficulty&quot; : &quot;0x20000&quot;,</span><br><span class="line">  &quot;extraData&quot;  : &quot;&quot;,</span><br><span class="line">  &quot;gasLimit&quot;   : &quot;0x2fefd8&quot;,</span><br><span class="line">  &quot;nonce&quot;      : &quot;0x0000000000000042&quot;,</span><br><span class="line">  &quot;mixhash&quot;    : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;parentHash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;timestamp&quot;  : &quot;0x00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>启动第一个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_01/private.toml --datadir ~/workspace/test/node_01/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7010 --rpcport 8510 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_01/output2.log</span><br></pre></td></tr></table></figure><ol start="9"><li>启动第一个节点的js交互窗口(用上一步成的ipc文件)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_01/data/cypher.ipc</span><br></pre></td></tr></table></figure><ol start="10"><li>启动第二个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_02/private.toml --datadir ~/workspace/test/node_02/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7020 --rpcport 8520 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_02/output2.log</span><br></pre></td></tr></table></figure><ol start="11"><li>启动第二个节点的js交互窗口(用上一步成的ipc文件)。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_02/data/cypher.ipc</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/attach%20node_.jpg" alt></p><ol start="12"><li>从此步骤开始，都将在js交互涌窗口执行。查看第一个节点的信息。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.nodeInfo</span><br></pre></td></tr></table></figure><ol start="13"><li>在第二个节点中，创建用户，保存挖矿奖励。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(&quot;password&quot;)</span><br></pre></td></tr></table></figure><ol start="14"><li>在第二个节点中，加入第一个节点。就是把cnode中的内容粘进addPeer中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer(&quot;cnode&quot;)</span><br></pre></td></tr></table></figure><ol start="15"><li>在第一个节点中，验证一下是否已加入。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net</span><br></pre></td></tr></table></figure><ol start="16"><li>主节点调用开始同步命令，从交易池里取tx执行，并打包生成txBlock，发给其他委员会成员做bftcosi共识。会看到两个节点的信息都在滚动。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.start()</span><br></pre></td></tr></table></figure><ol start="17"><li>停止共识。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.stop()</span><br></pre></td></tr></table></figure><ol start="18"><li>查看下两个节点的区块数量是否相同。</li></ol><p><img src="https://resource.lilyssh.cn/pic/txBlockNumber.png" alt></p><ol start="19"><li>(不时需要)解锁账户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.unlockAccount(&quot;需解锁账户&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/unlockAccount.png" alt></p><ol start="20"><li>查看交易池状态，pending为待确认的交易数量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txpool.status</span><br></pre></td></tr></table></figure></li></ol><p>会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pending: 0,</span><br><span class="line">  queued: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="19"><li>退出：</li></ol><p><img src="https://resource.lilyssh.cn/pic/killall.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/&quot;&gt;https://lilyssh.cn/blockchain/cypherium-test-sync-block-en/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Cypherium’s synchronous block test operation steps.&lt;br&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="https://lilyssh.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://lilyssh.cn/tags/Blockchain/"/>
    
      <category term="Cypherium" scheme="https://lilyssh.cn/tags/Cypherium/"/>
    
  </entry>
  
  <entry>
    <title>ansible 使用亚马逊云服务(AWS)密钥文件 xx.pem同时操纵多台机子</title>
    <link href="https://lilyssh.cn/linux/ansible-aws-pem/"/>
    <id>https://lilyssh.cn/linux/ansible-aws-pem/</id>
    <published>2018-08-09T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.416Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911903" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911903</a>  </p><h2 id="一、安装ansible"><a href="#一、安装ansible" class="headerlink" title="一、安装ansible"></a>一、安装<a href="https://www.ansible.com" target="_blank" rel="noopener">ansible</a></h2><ol><li>安装<a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="noopener">pip</a>包管理工具,先下载安装脚本<code>get-pip.py</code>。  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>执行安装脚本。  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>验证下是否安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure></p><ol start="3"><li>安装 ansible  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install ansible</span><br></pre></td></tr></table></figure><p>验证下是否安装成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible --version</span><br></pre></td></tr></table></figure></p><h2 id="二、-配置ansible。"><a href="#二、-配置ansible。" class="headerlink" title="二、 配置ansible。"></a>二、 配置<a href="https://www.ansible.com" target="_blank" rel="noopener">ansible</a>。</h2><p>在<code>/etc</code>下新建文件夹<code>ansible</code>，在<code>/etc/ansible</code>下创建<code>hosts</code>文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[aws]</span><br><span class="line">13.59.244.124ansible_ssh_private_key_file=~/cypherium_internal.pem</span><br><span class="line">18.216.16.200   ansible_ssh_private_key_file=~/cypherium_internal.pem</span><br></pre></td></tr></table></figure></p><p>aws是自定义的服务器组名。</p><h2 id="三、使用ansible。"><a href="#三、使用ansible。" class="headerlink" title="三、使用ansible。"></a>三、使用<a href="https://www.ansible.com" target="_blank" rel="noopener">ansible</a>。</h2><p><code>ping</code>一下分组中的机子，用<code>ping</code>模块， <code>-u 用户名</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible aws -m ping -u ubuntu</span><br></pre></td></tr></table></figure></p><p><img src="https://resource.lilyssh.cn/pic/ansible_ping.png" alt><br><code>ls</code> 一下分组中的机子，用<code>shell</code>模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible aws -m shell -a &quot;ls&quot; -u ubuntu</span><br></pre></td></tr></table></figure></p><p><img src="https://resource.lilyssh.cn/pic/ansible_ls.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://blog.csdn.net/lilyssh/article/details/82911903&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lilyssh/article/details/82911903&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;一、安装ansible&quot;&gt;&lt;a href=&quot;#一、安装ansible&quot; class=&quot;headerlink&quot; title=&quot;一、安装ansible&quot;&gt;&lt;/a&gt;一、安装&lt;a href=&quot;https://www.ansible.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ansible&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pip&lt;/a&gt;包管理工具,先下载安装脚本&lt;code&gt;get-pip.py&lt;/code&gt;。  &lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://lilyssh.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://lilyssh.cn/tags/Linux/"/>
    
      <category term="Ansible" scheme="https://lilyssh.cn/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>web3.js 如何修改/添加命令</title>
    <link href="https://lilyssh.cn/blockchain/geth-web3-update-command/"/>
    <id>https://lilyssh.cn/blockchain/geth-web3-update-command/</id>
    <published>2018-08-09T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.407Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/geth-web3-update-command/">https://lilyssh.cn/blockchain/geth-web3-update-command/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以太坊的js交互是靠<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a>调用的。<br>改完后，需要打包，放到<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">Go Ethereum</a>里测试,以下就是修改命令过程说明。<br><a id="more"></a></p><h2 id="一、eth-改为-cph"><a href="#一、eth-改为-cph" class="headerlink" title="一、eth 改为 cph"></a>一、eth 改为 cph</h2><ol><li>修改 <code>web3.js/lib/web3.js</code> 文件中 <code>Web3</code>方法。<code>web3.js</code>是基础命令定义处。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.eth = new Eth(this);  //修改前</span><br><span class="line">this.cph = new Eth(this);  //修改后</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<a href="#internal">go-cypherium/internal/web3ext/web3ext.go</a> 文件中<code>Eth_JS</code>常量定义处。<code>web3ext.go</code>是扩展命令定义处。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const Eth_JS = `</span><br><span class="line">web3._extend(&#123;</span><br><span class="line">property: &apos;eth&apos;,  //修改前</span><br><span class="line">        property: &apos;cph&apos;,  //修改后</span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>go-cypherium/console/console.go</code>中，init方法。此处为web3.eth命令起个简略别名eth。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flatten := &quot;var eth = web3.eth; var personal = web3.personal; &quot;  //修改前</span><br><span class="line">flatten := &quot;var cph = web3.cph; var personal = web3.personal; &quot;  //修改后</span><br></pre></td></tr></table></figure></li></ol><p>到此，修改完成！</p><h2 id="二、eth-getBlock-n-改为-eth-getTxBlock-n"><a href="#二、eth-getBlock-n-改为-eth-getTxBlock-n" class="headerlink" title="二、eth.getBlock(n) 改为 eth.getTxBlock(n)"></a>二、eth.getBlock(n) 改为 eth.getTxBlock(n)</h2><p><a href="id:internal" target="_blank" rel="noopener">以太坊源码分析 internal包简介</a></p><h2 id="ethapi-api包分析"><a href="#ethapi-api包分析" class="headerlink" title="ethapi/api包分析"></a>ethapi/api包分析</h2><p>ethapi/api包主要是进入js的命令行界面后，输入的命令实现部分。<br><br>js的命令实现在ethapi/api和node/api中。目前一共有三种api的命令。<br><br>(1)第一种是admin相关的命令，这个是通过安全的RPC通道实现的。其结构体为PrivateAdminAPI<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// PrivateAdminAPI is the collection of administrative API methods exposed only</span><br><span class="line">// over a secure RPC channel.</span><br><span class="line">type PrivateAdminAPI struct &#123;</span><br><span class="line">    node *Node // Node interfaced by this API</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)第二种是personal相关的命令，主要是负责账户管理相关命令，可以lock和unlock账户。其结构体为PrivateAccountAPI<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// PrivateAccountAPI provides an API to access accounts managed by this node.</span><br><span class="line">// It offers methods to create, (un)lock en list accounts. Some methods accept</span><br><span class="line">// passwords and are therefore considered private by default.</span><br><span class="line">type PrivateAccountAPI struct &#123;</span><br><span class="line">    am *accounts.Manager</span><br><span class="line">    nonceLock *AddrLocker</span><br><span class="line">    b Backend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)第三种是eth相关的命令，主要是可以操作区块上的相关命令。其结构体为PublicBlockChainAPI<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// PublicBlockChainAPI provides an API to access the Ethereum blockchain.</span><br><span class="line">// It offers only methods that operate on public data that is freely available to anyone.</span><br><span class="line">type PublicBlockChainAPI struct &#123;</span><br><span class="line">    b Backend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="otto包"><a href="#otto包" class="headerlink" title="otto包"></a>otto包</h2><p>以太坊的命令是通过在js虚拟机上来实现命令的。而在go语言中，有第三方的otto包，可以直接在go语言中实现js命令。而以太坊代码则使用了otto包来实现搭建js命令。<br><br>在otto包中，set方法是设置变量的值，get方法是获取变量的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Set the property of the given name to the given value.</span><br><span class="line">func (self Object) Set(name string, value interface&#123;&#125;)</span><br><span class="line">// Get the value of the property with the given name.</span><br><span class="line">func (self Object) Get(name string) (Value, error)</span><br></pre></td></tr></table></figure></p><p>Compile是根据输入的路径对js的代码进行编译，返回变量的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Compile will parse the given source and return a Script value or nil and</span><br><span class="line">// an error if there was a problem during compilation.</span><br><span class="line">func (self *Otto) Compile(filename string, src interface&#123;&#125;) (*Script, error)</span><br></pre></td></tr></table></figure></p><p>Run方法会运行相关的js代码，如果有返回值的话会返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Run will run the given source (parsing it first if necessary), returning the resulting value and error (if any)</span><br><span class="line">func (self Otto) Run(src interface&#123;&#125;) (Value, error)</span><br></pre></td></tr></table></figure></p><h2 id="如何编写自己的以太坊命令"><a href="#如何编写自己的以太坊命令" class="headerlink" title="如何编写自己的以太坊命令"></a>如何编写自己的以太坊命令</h2><p>接上篇ethapi.api-analysis分析，如果我们需要在相关模块添加相关命令，首先我们需要找到相关命令所对应的api结构体。<br><br>各个命令对应的结构体，包的位置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin  PrivateAdminAPI,PublicAdminAPI  node/api</span><br><span class="line">debug  PrivateDebugAPI eth/api</span><br><span class="line">eth    PublicBlockChainAPI ethapi/api</span><br><span class="line">miner  PrivateMinerAPI eth/api</span><br><span class="line">net    PublicNetAPI    ethapi/api</span><br><span class="line">personal   PrivateAccountAPI   ethapi/api</span><br><span class="line">txpool PublicTxPoolAPI ethapi/api</span><br><span class="line">rpc    所有可调用包集合</span><br><span class="line">web3   所有命令集合</span><br></pre></td></tr></table></figure></p><p>假设我们需要在personal包中添加一个命令，那么我们就在PrivateAccountAPI中添加一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func (s *PrivateAccountAPI) TestMethod() &#123;</span><br><span class="line">fmt.Print(&quot;TestMethod&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来到internal/web3ext/web3ext.go中，找到personal命令集合，然后添加一条自己的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Personal_JS = `</span><br><span class="line">web3._extend(</span><br><span class="line">methods: [</span><br><span class="line">        new web3._extend.Method(&#123;</span><br><span class="line">            name : &apos;testMethod&apos;,</span><br><span class="line">            call : &apos;personal_testMethod&apos;</span><br><span class="line">        &#125;), //our method</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>最后到internal/jsre/deps/web3.js中，找到personal方法的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function Personal(web3) &#123;</span><br><span class="line">this._requestManager = web3._requestManager;</span><br><span class="line"></span><br><span class="line">var self = this;</span><br><span class="line"></span><br><span class="line">methods().forEach(function(method) &#123;</span><br><span class="line">method.attachToObject(self);</span><br><span class="line">method.setRequestManager(self._requestManager);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">properties().forEach(function(p) &#123;</span><br><span class="line">p.attachToObject(self);</span><br><span class="line">p.setRequestManager(self._requestManager);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">var methods = function () &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>然后再methods中添加你定义的方法名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var methods = function () &#123;</span><br><span class="line">var testMethod = new Method(&#123;</span><br><span class="line">name : &apos;testMethod&apos;,</span><br><span class="line">call : &apos;personal_testMethod&apos;</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>并在最后的return中添加你的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">return [</span><br><span class="line">newAccount,</span><br><span class="line">testMethod, //our method</span><br><span class="line">importRawKey,</span><br><span class="line">unlockAccount,</span><br><span class="line">ecRecover,</span><br><span class="line">sign,</span><br><span class="line">sendTransaction,</span><br><span class="line">lockAccount</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>这之后在启动命令行，我们就可以调用我们的方法了。结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; personal.testMethod()</span><br><span class="line">TestMethodnull</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/blockchain/geth-web3-update-command/&quot;&gt;https://lilyssh.cn/blockchain/geth-web3-update-command/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以太坊的js交互是靠&lt;a href=&quot;https://github.com/ethereum/web3.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;web3.js&lt;/a&gt;调用的。&lt;br&gt;改完后，需要打包，放到&lt;a href=&quot;https://github.com/ethereum/go-ethereum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go Ethereum&lt;/a&gt;里测试,以下就是修改命令过程说明。&lt;br&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="https://lilyssh.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://lilyssh.cn/tags/Blockchain/"/>
    
      <category term="区块链" scheme="https://lilyssh.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="https://lilyssh.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>以太坊 目录结构说明</title>
    <link href="https://lilyssh.cn/blockchain/cypherium-dir-description/"/>
    <id>https://lilyssh.cn/blockchain/cypherium-dir-description/</id>
    <published>2018-08-09T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.403Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/cypherium-dir-description/">https://lilyssh.cn/blockchain/cypherium-dir-description/</a>  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>go-cypherium<br>本篇为转发，只做了下样式整理，<a href="https://blog.csdn.net/jiang_xinxing/article/details/80249981" target="_blank" rel="noopener">原文地址</a>。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/test ⌚ 14:02:17</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── accounts      // 实现了高层级的Ethereum账号管理</span><br><span class="line">│   ├── abi       // 实现了Ethereum的ABI(应用程序二进制接口) </span><br><span class="line">│   │   └── bind  // 该包生成Ethereum合约的Go绑定 </span><br><span class="line">│   │       └── backends</span><br><span class="line">│   ├── keystore  // 实现了Secp256k1私钥的加密存储</span><br><span class="line">│   └── usbwallet // 实现了支持USB硬件钱包</span><br><span class="line">├── cmd</span><br><span class="line">│   ├── abigen</span><br><span class="line">│   ├── bootnode  // 该节点为Ethereum发现协议运行一个引导节点 </span><br><span class="line">│   ├── clef</span><br><span class="line">│   ├── cypher    // 是Cypherium的官方客户端命令行 </span><br><span class="line">│   ├── ethkey</span><br><span class="line">│   ├── evm       // 执行EVM代码片段 </span><br><span class="line">│   ├── faucet    // 是以太faucet支持的轻量级客户 </span><br><span class="line">│   ├── p2psim    // 为客户端命令行模拟 HTTP API </span><br><span class="line">│   ├── puppeth   // 是一个命令组装和维护私人网路</span><br><span class="line">│   ├── rlpdump   // 能更好的打印出RLP格式的数据</span><br><span class="line">│   ├── swarm     // bzzhash命令能够更好的计算出swarm哈希树 </span><br><span class="line">│   ├── utils     // 为Go-Ethereum命令提供说明</span><br><span class="line">│   └── wnode</span><br><span class="line">├── common        // 包含一些帮助函数</span><br><span class="line">│   ├── bitutil   // 该包实现快速位操作</span><br><span class="line">│   ├── compiler  // 包装了Solity编译器可执行文件</span><br><span class="line">│   ├── fdlimit</span><br><span class="line">│   ├── hexutil   // 以0x为前缀的十六进制编码 </span><br><span class="line">│   ├── math</span><br><span class="line">│   └── mclock</span><br><span class="line">├── consensus     // 实现了不同以太共识引擎</span><br><span class="line">│   ├── bftcosi</span><br><span class="line">│   │   └── cosi</span><br><span class="line">│   ├── clique    // 实现了权威共识引擎 </span><br><span class="line">│   ├── ethash    // 发动机工作的共识ethash证明 </span><br><span class="line">│   └── misc</span><br><span class="line">├── console</span><br><span class="line">│   └── testdata</span><br><span class="line">├── containers</span><br><span class="line">│   └── docker</span><br><span class="line">│       ├── develop-alpine</span><br><span class="line">│       ├── develop-ubuntu</span><br><span class="line">│       ├── master-alpine</span><br><span class="line">│       └── master-ubuntu</span><br><span class="line">├── contracts</span><br><span class="line">│   ├── chequebook  // ‘支票薄’以太智能合约 </span><br><span class="line">│   └── ens</span><br><span class="line">├── core            // 核心部分，它包含账户、区块、创世块、区块链、transaction、bloom的定义以及区块如何验证、如何加入链以及transaction如何使用vm执行也就是智能合约的执行都在这里完成。 </span><br><span class="line">│   ├── asm         // 汇编和反汇编接口</span><br><span class="line">│   ├── bloombits   // Bloom过滤批量数据</span><br><span class="line">│   ├── rawdb</span><br><span class="line">│   ├── state       // 封装在以太状态树之上的一种缓存结构</span><br><span class="line">│   ├── types       // 以太合约支持的数据类型</span><br><span class="line">│   └── vm          // 以太虚拟机</span><br><span class="line">│       └── runtime // 一种用于执行EVM代码的基本执行模型</span><br><span class="line">├── crypto          // 加密工具包含不限于hash算法、ECC算法等</span><br><span class="line">│   ├── bn256       // 最优的ATE配对在256位Barreto-Naehrig曲线上 </span><br><span class="line">│   │   ├── cloudflare  // 在128位安全级别上的特殊双线性组</span><br><span class="line">│   │   └── google   // 在128位安全级别上的特殊双线性组</span><br><span class="line">│   ├── ecies</span><br><span class="line">│   ├── randentropy</span><br><span class="line">│   ├── secp256k1    // 封装比特币secp256k1的C库</span><br><span class="line">│   └── sha3         // Sha-3固定输出长度散列函数 and 由FIPS-202定义的抖动变量输出长度散列函数</span><br><span class="line">├── dashboard</span><br><span class="line">│   └── assets</span><br><span class="line">│       ├── components</span><br><span class="line">│       └── types</span><br><span class="line">├── docs</span><br><span class="line">├── eth             // 以太坊协议 </span><br><span class="line">│   ├── downloader  // 手动全链同步 </span><br><span class="line">│   ├── fetcher     // 基于块通知的同步 </span><br><span class="line">│   ├── filters     // 用于区块，交易和日志事件的过滤 </span><br><span class="line">│   ├── gasprice    </span><br><span class="line">│   └── tracers     // 收集JavaScript交易追踪 </span><br><span class="line">├── ethclient       // 以太坊RPC AIP客户端 </span><br><span class="line">├── ethdb           // 提供了数据源实现内存以及leveldb，并使用数据源扩展了不同实现，这包含缓存数据源、链数据源，依据于此又封装出读写缓存、异步读写缓存以及链存储相关的数据源实现。定义了如何使用datasource存储block、transaction，换句话说就是block、transaction的存储数据结构</span><br><span class="line">├── ethstats        // 网络统计报告服务 </span><br><span class="line">├── event           // 处理实时事件的费用 </span><br><span class="line">│   └── filter      // 事件过滤</span><br><span class="line">├── internal        </span><br><span class="line">│   ├── build       </span><br><span class="line">│   ├── cmdtest</span><br><span class="line">│   ├── debug       // 调试接口Go运行时调试功能 </span><br><span class="line">│   ├── ethapi      // 常用的以太坊API函数 </span><br><span class="line">│   ├── guide       // 小测试套件，以确保开发指南工作中的代码段正常运行 </span><br><span class="line">│   ├── jsre        // JavaScript执行环境 </span><br><span class="line">│   │   └── deps    // 控制台JavaScript依赖项Go嵌入 </span><br><span class="line">│   └── web3ext     // geth确保web3.js延伸</span><br><span class="line">├── les             // 轻量级Ethereum子协议 </span><br><span class="line">│   └── flowcontrol // 客户端流程控制机制 </span><br><span class="line">├── light           // 客户端实现按需检索能力的状态和链对象</span><br><span class="line">├── log             // 输出日志 </span><br><span class="line">│   └── term</span><br><span class="line">├── metrics         // Coda Hale度量库的Go端口 </span><br><span class="line">│   ├── exp         // 表达式相关操作 </span><br><span class="line">│   ├── influxdb</span><br><span class="line">│   └── librato</span><br><span class="line">├── miner           // 以太坊块创建和挖矿 </span><br><span class="line">├── mobile          // geth的移动端API</span><br><span class="line">├── node            // 设置多维接口节点</span><br><span class="line">├── p2p             // p2p网络协议 </span><br><span class="line">│   ├── discover    // 节点发现协议 </span><br><span class="line">│   ├── discv5      // RLPx v5主题相关的协议 </span><br><span class="line">│   ├── enr         // 实现EIP-778中的以太坊节点记录 </span><br><span class="line">│   ├── nat         // 提供网络端口映射协议的权限 </span><br><span class="line">│   ├── netutil     // 网络包拓展 </span><br><span class="line">│   ├── protocols   // p2p拓展 </span><br><span class="line">│   └── simulations // 实现模拟p2p网络 </span><br><span class="line">├── params</span><br><span class="line">├── rlp             // RLP系列化格式 </span><br><span class="line">├── rpc             // 通过网络或者I/O链接来访问接口</span><br><span class="line">├── signer</span><br><span class="line">│   ├── core</span><br><span class="line">│   ├── rules</span><br><span class="line">│   │   └── deps</span><br><span class="line">│   └── storage</span><br><span class="line">├── swarm</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── client</span><br><span class="line">│   │   └── http</span><br><span class="line">│   ├── bmt</span><br><span class="line">│   ├── dev</span><br><span class="line">│   ├── fuse</span><br><span class="line">│   ├── grafana_dashboards</span><br><span class="line">│   ├── log</span><br><span class="line">│   ├── metrics</span><br><span class="line">│   ├── multihash</span><br><span class="line">│   ├── network</span><br><span class="line">│   ├── pot</span><br><span class="line">│   ├── pss</span><br><span class="line">│   ├── services</span><br><span class="line">│   ├── state</span><br><span class="line">│   ├── storage</span><br><span class="line">│   └── testutil</span><br><span class="line">├── tests             // 以太坊JSON测试 </span><br><span class="line">├── trie              // Merkle Patricia树实现</span><br><span class="line">├── vendor</span><br><span class="line">│   ├── github.com</span><br><span class="line">│   ├── gopkg.in</span><br><span class="line">│   │   └── check.v1  // Go更深的测试 </span><br><span class="line">└── whisper</span><br><span class="line">    ├── mailserver</span><br><span class="line">    ├── shhclient</span><br><span class="line">    ├── whisperv5</span><br><span class="line">    └── whisperv6</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/blockchain/cypherium-dir-description/&quot;&gt;https://lilyssh.cn/blockchain/cypherium-dir-description/&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;go-cypherium&lt;br&gt;本篇为转发，只做了下样式整理，&lt;a href=&quot;https://blog.csdn.net/jiang_xinxing/article/details/80249981&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="https://lilyssh.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://lilyssh.cn/tags/Blockchain/"/>
    
      <category term="区块链" scheme="https://lilyssh.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="https://lilyssh.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>Go Ethereum 以太坊 web3.js 打包编译发布过程</title>
    <link href="https://lilyssh.cn/blockchain/geth-web3-gulp-bindata-/"/>
    <id>https://lilyssh.cn/blockchain/geth-web3-gulp-bindata-/</id>
    <published>2018-08-08T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.406Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911406" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911406</a>  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以太坊的js交互是靠<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a>调用的。<br>改完后，需要打包，放到<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">Go Ethereum</a>里测试,以下就是打包编译过程说明。<br>web3.js版本：v0.20.6。<br><a id="more"></a></p><ol><li>安装cnpm</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>web3.js</code>的根路径下 安装<code>web3.js</code>的依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure><ol start="3"><li>安装<code>gulp</code>打包命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>web3.js</code>的根路径下 执行<code>gulp</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><ol start="5"><li>把<code>dist/web3.js</code>文件拷贝到项目中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp dist/web3.js ../go-cypherium/internal/jsre/deps</span><br></pre></td></tr></table></figure><ol start="6"><li>安装<code>go-bindata</code>(我是在~目录下执行的)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/jteeuwen/go-bindata/...</span><br></pre></td></tr></table></figure><ol start="7"><li>复制 go-bindata文件 到 go的安装目录的bin下。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/go/bin/go-bindata  ~/install/go/bin</span><br></pre></td></tr></table></figure><ol start="8"><li>在cypherium_private/go-cypherium/internal/jsre/deps下执行deps.go的倒数第二行,会看到bindata.go已变蓝色，大功告成！</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-bindata -nometadata -pkg deps -o bindata.go bignumber.js web3.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://blog.csdn.net/lilyssh/article/details/82911406&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lilyssh/article/details/82911406&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以太坊的js交互是靠&lt;a href=&quot;https://github.com/ethereum/web3.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;web3.js&lt;/a&gt;调用的。&lt;br&gt;改完后，需要打包，放到&lt;a href=&quot;https://github.com/ethereum/go-ethereum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go Ethereum&lt;/a&gt;里测试,以下就是打包编译过程说明。&lt;br&gt;web3.js版本：v0.20.6。&lt;br&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="https://lilyssh.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://lilyssh.cn/tags/Blockchain/"/>
    
      <category term="区块链" scheme="https://lilyssh.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="https://lilyssh.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>Cypherium 同步区块测试操作步骤</title>
    <link href="https://lilyssh.cn/blockchain/cypherium-test-sync-block/"/>
    <id>https://lilyssh.cn/blockchain/cypherium-test-sync-block/</id>
    <published>2018-08-07T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.405Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/blockchain/cypherium-test-sync-block/">https://lilyssh.cn/blockchain/cypherium-test-sync-block/</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Cypherium 同步区块链测试步骤。以下步骤适用于同一台机子测试。如果使用两台电脑测试，则有关第二节点的操作在另一台机子上执行即可。以下命令请在<code>cypherium_private/go-cypherium</code>路径下执行。<br><a id="more"></a></p><ol><li>创建test文件夹,test中目录结构如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/test ⌚ 14:02:17</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── genesis.json</span><br><span class="line">├── group.toml</span><br><span class="line">├── node_01</span><br><span class="line">│   ├── data</span><br><span class="line">└── node_02</span><br><span class="line">    ├── data</span><br></pre></td></tr></table></figure><ol start="2"><li>清理  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><ol start="3"><li>编译  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make cypher</span><br></pre></td></tr></table></figure><ol start="4"><li>生成节点信息  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher setup</span><br></pre></td></tr></table></figure><p>需要输入 ip：端口，用于测试使用kyber的Ed25519算法生成<code>public.toml</code>和<code>private.toml</code>，保存在默认路径。目前没做ip发现，所以需手动拼接公钥<code>~/Library/Application\ Support/cypher/public.toml</code>(Mac默认路径)，用于模拟测试。节点名字可自定义，如node_01_name。<br><img src="https://resource.lilyssh.cn/pic/cypher%20setup_.png" alt></p><ol start="5"><li><p>同理，再生成第二个节点。</p></li><li><p>把第一、二个节点的public.toml，拼接到~/workspace/test/group.toml中。</p></li></ol><p><img src="https://resource.lilyssh.cn/pic/group.toml.png" alt></p><ol start="7"><li>初始化 两个节点的创世区块。  </li></ol><p>第一个节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_01/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>第二个节点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --datadir &quot;~/workspace/test/node_02/data&quot; init ~/workspace/test/genesis.json</span><br></pre></td></tr></table></figure></p><p>genesis.json中内容可参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">        &quot;chainId&quot;: 123666,</span><br><span class="line">        &quot;homesteadBlock&quot;: 0,</span><br><span class="line">        &quot;eip155Block&quot;: 0,</span><br><span class="line">        &quot;eip158Block&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">  &quot;alloc&quot;      : &#123;&#125;,</span><br><span class="line">  &quot;coinbase&quot;   : &quot;0x0000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;difficulty&quot; : &quot;0x20000&quot;,</span><br><span class="line">  &quot;extraData&quot;  : &quot;&quot;,</span><br><span class="line">  &quot;gasLimit&quot;   : &quot;0x2fefd8&quot;,</span><br><span class="line">  &quot;nonce&quot;      : &quot;0x0000000000000042&quot;,</span><br><span class="line">  &quot;mixhash&quot;    : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;parentHash&quot; : &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;timestamp&quot;  : &quot;0x00&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>启动第一个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_01/private.toml --datadir ~/workspace/test/node_01/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7010 --rpcport 8510 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_01/output2.log</span><br></pre></td></tr></table></figure><ol start="9"><li>启动第一个节点的js交互窗口(用上一步成的ipc文件)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_01/data/cypher.ipc</span><br></pre></td></tr></table></figure><ol start="10"><li>启动第二个节点。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher --onetdir ~/workspace/test/node_02/private.toml --datadir ~/workspace/test/node_02/data --publickeydir ~/workspace/test/group.toml --networkid 123666 --port 7020 --rpcport 8520 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcapi eth,web3,personal --verbosity 5 2&gt; ~/workspace/test/node_02/output2.log</span><br></pre></td></tr></table></figure><ol start="11"><li>启动第二个节点的js交互窗口(用上一步成的ipc文件)。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/cypher attach ~/workspace/test/node_02/data/cypher.ipc</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/attach%20node_.jpg" alt></p><ol start="12"><li>从此步骤开始，都将在js交互涌窗口执行。查看第一个节点的信息。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.nodeInfo</span><br></pre></td></tr></table></figure><ol start="13"><li>在第二个节点中，创建用户，保存挖矿奖励。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(&quot;password&quot;)</span><br></pre></td></tr></table></figure><ol start="14"><li>在第二个节点中，加入第一个节点。就是把cnode中的内容粘进addPeer中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer(&quot;cnode&quot;)</span><br></pre></td></tr></table></figure><ol start="15"><li>在第一个节点中，验证一下是否已加入。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net</span><br></pre></td></tr></table></figure><ol start="16"><li>主节点调用开始同步命令，从交易池里取tx执行，并打包生成txBlock，发给其他委员会成员做bftcosi共识。会看到两个节点的信息都在滚动。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.start()</span><br></pre></td></tr></table></figure><ol start="17"><li>停止共识。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bftcosi.stop()</span><br></pre></td></tr></table></figure><ol start="18"><li>查看下两个节点的区块数量是否相同。</li></ol><p><img src="https://resource.lilyssh.cn/pic/txBlockNumber.png" alt></p><ol start="19"><li>(不时需要)解锁账户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.unlockAccount(&quot;需解锁账户&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://resource.lilyssh.cn/pic/unlockAccount.png" alt></p><ol start="20"><li>查看交易池状态，pending为待确认的交易数量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txpool.status</span><br></pre></td></tr></table></figure></li></ol><p>会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pending: 0,</span><br><span class="line">  queued: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="19"><li>退出：</li></ol><p><img src="https://resource.lilyssh.cn/pic/killall.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/blockchain/cypherium-test-sync-block/&quot;&gt;https://lilyssh.cn/blockchain/cypherium-test-sync-block/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Cypherium 同步区块链测试步骤。以下步骤适用于同一台机子测试。如果使用两台电脑测试，则有关第二节点的操作在另一台机子上执行即可。以下命令请在&lt;code&gt;cypherium_private/go-cypherium&lt;/code&gt;路径下执行。&lt;br&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="https://lilyssh.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://lilyssh.cn/tags/Blockchain/"/>
    
      <category term="区块链" scheme="https://lilyssh.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="https://lilyssh.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="Cypherium" scheme="https://lilyssh.cn/tags/Cypherium/"/>
    
  </entry>
  
  <entry>
    <title>Go Ethereum 以太坊 web3.js 控制台 调试</title>
    <link href="https://lilyssh.cn/blockchain/geth-web3-javascript-debug/"/>
    <id>https://lilyssh.cn/blockchain/geth-web3-javascript-debug/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.407Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911363" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911363</a>  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近要根据以太坊，做个数字货币，需要修改一些命令，就看了一下<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a>。<br>每次改完，都需要打包，放到<a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">Go Ethereum</a>里测试，非常麻烦，就研究了一波怎么调试和怎么使用测试用例。<br><a id="more"></a></p><h1 id="一、从官网寻找测试方法"><a href="#一、从官网寻找测试方法" class="headerlink" title="一、从官网寻找测试方法"></a>一、从官网寻找测试方法</h1><p>1、从web3.js的github地址页面，看<a href="https://github.com/ethereum/web3.js/blob/develop/README.md" target="_blank" rel="noopener">README.md</a>，能看到测试命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br></pre></td></tr></table></figure></p><p>2、从<a href="https://github.com/ethereum/web3.js/blob/develop/package.json" target="_blank" rel="noopener">package.json</a>中可以看到<code>npm test</code>的测试方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;gulp&quot;,</span><br><span class="line">    &quot;watch&quot;: &quot;gulp watch&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;jshint *.js lib&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;mocha; jshint *.js lib&quot;,</span><br><span class="line">    &quot;test-coveralls&quot;: &quot;istanbul cover _mocha -- -R spec &amp;&amp; cat coverage/lcov.info | coveralls --verbose&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>看到web3.js是用<code>mocha</code>测试的。  </p><h1 id="二、使用WebStorm调试web3-js"><a href="#二、使用WebStorm调试web3-js" class="headerlink" title="二、使用WebStorm调试web3.js"></a>二、使用<a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>调试<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a></h1><p>1、点击<code>Add Configuration</code>，添加一个测试配置。<br><img src="https://resource.lilyssh.cn/pic/add%20configuration.png" alt><br>2、选择Mocha：<br><img src="https://resource.lilyssh.cn/pic/add%20mocha.png" alt><br>3、配置mocha：<br><img src="https://resource.lilyssh.cn/pic/config%20mocha.png" alt><br>4、debug：<br><img src="https://resource.lilyssh.cn/pic/mocha%20debug.png" alt></p><p>接下来就可以愉快的调试啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://blog.csdn.net/lilyssh/article/details/82911363&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lilyssh/article/details/82911363&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近要根据以太坊，做个数字货币，需要修改一些命令，就看了一下&lt;a href=&quot;https://github.com/ethereum/web3.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;web3.js&lt;/a&gt;。&lt;br&gt;每次改完，都需要打包，放到&lt;a href=&quot;https://github.com/ethereum/go-ethereum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go Ethereum&lt;/a&gt;里测试，非常麻烦，就研究了一波怎么调试和怎么使用测试用例。&lt;br&gt;
    
    </summary>
    
      <category term="Blockchain" scheme="https://lilyssh.cn/categories/Blockchain/"/>
    
    
      <category term="Blockchain" scheme="https://lilyssh.cn/tags/Blockchain/"/>
    
      <category term="区块链" scheme="https://lilyssh.cn/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="https://lilyssh.cn/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>mysql 8.0 主从复制 基本配置</title>
    <link href="https://lilyssh.cn/mysql/1-mysql-replication/"/>
    <id>https://lilyssh.cn/mysql/1-mysql-replication/</id>
    <published>2018-06-18T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.418Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/mysql/1-mysql-replication/">https://lilyssh.cn/mysql/1-mysql-replication/</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MySQL主从复制可实现数据的多处自动备份。不仅可以加强数据的安全性，通过实现读写分离还能提升数据库的负载性能。<br><a id="more"></a></p><h1 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h1><p><img src="http://p8wysinsm.bkt.clouddn.com/mysql_replication.jpeg" alt> MySQL之间数据复制的基础是二进制日志文件（binary log file）。一台MySQL数据库一旦启用二进制日志后，其作为master，它的数据库中所有操作都会以“事件”的方式记录在二进制日志中，其他数据库作为slave通过一个I/O线程与主服务器保持通信，并监控master的二进制日志文件的变化，如果发现master二进制日志文件发生变化，则会把变化复制到自己的中继日志中，然后slave的一个SQL线程会把相关的“事件”执行到自己的数据库中，以此实现从数据库和主数据库的一致性，也就实现了主从复制。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="主服务器："><a href="#主服务器：" class="headerlink" title="主服务器："></a>主服务器：</h2><ul><li>开启二进制日志</li><li>配置唯一的server-id</li><li>获得master二进制日志文件名及位置</li><li>创建一个用于slave和master通信的用户账号<h2 id="从服务器："><a href="#从服务器：" class="headerlink" title="从服务器："></a>从服务器：</h2></li><li>配置唯一的server-id</li><li>使用master分配的用户账号读取master二进制日志</li><li>启用slave服务</li></ul><p>具体实现过程如下：<br>一、主数据库master修改：<br>1.修改mysql配置</p><p>找到主数据库的配置文件my.cnf(或者my.ini)，我的在/etc/mysql/my.cnf,在[mysqld]部分插入如下两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log_bin=mysql-bin #开启二进制日志,mysql-bin是二进制日志文件的名称，可自定义命名。</span><br><span class="line">server-id=1 #设置server-id</span><br></pre></td></tr></table></figure></p><p>2.重启mysql，创建用于同步的用户账号</p><p>打开mysql会话shell&gt;mysql -hlocalhost -uname -ppassword</p><p>创建用户并授权：用户：repl 密码：slavepass<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;repl&apos;@&apos;123.57.44.85&apos; IDENTIFIED BY &apos;slavepass&apos;;#创建用户</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;repl&apos;@&apos;123.57.44.85&apos;;#分配权限</span><br><span class="line">mysql&gt;flush privileges;   #刷新权限</span><br></pre></td></tr></table></figure></p><p>3.查看master状态，记录二进制文件名(mysql-bin.000003)和位置(73)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><table><thead><tr><th>File</th><th>Position</th><th>Binlog_Do_DB</th><th>Binlog_Ignore_DB</th><th>Executed_Gtid_Set</th></tr></thead><tbody><tr><td>mysql-bin.000004</td><td>155</td><td></td><td></td></tr></tbody></table><p>二、从服务器slave修改：<br>1.修改mysql配置<br>同样找到my.cnf配置文件，添加server-id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2 #设置server-id，必须唯一</span><br></pre></td></tr></table></figure></p><p>2.重启mysql，打开mysql会话，执行同步SQL语句(需要主服务器主机名，登陆凭据，二进制文件的名称和位置)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">    -&gt;     MASTER_HOST=&apos;192.168.0.110&apos;,</span><br><span class="line">    -&gt;     MASTER_USER=&apos;repl&apos;,</span><br><span class="line">    -&gt;     MASTER_PASSWORD=&apos;slavepass&apos;,</span><br><span class="line">    -&gt;     MASTER_LOG_FILE=&apos;mysql-bin.000003&apos;,</span><br><span class="line">    -&gt;     MASTER_LOG_POS=73;</span><br></pre></td></tr></table></figure></p><p>3.启动slave同步进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;start slave;</span><br></pre></td></tr></table></figure></p><p>4.查看slave状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 182.92.172.80</span><br><span class="line">                  Master_User: rep1</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000013</span><br><span class="line">          Read_Master_Log_Pos: 11662</span><br><span class="line">               Relay_Log_File: mysqld-relay-bin.000022</span><br><span class="line">                Relay_Log_Pos: 11765</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000013</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>当Slave_IO_Running和Slave_SQL_Running都为YES的时候就表示主从同步设置成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/mysql/1-mysql-replication/&quot;&gt;https://lilyssh.cn/mysql/1-mysql-replication/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;MySQL主从复制可实现数据的多处自动备份。不仅可以加强数据的安全性，通过实现读写分离还能提升数据库的负载性能。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lilyssh.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lilyssh.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>基于Dubbo的Hessian协议实现远程调用</title>
    <link href="https://lilyssh.cn/dubbo/dubbo-hessian/"/>
    <id>https://lilyssh.cn/dubbo/dubbo-hessian/</id>
    <published>2018-05-21T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.409Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/82911937" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/82911937</a>   </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>创建两个项目，一个provider提供dubbo服务，一个client消费服务。<br>源码地址：<a href="https://gitee.com/qianxunclub/java-demo/tree/master/chapter-2" target="_blank" rel="noopener">https://gitee.com/qianxunclub/java-demo/tree/master/chapter-2</a><br>目录结构如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ tree -I target</span><br><span class="line"></span><br><span class="line">chapter-2</span><br><span class="line">├── api</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           └── java</span><br><span class="line">│               └── com</span><br><span class="line">│                   └── qianxunclub</span><br><span class="line">│                       └── chapter2</span><br><span class="line">│                           └── api</span><br><span class="line">│                               └── DemoService.java</span><br><span class="line">├── client</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── com</span><br><span class="line">│           │       └── qianxunclub</span><br><span class="line">│           │           └── chapter2</span><br><span class="line">│           │               └── client</span><br><span class="line">│           │                   └── ClientMain.java</span><br><span class="line">│           └── resource</span><br><span class="line">│               ├── demo-consumer.xml</span><br><span class="line">│               └── log4j.properties</span><br><span class="line">├── pom.xml</span><br><span class="line">└── provider</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br><span class="line">        └── main</span><br><span class="line">            ├── java</span><br><span class="line">            │   └── com</span><br><span class="line">            │       └── qianxunclub</span><br><span class="line">            │           └── chapter2</span><br><span class="line">            │               └── provider</span><br><span class="line">            │                   ├── DemoServiceImpl.java</span><br><span class="line">            │                   └── ProviderMain.java</span><br><span class="line">            └── resource</span><br><span class="line">                ├── META-INF</span><br><span class="line">                │   └── spring</span><br><span class="line">                │       └── demo-provider.xml</span><br><span class="line">                └── log4j.properties</span><br></pre></td></tr></table></figure><h1 id="1、在provider的pom-xml中引入maven包"><a href="#1、在provider的pom-xml中引入maven包" class="headerlink" title="1、在provider的pom.xml中引入maven包"></a>1、在provider的<code>pom.xml</code>中引入maven包</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qianxunclub<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter-2-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2、在provider中添加配置文件"><a href="#2、在provider中添加配置文件" class="headerlink" title="2、在provider中添加配置文件"></a>2、在provider中添加配置文件</h1><p>在provider的<code>resource/META-INF/spring</code>下建个xml, 例如：demo-provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.qianxunclub.chapter2.provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span> <span class="attr">owner</span>=<span class="string">"lily"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"qianxunclub.com:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前服务发布所依赖的协议；WebService、Thrift、Hessian、http--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增加hessian协议--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"hessian"</span> <span class="attr">port</span>=<span class="string">"8090"</span> <span class="attr">server</span>=<span class="string">"jetty"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：该xml文件默认需要建在resource/META-INF/spring文件夹下。多说无益，上dubbo源码。<br>从ProviderMain.java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Main.main(args);</span><br></pre></td></tr></table></figure><p>点进去<code>main</code>方法，查看<code>main</code>方法中<code>Container</code>接口的其中之一的实现类<code>SpringContainer</code>中可以看到默认路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SPRING_CONFIG = <span class="string">"classpath*:META-INF/spring/*.xml"</span>;</span><br></pre></td></tr></table></figure><p>也可以自定义路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String configPath = ConfigUtils.getProperty(<span class="string">"dubbo.spring.config"</span>);</span><br><span class="line">    <span class="keyword">if</span>(configPath == <span class="keyword">null</span> || configPath.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        configPath = <span class="string">"classpath*:META-INF/spring/*.xml"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    context = <span class="keyword">new</span> ClassPathXmlApplicationContext(configPath.split(<span class="string">"[,\\s]+"</span>));</span><br><span class="line">    context.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点进去getProperty方法,一路ctrl下去，可以看到ConfigUtils.java中自定义路径的规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(PROPERTIES == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Class var0 = ConfigUtils.class;</span><br><span class="line">        <span class="keyword">synchronized</span>(ConfigUtils.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(PROPERTIES == <span class="keyword">null</span>) &#123;</span><br><span class="line">                String path = System.getProperty(<span class="string">"dubbo.properties.file"</span>);</span><br><span class="line">                <span class="keyword">if</span>(path == <span class="keyword">null</span> || path.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    path = System.getenv(<span class="string">"dubbo.properties.file"</span>);</span><br><span class="line">                    <span class="keyword">if</span>(path == <span class="keyword">null</span> || path.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                        path = <span class="string">"dubbo.properties"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                PROPERTIES = loadProperties(path, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PROPERTIES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resource下创建dubbo.properties文件，内容如下：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#dubbo配置的自定义路径</span><br><span class="line">dubbo.spring.config=classpath*:hello/*.xml</span><br></pre></td></tr></table></figure><h1 id="3、在api模块中添加对外抛出的接口"><a href="#3、在api模块中添加对外抛出的接口" class="headerlink" title="3、在api模块中添加对外抛出的接口"></a>3、在api模块中添加对外抛出的接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在provider中添加该接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qianxunclub.chapter2.api.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"demoService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello:"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>demo-provider.xml</code>中，添加 对外抛出接口：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--服务发布的配置，需要暴露的服务接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span></span></span><br><span class="line"><span class="tag">        <span class="attr">interface</span>=<span class="string">"com.qianxunclub.chapter2.api.DemoService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">"demoService"</span> <span class="attr">protocol</span>=<span class="string">"hessian"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4、调用provider中的main方法"><a href="#4、调用provider中的main方法" class="headerlink" title="4、调用provider中的main方法"></a>4、调用provider中的main方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.container.Main;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Main.main(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在provider控制台，会打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DUBBO] Register: hessian://192.168.103.163:8090/com.qianxunclub.chapter2.provider.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.3&amp;interface=com.qianxunclub.chapter2.provider.DemoService&amp;methods=sayHello&amp;owner=lily&amp;pid=6656&amp;server=jetty&amp;side=provider&amp;timestamp=1527126914293, dubbo version: 2.5.3, current host: 127.0.0.1</span><br></pre></td></tr></table></figure><p>进入zookeeper客户端，查看服务：<br><img src="https://lilyssh.github.io/pic/zk_provider_sayhello.jpg" alt>  </p><h1 id="5、在client的pom-xml中引入maven包"><a href="#5、在client的pom-xml中引入maven包" class="headerlink" title="5、在client的pom.xml中引入maven包"></a>5、在client的<code>pom.xml</code>中引入maven包</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qianxunclub<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter-2-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6、在client中添加配置文件"><a href="#6、在client中添加配置文件" class="headerlink" title="6、在client中添加配置文件"></a>6、在client中添加配置文件</h1><p>在provider的<code>resource/META-INF</code>下建个xml, 例如：demo-consumer.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-client"</span> <span class="attr">owner</span>=<span class="string">"mic"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"qianxunclub.com:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前服务发布所依赖的协议；webserovice、Thrift、Hessain、http--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20881"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--服务发布的配置，需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">interface</span>=<span class="string">"com.qianxunclub.chapter2.api.DemoService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">"demoService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7、调用client中的main方法"><a href="#7、调用client中的main方法" class="headerlink" title="7、调用client中的main方法"></a>7、调用client中的main方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qianxunclub.chapter2.api.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"demo-consumer.xml"</span>);</span><br><span class="line">        DemoService demoService = context.getBean(DemoService.class);</span><br><span class="line">        String r = demoService.sayHello(<span class="string">"zhangsan"</span>);</span><br><span class="line">        System.out.println(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unsupported protocol hessian in notified url: hessian://192.168.103.163:8090/com.qianxunclub.chapter2.api.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.3&amp;interface=com.qianxunclub.chapter2.api.DemoService&amp;methods=sayHello&amp;owner=lily&amp;pid=11648&amp;server=jetty&amp;side=provider&amp;timestamp=1527152915485 from registry qianxunclub.com:2181 to consumer 192.168.103.163, supported protocol: [dubbo, injvm, mock, redis, registry, rmi, thrift]</span><br></pre></td></tr></table></figure><p><img src="https://lilyssh.github.io/pic/UnsupportedProtocolHessianError.jpg" alt><br>原来是client端少引了个hessian依赖，加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次启动,会看到控制台打印了：hello:zhangsan。<br>大功告成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://blog.csdn.net/lilyssh/article/details/82911937&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lilyssh/article/details/82911937&lt;/a&gt;   &lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;创建两个项目，一个provider提供dubbo服务，一个client消费服务。&lt;br&gt;源码地址：&lt;a href=&quot;https://gitee.com/qianxunclub/java-demo/tree/master/chapter-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/qianxunclub/java-demo/tree/master/chapter-2&lt;/a&gt;&lt;br&gt;目录结构如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lilyssh.cn/categories/Java/"/>
    
      <category term="Dubbo" scheme="https://lilyssh.cn/categories/Java/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="https://lilyssh.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>部署和使用dubbo-admin做服务治理</title>
    <link href="https://lilyssh.cn/dubbo/dubbo-admin-use-method/"/>
    <id>https://lilyssh.cn/dubbo/dubbo-admin-use-method/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.408Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/dubbo/dubbo-admin-use-method/">https://lilyssh.cn/dubbo/dubbo-admin-use-method/</a>   </p><h1 id="1、下载dubbo-admin源码"><a href="#1、下载dubbo-admin源码" class="headerlink" title="1、下载dubbo-admin源码"></a>1、下载dubbo-admin源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/incubator-dubbo-ops.git</span><br></pre></td></tr></table></figure><p>会下载下来三个项目：</p><ul><li>dubbo-admin：dubbo控制台(本章重点，敲黑板)</li><li>dubbo-monitor-simple：监控</li><li>dubbo-registry-simple：等我知道这是干啥的了，再来补充。  <a id="more"></a></li></ul><h1 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h1><p>修改<code>webapp/WEB-INF/dubbo.properties</code><br><img src="https://lilyssh.github.io/pic/dubbo.properties.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># zookeeper注册中心地址</span><br><span class="line">dubbo.registry.address=zookeeper://qianxunclub.com:2181</span><br><span class="line"># 默认root用户</span><br><span class="line">dubbo.admin.root.password=root</span><br><span class="line"># 默认guest用户</span><br><span class="line">dubbo.admin.guest.password=guest</span><br></pre></td></tr></table></figure></p><p>如果需要，可修改或添加用户名密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo.admin.用户名.password=密码</span><br></pre></td></tr></table></figure></p><h1 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h1><p>用tomcat启动本项目，访问<code>http://localhost:8080/</code>，并使用上一步<code>dubbo.properties</code>配置好的用户名密码登陆。  </p><h1 id="4、控制台使用"><a href="#4、控制台使用" class="headerlink" title="4、控制台使用"></a>4、控制台使用</h1><p>控制台所展示的数据，是从zookeeper里读取到的数据。  </p><p><img src="https://lilyssh.github.io/pic/dubbo-admin-services.png" alt><br>菜单功能描述：</p><ul><li>services:已注册到zookeeper的dubbo服务接口列表</li><li>applications：已注册到zookeeper的dubbo服务列表</li><li>addresses：所有服务提供者和消费者的ip和端口号列表，点进去会显示，该ip端口下所有的服务信息，包括提供的，消费的，路由，权重等。</li></ul><p>其他菜单，可自行研究。并且还提供了很多服务治理的操作，如:禁用/启用服务，设置权重，添加路由等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/dubbo/dubbo-admin-use-method/&quot;&gt;https://lilyssh.cn/dubbo/dubbo-admin-use-method/&lt;/a&gt;   &lt;/p&gt;
&lt;h1 id=&quot;1、下载dubbo-admin源码&quot;&gt;&lt;a href=&quot;#1、下载dubbo-admin源码&quot; class=&quot;headerlink&quot; title=&quot;1、下载dubbo-admin源码&quot;&gt;&lt;/a&gt;1、下载dubbo-admin源码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/apache/incubator-dubbo-ops.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会下载下来三个项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dubbo-admin：dubbo控制台(本章重点，敲黑板)&lt;/li&gt;
&lt;li&gt;dubbo-monitor-simple：监控&lt;/li&gt;
&lt;li&gt;dubbo-registry-simple：等我知道这是干啥的了，再来补充。
    
    </summary>
    
      <category term="Java" scheme="https://lilyssh.cn/categories/Java/"/>
    
      <category term="Dubbo" scheme="https://lilyssh.cn/categories/Java/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="https://lilyssh.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Main方法启动dubbo，并使用dubbo命令行模拟客户端测试</title>
    <link href="https://lilyssh.cn/dubbo/dubbo-main-reload/"/>
    <id>https://lilyssh.cn/dubbo/dubbo-main-reload/</id>
    <published>2018-05-19T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.410Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/dubbo/dubbo-main-reload/">https://lilyssh.cn/dubbo/dubbo-main-reload/</a></p><h2 id="1、引入maven包"><a href="#1、引入maven包" class="headerlink" title="1、引入maven包"></a>1、引入maven包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2、添加配置文件"><a href="#2、添加配置文件" class="headerlink" title="2、添加配置文件"></a>2、添加配置文件</h2><p>在<code>resource/META-INF</code>下建个xml, 例如：demo-provider.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span> <span class="attr">owner</span>=<span class="string">"mic"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"qianxunclub.com:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当前服务发布所依赖的协议；webService、Thrift、Hessian、http--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="3、添加对外抛出的接口"><a href="#3、添加对外抛出的接口" class="headerlink" title="3、添加对外抛出的接口"></a>3、添加对外抛出的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello:"</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>demo-provider.xml</code>配置文件中，添加 对外抛出接口：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.qianxunclub.demo.dubbo.DemoServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--服务发布的配置，需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">interface</span>=<span class="string">"com.qianxunclub.demo.dubbo.DemoService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ref</span>=<span class="string">"demoService"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4、调用dubbo的main方法"><a href="#4、调用dubbo的main方法" class="headerlink" title="4、调用dubbo的main方法"></a>4、调用dubbo的main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.container.Main;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、检查服务注册是否成功"><a href="#5、检查服务注册是否成功" class="headerlink" title="5、检查服务注册是否成功"></a>5、检查服务注册是否成功</h2><p>使用 telnet 模拟调用dubbo服务,端口为<code>demo-provider.xml</code>里配置的dubbo端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 20880</span><br></pre></td></tr></table></figure></p><p>如果连接成功，会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Trying ::1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line"></span><br><span class="line">dubbo&gt;</span><br></pre></td></tr></table></figure></p><p>使用<code>ls</code>查看所有服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;ls</span><br><span class="line">com.qianxunclub.demo.dubbo.DemoService</span><br></pre></td></tr></table></figure></p><p>如果出现这个接口，代表注册成功。</p><h2 id="6、模拟客户端调用"><a href="#6、模拟客户端调用" class="headerlink" title="6、模拟客户端调用"></a>6、模拟客户端调用</h2><p>使用telnet模拟调用服务<br>使用<code>cd</code>进入到<code>com.qianxunclub.demo.dubbo.DemoService</code>中,并使用<code>ls</code>查看服务里的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;cd com.qianxunclub.demo.dubbo.DemoService</span><br><span class="line">Used the com.qianxunclub.demo.dubbo.DemoService as default.</span><br><span class="line">You can cancel default service by command: cd /</span><br><span class="line">dubbo&gt;ls</span><br><span class="line">Use default service com.qianxunclub.demo.dubbo.DemoService.</span><br><span class="line"></span><br><span class="line">sayHello</span><br></pre></td></tr></table></figure></p><p>使用invoke模拟客户端调用服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dubbo&gt;invoke sayHello(&quot;world&quot;)</span><br><span class="line">Use default service com.qianxunclub.demo.dubbo.DemoService.</span><br><span class="line">&quot;hello:world&quot;</span><br><span class="line">elapsed: 1 ms.</span><br></pre></td></tr></table></figure></p><p>大功告成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/dubbo/dubbo-main-reload/&quot;&gt;https://lilyssh.cn/dubbo/dubbo-main-reload/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、引入maven包&quot;&gt;&lt;a href=&quot;#1、引入maven包&quot; class=&quot;headerlink&quot; title=&quot;1、引入maven包&quot;&gt;&lt;/a&gt;1、引入maven包&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5.3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.sgroschupf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;zkclient&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lilyssh.cn/categories/Java/"/>
    
      <category term="Dubbo" scheme="https://lilyssh.cn/categories/Java/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="https://lilyssh.cn/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>浪淘沙（昨日出东城）</title>
    <link href="https://lilyssh.cn/poem/su-shi/zuo-ri-chu-dong-cheng/"/>
    <id>https://lilyssh.cn/poem/su-shi/zuo-ri-chu-dong-cheng/</id>
    <published>2018-03-02T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.421Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font size="5">浪淘沙</font>  <p>苏轼（1037年1月8日—1101年8月24日）   &nbsp;&nbsp;宋神宗&nbsp;&nbsp;熙宁五年(1072年)&nbsp;&nbsp;正月&nbsp;&nbsp;杭州&nbsp;&nbsp;35岁<br></p><p>昨日出东城，试探春情。  </p><p>墙头红杏暗如倾。  </p><p>槛内群芳芽未吐,早已回春。<br><a id="more"></a><br><br><br>绮陌敛香尘，雪霁前村。  </p><p>东君用意不辞辛。  </p><p>料想春光先到处，吹绽梅英。  </p></blockquote><p>译文：</p><p>昨日出东城踏青游玩。<br>墙头上的红杏颜色暗，茂密得好像要倾斜下来。<br>栏杆内侧的各种花草却还没有露出花苞，春天的脚步还没走到这里。<br><br><br>美丽的小路上，女子经过扬起尘土和落花，前面的村子刚刚下过雪。<br>这是掌管春天的神辛勤的脚步吧。<br>想必春天来到之时，柔风一定会先吹开梅花。</p><p><img src="http://wailian.work/images/2018/05/21/371259cfce51f4e2.jpg" alt="371259cfce51f4e2.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font size=&quot;5&quot;&gt;浪淘沙&lt;/font&gt;  

&lt;p&gt;苏轼（1037年1月8日—1101年8月24日）   &amp;nbsp;&amp;nbsp;宋神宗&amp;nbsp;&amp;nbsp;熙宁五年(1072年)&amp;nbsp;&amp;nbsp;正月&amp;nbsp;&amp;nbsp;杭州&amp;nbsp;&amp;nbsp;35岁&lt;br&gt;&lt;/p&gt;
&lt;p&gt;昨日出东城，试探春情。  &lt;/p&gt;
&lt;p&gt;墙头红杏暗如倾。  &lt;/p&gt;
&lt;p&gt;槛内群芳芽未吐,早已回春。&lt;br&gt;
    
    </summary>
    
      <category term="诗词赏析" scheme="https://lilyssh.cn/categories/%E8%AF%97%E8%AF%8D%E8%B5%8F%E6%9E%90/"/>
    
    
      <category term="宋词" scheme="https://lilyssh.cn/tags/%E5%AE%8B%E8%AF%8D/"/>
    
      <category term="词" scheme="https://lilyssh.cn/tags/%E8%AF%8D/"/>
    
      <category term="苏轼" scheme="https://lilyssh.cn/tags/%E8%8B%8F%E8%BD%BC/"/>
    
  </entry>
  
  <entry>
    <title>行香子（一叶舟轻）</title>
    <link href="https://lilyssh.cn/poem/su-shi/yi-ye-zhou-qing/"/>
    <id>https://lilyssh.cn/poem/su-shi/yi-ye-zhou-qing/</id>
    <published>2018-03-01T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.421Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font size="5">行香子</font>  <p>苏轼（1037年1月8日—1101年8月24日）   &nbsp;&nbsp;宋神宗&nbsp;&nbsp;熙宁六年(1073年)&nbsp;&nbsp;春&nbsp;&nbsp;浙江桐庐&nbsp;&nbsp;36岁<br></p><p>一叶舟轻，双桨鸿惊。  </p><p>水天清、影湛波平。  </p><p>鱼翻藻鉴，鹭点烟汀。</p><p>过沙溪急，霜溪冷，月溪明。</p><a id="more"></a><p><br><br>重重似画，曲曲如屏。  </p><p>算当年、虚老严陵。  </p><p>君臣一梦，今古虚名。</p><p>但远山长，云山乱，晓山青。 </p></blockquote><p>译文：</p><p>一叶小舟，荡着双桨，像惊飞的鸿雁一样，飞快的掠过水面。<br>天空碧蓝，水色清明，山色天光尽入江水，波平如镜。<br>水中游鱼清晰可数，不时跃出明镜般的水面；水边沙洲白鹭点点，悠然自得。<br>白天溪水清澈而见沙底，清晓的溪水清冷而有霜意，月下的溪水好似是明亮的水晶宫。<br><br><br>两岸连山重重叠叠如画景，曲曲折折又似屏风。<br>不由得想起当年终老在此的严子陵。<br>而今皇帝和隐士也已如梦一般消失，只留下空名而已。<br>真正能永恒流传下来的又是什么呢？<br>只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。</p><p><img src="https://lilyssh.github.io/pic/yi_ye_zhou_qing.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font size=&quot;5&quot;&gt;行香子&lt;/font&gt;  

&lt;p&gt;苏轼（1037年1月8日—1101年8月24日）   &amp;nbsp;&amp;nbsp;宋神宗&amp;nbsp;&amp;nbsp;熙宁六年(1073年)&amp;nbsp;&amp;nbsp;春&amp;nbsp;&amp;nbsp;浙江桐庐&amp;nbsp;&amp;nbsp;36岁&lt;br&gt;&lt;/p&gt;
&lt;p&gt;一叶舟轻，双桨鸿惊。  &lt;/p&gt;
&lt;p&gt;水天清、影湛波平。  &lt;/p&gt;
&lt;p&gt;鱼翻藻鉴，鹭点烟汀。&lt;/p&gt;
&lt;p&gt;过沙溪急，霜溪冷，月溪明。&lt;/p&gt;
    
    </summary>
    
      <category term="诗词赏析" scheme="https://lilyssh.cn/categories/%E8%AF%97%E8%AF%8D%E8%B5%8F%E6%9E%90/"/>
    
    
      <category term="宋词" scheme="https://lilyssh.cn/tags/%E5%AE%8B%E8%AF%8D/"/>
    
      <category term="词" scheme="https://lilyssh.cn/tags/%E8%AF%8D/"/>
    
      <category term="苏轼" scheme="https://lilyssh.cn/tags/%E8%8B%8F%E8%BD%BC/"/>
    
  </entry>
  
  <entry>
    <title>行香子（携手江村）</title>
    <link href="https://lilyssh.cn/poem/su-shi/xie_shou_jiang_cun/"/>
    <id>https://lilyssh.cn/poem/su-shi/xie_shou_jiang_cun/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.420Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font size="5">行香子</font>  <p>苏轼（1037年1月8日—1101年8月24日）   &nbsp;&nbsp;宋神宗&nbsp;&nbsp;熙宁七年(1074年)&nbsp;&nbsp;春&nbsp;&nbsp;浙江桐庐&nbsp;&nbsp;37岁&nbsp;&nbsp;丹阳寄述古（杭州知州陈襄）<br></p><p>携手江村，梅雪飘裙。  </p><p>情何限、处处消魂。  </p><p>故人不见，旧曲重闻。</p><p>向望湖楼，孤山寺，涌金门。</p><a id="more"></a><p><br><br>寻常行处，题诗千首。  </p><p>绣罗衫、与拂红尘。  </p><p>别来相忆，知是何人。</p><p>有湖中月，江边柳，陇头云。 </p></blockquote><p>译文：</p><p>风景依稀，又是一年之春了。携手寻春游玩时正值梅花似雪，飘沾衣裙。<br>天空碧蓝，水色清明，山色天光尽入江水，波平如镜。<br>水中游鱼清晰可数，不时跃出明镜般的水面；水边沙洲白鹭点点，悠然自得。<br>白天溪水清澈而见沙底，清晓的溪水清冷而有霜意，月下的溪水好似是明亮的水晶宫。<br><br><br>两岸连山重重叠叠如画景，曲曲折折又似屏风。<br>不由得想起当年终老在此的严子陵。<br>而今皇帝和隐士也已如梦一般消失，只留下空名而已。<br>真正能永恒流传下来的又是什么呢？<br>只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。</p><p><img src="https://lilyssh.github.io/pic/yi_ye_zhou_qing.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font size=&quot;5&quot;&gt;行香子&lt;/font&gt;  

&lt;p&gt;苏轼（1037年1月8日—1101年8月24日）   &amp;nbsp;&amp;nbsp;宋神宗&amp;nbsp;&amp;nbsp;熙宁七年(1074年)&amp;nbsp;&amp;nbsp;春&amp;nbsp;&amp;nbsp;浙江桐庐&amp;nbsp;&amp;nbsp;37岁&amp;nbsp;&amp;nbsp;丹阳寄述古（杭州知州陈襄）&lt;br&gt;&lt;/p&gt;
&lt;p&gt;携手江村，梅雪飘裙。  &lt;/p&gt;
&lt;p&gt;情何限、处处消魂。  &lt;/p&gt;
&lt;p&gt;故人不见，旧曲重闻。&lt;/p&gt;
&lt;p&gt;向望湖楼，孤山寺，涌金门。&lt;/p&gt;
    
    </summary>
    
      <category term="诗词赏析" scheme="https://lilyssh.cn/categories/%E8%AF%97%E8%AF%8D%E8%B5%8F%E6%9E%90/"/>
    
    
      <category term="宋词" scheme="https://lilyssh.cn/tags/%E5%AE%8B%E8%AF%8D/"/>
    
      <category term="词" scheme="https://lilyssh.cn/tags/%E8%AF%8D/"/>
    
      <category term="苏轼" scheme="https://lilyssh.cn/tags/%E8%8B%8F%E8%BD%BC/"/>
    
  </entry>
  
  <entry>
    <title>亿级流量架构(一) 概述</title>
    <link href="https://lilyssh.cn/architecture/high-concurrency-reason/"/>
    <id>https://lilyssh.cn/architecture/high-concurrency-reason/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-传统单体服务"><a href="#1-传统单体服务" class="headerlink" title="1.传统单体服务"></a>1.传统单体服务</h1><h2 id="什么是单体架构？"><a href="#什么是单体架构？" class="headerlink" title="什么是单体架构？"></a>什么是单体架构？</h2><p>传统单体服务就是 所有功能模块，只有一套代码，并且都部署在同一台服务器上。表都放在同一个数据库中。</p><a id="more"></a><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>(1) 复杂性逐渐变高,代码量大，各模块关系错综复杂。<br>(2) 阻碍技术创新,不能根据不同的模块的特点，为不同模块做技术选型。<br>(3) 开发效率低，由于提前没有考虑公用性，难以共用功能模块。</p><ul><li>所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断。 </li><li>所有人都阶段性完成任务后，不影响要上线的功能，才能部署。 </li></ul><ul><li>举个栗子，商城模块和活动模块都需要支付，但是由于两个模块的开发人员各自开发各自的，导致两者都重复造轮子，造成代码冗余，浪费时间，或者是商城已开发了支付，活动需要用商城的支付，此刻才想到共用的话，增加沟通成本，接口很可能会需要变动，也会导致牵一发而动全身，导致商城调用支付接口处变动。 </li></ul><p>(4) 无法按需伸缩。不能依据流量来布局，比如说，做集群，只能把整个项目集群，活跃度不高的模块就浪费资源了。<br>(5) 代码量大，部署速度会逐渐变慢。<br>(6) 由于耦合性太高，每次一点小的改动，都可能会导致其他模块受到影响，都需要重新对整个项目进行测试，部署和重启，而且还有可能会导致整个项目崩溃。</p><h1 id="2-微服务架构模式"><a href="#2-微服务架构模式" class="headerlink" title="2.微服务架构模式"></a>2.微服务架构模式</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务?"></a>什么是微服务?</h2><p>专注于单一责任的小型功能模块为基础，通过API相互通信的方式完成复杂业务系统搭建的一种设计思想。</p><h2 id="为什么需要微服务"><a href="#为什么需要微服务" class="headerlink" title="为什么需要微服务?"></a>为什么需要微服务?</h2><p>传统架构　扩展性差，可靠性不高，维护成本高。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>每个微服务都很小，这样能聚焦一个指定的业务功能或业务需求。</li><li>微服务能够被小团队单独开发。</li><li>微服务是松耦合，是有功能意义的服务，无论是在开发阶段还是在部署阶段，都是独立的。</li><li>微服务能够使用不同的语言开发。</li><li>微服务易于被一个开发人员理解，修改和维护。</li><li>微服务能根据不同的服务的流量等，来自定义服务配置。</li><li>易于和第三方集成。</li><li>每个微服务都能有自己独立的存储方式。</li><li>故障隔离。</li></ul><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul><li>分布式系统可能复杂，难以管理。  </li><li>分布部署，跟踪问题难。</li><li>服务数量增加，管理复杂性增加。</li></ul><h2 id="需要考虑的问题"><a href="#需要考虑的问题" class="headerlink" title="需要考虑的问题"></a>需要考虑的问题</h2><ul><li>虽然单个微服务代码量小，易于修改和维护，但是系统复杂度的总量是没变的。一个系统被拆成零碎的微服务后，最后还要集成为一个完整的系统，也很复杂。</li><li>当微服务达到一个量级的时候，如何提供一个高效的集群通讯机制，就成了一个问题。</li><li>单个微服务拥有自己的进程，进程本身就可以动态的启停，为无缝升级打好了基础，但谁来启动和停止进程，什么时机，选择在哪台设备上做这件事才是升级的关键，需要强大的版本管理和部署能力。</li><li>多个相同的微服务可以做负载均衡，提高性能和可靠性。就需要考虑什么时候应该启动更多的微服务，多个微服务的流量应该如何调度和分发，这背后也有一套复杂的负载监控和均衡系统在起作用。</li><li>微服务的上线和下线是动态的，当一个新的微服务上线时，用户如何访问到新服务？这就需要一个统一的入口，新的服务可以动态的注册到这个入口上，用户每次访问时，可以从这个入口拿到所有服务的访问地址。这个统一的入口，也是需要系统单独提供的。</li><li>安全策略如何集中管理？系统故障如何快速跟踪到具体服务？整个系统状态如何监控？服务之间的依赖关系如何管理？  </li></ul><h1 id="3-单体和微服务的区别"><a href="#3-单体和微服务的区别" class="headerlink" title="3.单体和微服务的区别"></a>3.单体和微服务的区别</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><table><thead><tr><th style="text-align:center">方面</th><th style="text-align:center">单体</th><th style="text-align:center">微服务</th></tr></thead><tbody><tr><td style="text-align:center">体积</td><td style="text-align:center">大</td><td style="text-align:center">小</td></tr><tr><td style="text-align:center">职责</td><td style="text-align:center">繁杂</td><td style="text-align:center">单一</td></tr><tr><td style="text-align:center">耦合度</td><td style="text-align:center">高</td><td style="text-align:center">松</td></tr><tr><td style="text-align:center">独立部署运行和扩展</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">独立开发和演化</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">独立团队和自治</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr></tbody></table><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><table><thead><tr><th style="text-align:center">方面</th><th style="text-align:center">单体</th><th style="text-align:center">微服务</th></tr></thead><tbody><tr><td style="text-align:center">开发效率</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">技术选型</td><td style="text-align:center">不灵活</td><td style="text-align:center">灵活</td></tr><tr><td style="text-align:center">按需伸缩</td><td style="text-align:center">不灵活</td><td style="text-align:center">灵活</td></tr><tr><td style="text-align:center">部署</td><td style="text-align:center">不灵活</td><td style="text-align:center">灵活</td></tr><tr><td style="text-align:center">可维护性</td><td style="text-align:center">难</td><td style="text-align:center">易</td></tr><tr><td style="text-align:center">可扩展性</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">稳定性</td><td style="text-align:center">低</td><td style="text-align:center">高</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-传统单体服务&quot;&gt;&lt;a href=&quot;#1-传统单体服务&quot; class=&quot;headerlink&quot; title=&quot;1.传统单体服务&quot;&gt;&lt;/a&gt;1.传统单体服务&lt;/h1&gt;&lt;h2 id=&quot;什么是单体架构？&quot;&gt;&lt;a href=&quot;#什么是单体架构？&quot; class=&quot;headerlink&quot; title=&quot;什么是单体架构？&quot;&gt;&lt;/a&gt;什么是单体架构？&lt;/h2&gt;&lt;p&gt;传统单体服务就是 所有功能模块，只有一套代码，并且都部署在同一台服务器上。表都放在同一个数据库中。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://lilyssh.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://lilyssh.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="亿级流量架构" scheme="https://lilyssh.cn/tags/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>B + tree 索引机制</title>
    <link href="https://lilyssh.cn/mysql/2-mysql-B+Tree/"/>
    <id>https://lilyssh.cn/mysql/2-mysql-B+Tree/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.418Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://lilyssh.cn/mysql/2-mysql-B+Tree/">https://lilyssh.cn/mysql/2-mysql-B+Tree/</a></p><p>正确的创建合适的索引是提升数据库查询性能的基础。<br><a id="more"></a></p><h1 id="一、索引是什么？"><a href="#一、索引是什么？" class="headerlink" title="一、索引是什么？"></a>一、索引是什么？</h1><p>索引是为了加速对表中数据行的检索而创建的一种分散存储的数据结构。</p><h1 id="二、为什么要使用索引？"><a href="#二、为什么要使用索引？" class="headerlink" title="二、为什么要使用索引？"></a>二、为什么要使用索引？</h1><ol><li>索引能极大的减少存储引擎需要扫描的数据量。</li><li>索引可以把随机IO变成顺序IO。</li><li>索引可以帮助我们在进行分组、排序等操作时，避免使<br>用临时表。<h1 id="三、为什么选择B-Tree？"><a href="#三、为什么选择B-Tree？" class="headerlink" title="三、为什么选择B+Tree？"></a>三、为什么选择B+Tree？</h1><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li></ol><p>1，索引谁实现的<br>2，索引的定义<br>3，为什么选择B+Tree<br>4，B+Tree在两大引擎中如何体现<br>5，索引知识补充<br>6，总结及验证</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://lilyssh.cn/mysql/2-mysql-B+Tree/&quot;&gt;https://lilyssh.cn/mysql/2-mysql-B+Tree/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正确的创建合适的索引是提升数据库查询性能的基础。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lilyssh.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lilyssh.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>如何获取自定义注解使用者信息</title>
    <link href="https://lilyssh.cn/rpc/4-custom-annotation/"/>
    <id>https://lilyssh.cn/rpc/4-custom-annotation/</id>
    <published>2018-02-03T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.427Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/84306592" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/84306592</a><br>项目源码地址：<a href="https://gitee.com/lilyssh/lilyssh-rpc" target="_blank" rel="noopener">https://gitee.com/lilyssh/lilyssh-rpc</a></p><h1 id="一、项目需求"><a href="#一、项目需求" class="headerlink" title="一、项目需求"></a>一、项目需求</h1><p>在启动项目时，获取自定义注解使用者的信息。</p><h1 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h1><p>工程 lilyssh-rpc 的结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ tree -I target</span><br><span class="line">.</span><br><span class="line">├── lrpc</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">│       └── main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn</span><br><span class="line">│           │       └── lilyssh</span><br><span class="line">│           │           └── rpc</span><br><span class="line">│           │               ├── annotation</span><br><span class="line">│           │               │   └── LrpcService.java</span><br><span class="line">│           │               └── processor</span><br><span class="line">│           │                   └── AnnotationInitializeProcessor.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               ├── META-INF</span><br><span class="line">│               │   └── spring.factories</span><br><span class="line">│               └── application.yml</span><br><span class="line">├── pom.xml</span><br><span class="line">└── demo</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br><span class="line">        └── main</span><br><span class="line">            ├── java</span><br><span class="line">            │   └── cn</span><br><span class="line">            │       └── lilyssh</span><br><span class="line">            │           └── demo</span><br><span class="line">            │               ├── DemoApplication.java</span><br><span class="line">            │               └── service</span><br><span class="line">            │                   └── UserService.java</span><br><span class="line">            └── resources</span><br><span class="line">                └── application.yml</span><br></pre></td></tr></table></figure></p><p>lrpc是创建自定义注解的项目。demo是使用自定义注解的项目。</p><h1 id="三、lrpc项目："><a href="#三、lrpc项目：" class="headerlink" title="三、lrpc项目："></a>三、lrpc项目：</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-自定义注解"><a href="#2-自定义注解" class="headerlink" title="2. 自定义注解"></a>2. 自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc.annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LrpcService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-监听每个bean的注入"><a href="#3-监听每个bean的注入" class="headerlink" title="3. 监听每个bean的注入"></a>3. 监听每个bean的注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc.processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.rpc.annotation.LrpcService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationInitializeProcessor</span>  <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">//获取bean的class对象</span></span><br><span class="line">        Class&lt;? extends Object&gt; clazz = bean.getClass();</span><br><span class="line">        <span class="comment">//判断该bean是否用了LrpcService注解</span></span><br><span class="line">        LrpcService lrpcService = AnnotationUtils.findAnnotation(clazz, LrpcService.class);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=lrpcService)&#123;</span><br><span class="line">            System.out.println(<span class="string">"------------------------"</span>+bean.toString());</span><br><span class="line">            System.out.println(<span class="string">"^^^^^^^^^^^^^^^^^^^^^^^^"</span>+lrpcService.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"++++++++++++++++++++++++"</span>+bean.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-扫描bean注入监听类"><a href="#4-扫描bean注入监听类" class="headerlink" title="4. 扫描bean注入监听类"></a>4. 扫描bean注入监听类</h2><p>在<code>resources/META-INF</code>下创建<code>spring.factories</code>，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  cn.lilyssh.rpc.processor.AnnotationInitializeProcessor</span><br></pre></td></tr></table></figure></p><h1 id="四、demo项目："><a href="#四、demo项目：" class="headerlink" title="四、demo项目："></a>四、demo项目：</h1><p>使用自定义注解的spring boot项目。</p><h2 id="1-引入依赖："><a href="#1-引入依赖：" class="headerlink" title="1. 引入依赖："></a>1. 引入依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lilyssh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-使用自定义注解："><a href="#2-使用自定义注解：" class="headerlink" title="2. 使用自定义注解："></a>2. 使用自定义注解：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.demo.service;</span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.rpc.annotation.LrpcService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LrpcService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、测试："><a href="#五、测试：" class="headerlink" title="五、测试："></a>五、测试：</h1><p>启动demo项目，会看到：<br><img src="https://resource.lilyssh.cn/pic/custom-annotation.png" alt><br>大功告成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://blog.csdn.net/lilyssh/article/details/84306592&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lilyssh/a
      
    
    </summary>
    
      <category term="Annotation" scheme="https://lilyssh.cn/categories/Annotation/"/>
    
    
      <category term="Annotation" scheme="https://lilyssh.cn/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Netty的使用</title>
    <link href="https://lilyssh.cn/rpc/3-netty/"/>
    <id>https://lilyssh.cn/rpc/3-netty/</id>
    <published>2018-02-02T16:00:00.000Z</published>
    <updated>2019-05-03T11:20:49.426Z</updated>
    
    <content type="html"><![CDATA[<p>转载请标注原文地址：<a href="https://blog.csdn.net/lilyssh/article/details/84306563" target="_blank" rel="noopener">https://blog.csdn.net/lilyssh/article/details/84306563</a><br>项目源码地址：<a href="https://gitee.com/lilyssh/lilyssh-rpc" target="_blank" rel="noopener">https://gitee.com/lilyssh/lilyssh-rpc</a></p><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><p>用netty实现两个项目之间的通讯。</p><h1 id="一、Server端："><a href="#一、Server端：" class="headerlink" title="一、Server端："></a>一、Server端：</h1><h2 id="1-在pom-xml中添加以下依赖"><a href="#1-在pom-xml中添加以下依赖" class="headerlink" title="1. 在pom.xml中添加以下依赖"></a>1. 在pom.xml中添加以下依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.Alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-接收端："><a href="#2-接收端：" class="headerlink" title="2. 接收端："></a>2. 接收端：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.ReferenceCountUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//根据给定的字符串内容创建一个ByteBuf。</span></span><br><span class="line">        <span class="keyword">final</span> ByteBuf buf = Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(<span class="string">"Hi!\r\n"</span>, Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(1)、初始化用于Acceptor的主"线程池"以及用于I/O工作的从"线程池"；</span></span><br><span class="line">        <span class="comment">//NioEventLoopGroup可以理解为一个线程池，内部维护了一组线程，每个线程负责处理多个Channel上的事件，而一个Channel只对应于一个线程，这样可以回避多线程下的数据同步问题。默认的线程数目是 CPU 核数 × 2。</span></span><br><span class="line">        EventLoopGroup group=<span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//(2)、ServerBootstrap负责初始化netty服务器，并且开始监听端口的socket请求。</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//(3)、通过ServerBootstrap的group方法，设置（1）中初始化的主从"线程池"；</span></span><br><span class="line">            serverBootstrap.group(group)</span><br><span class="line">                    <span class="comment">//(4)、 指定通道channel的类型，由于是服务端，故而是NioServerSocketChannel；</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .localAddress(<span class="keyword">new</span> InetSocketAddress(<span class="number">2222</span>))</span><br><span class="line">                    <span class="comment">//(5)、 设置子通道也就是SocketChannel的处理器， 其内部是实际业务开发的"主战场"</span></span><br><span class="line">                    .childHandler(</span><br><span class="line">                    <span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            channel.pipeline().addLast(<span class="keyword">new</span> ChannelHandlerAdapter()&#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">                                    ByteBuf in = (ByteBuf) msg;</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        <span class="keyword">while</span> (in.isReadable()) &#123;</span><br><span class="line">                                            System.out.print((<span class="keyword">char</span>) in.readByte());</span><br><span class="line">                                            System.out.flush();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                        ReferenceCountUtil.release(msg);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//(6)、 绑定并侦听某个端口</span></span><br><span class="line">            ChannelFuture f = serverBootstrap.bind().sync();</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-调用、启动："><a href="#3-调用、启动：" class="headerlink" title="3. 调用、启动："></a>3. 调用、启动：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lilyssh.receiver.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        receiver.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Client端："><a href="#二、Client端：" class="headerlink" title="二、Client端："></a>二、Client端：</h1><h2 id="1-在pom-xml中添加以下依赖-1"><a href="#1-在pom-xml中添加以下依赖-1" class="headerlink" title="1. 在pom.xml中添加以下依赖"></a>1. 在pom.xml中添加以下依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.Alpha2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-发送端："><a href="#2-发送端：" class="headerlink" title="2. 发送端："></a>2. 发送端：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//worker负责读写数据</span></span><br><span class="line">        EventLoopGroup worker = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">//设置线程池</span></span><br><span class="line">            b.group(worker);</span><br><span class="line">            <span class="comment">//设置socket工厂</span></span><br><span class="line">            b.channel(NioSocketChannel.class);</span><br><span class="line">            b.option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//设置管道</span></span><br><span class="line">            b.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">//获取管道</span></span><br><span class="line">                    ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">                    <span class="comment">//字符串解码器</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                    <span class="comment">//字符串编码器</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                    <span class="comment">//处理类</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> ClientHandler4());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//发起异步连接操作</span></span><br><span class="line">            ChannelFuture futrue = b.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">2222</span>)).sync();</span><br><span class="line">            <span class="comment">//等待客户端链路关闭</span></span><br><span class="line">            futrue.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//优雅的退出，释放NIO线程组</span></span><br><span class="line">            worker.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientHandler4</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受服务端发来的消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"server response ： "</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与服务器建立连接</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//给服务器发消息</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="string">"i am client !"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"channelActive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与服务器断开连接</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channelInactive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭管道</span></span><br><span class="line">        ctx.channel().close();</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-调用、启动：-1"><a href="#3-调用、启动：-1" class="headerlink" title="3. 调用、启动："></a>3. 调用、启动：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lilyssh.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSender</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sender sender = <span class="keyword">new</span> Sender();</span><br><span class="line">        sender.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会看到客户端regisry控制台打印了：channelActive，服务端lrpc控制台打印了：i am client !。<br>大功告成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载请标注原文地址：&lt;a href=&quot;https://blog.csdn.net/lilyssh/article/details/84306563&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lilyssh/a
      
    
    </summary>
    
      <category term="Netty" scheme="https://lilyssh.cn/categories/Netty/"/>
    
    
      <category term="Netty" scheme="https://lilyssh.cn/tags/Netty/"/>
    
  </entry>
  
</feed>
